/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecopy.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser_helper_stubs.h"
#include "utils_sql.h"
#include <QObject>
#include <QDebug>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite2_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite2_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite2_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite2_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite2_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite2_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 241
#define YYACTIONTYPE unsigned short int
#define sqlite2_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite2_parseTOKENTYPE yy0;
  ParserCreateTableConstraintList* yy13;
  SqliteSelect::Core::JoinSource* yy31;
  ParserStubAlias* yy40;
  SqliteExpr::LikeOp* yy41;
  ParserCreateTableColumnList* yy42;
  SqliteColumnType* yy57;
  ParserIndexedColumnList* yy63;
  QVariant* yy69;
  SqliteCreateTrigger::Scope* yy83;
  ParserStubExplain* yy91;
  ParserFullName* yy120;
  SqliteSelect::Core::SingleSource* yy121;
  ParserOtherSourceList* yy131;
  SqliteCreateTable::Column* yy147;
  SqliteSelect::Core* yy150;
  SqliteCreateTrigger::Event* yy151;
  SqliteSelect* yy153;
  SqliteForeignKey::Condition* yy187;
  SqliteExpr* yy192;
  ParserSetValueList* yy201;
  SqliteQuery* yy203;
  ParserStringList* yy207;
  ParserResultColumnList* yy213;
  SqliteSelect::Core::JoinOp* yy221;
  int* yy226;
  ParserExprList* yy231;
  ParserOrderByList* yy243;
  ParserFkConditionList* yy264;
  ParserQueryList* yy270;
  bool* yy291;
  SqliteCreateTable::Column::Constraint* yy304;
  SqliteInitially* yy312;
  QString* yy319;
  SqliteLimit* yy324;
  ParserDeferSubClause* yy329;
  ParserStubInsertOrReplace* yy344;
  ParserCreateTableColumnConstraintList* yy371;
  SqliteCreateTrigger::Time* yy372;
  SqliteSelect::CompoundOperator* yy382;
  SqliteSortOrder* yy389;
  ParserStubTransDetails* yy404;
  SqliteCreateTable::Constraint* yy406;
  SqliteConflictAlgo* yy418;
  SqliteForeignKey::Condition::Reaction* yy424;
  SqliteIndexedColumn* yy428;
  SqliteSelect::Core::JoinConstraint* yy455;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite2_parseARG_SDECL ParserContext* parserContext;
#define sqlite2_parseARG_PDECL ,ParserContext* parserContext
#define sqlite2_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite2_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 582
#define YYNRULE 343
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite2_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (1668)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   338,  191,  186,  242,  476,  509,  574,  193,  332,   16,
 /*    10 */   509,  384,  189,  322,  239,  517,  516,  568,  337,  450,
 /*    20 */    15,  840,  125,   58,  573,  179,  840,  572,   63,  142,
 /*    30 */   401,  579,  328,   27,   83,  567,  114,  322,  571,  517,
 /*    40 */   516,  840,  840,   36,  840,  840,  840,  840,  840,  840,
 /*    50 */   840,  840,  840,  840,  840,  840,  840,  840,  840,   33,
 /*    60 */    34,  840,  840,  840,  840,  320,  379,   35,  240,  238,
 /*    70 */   121,  568,  291,  251,   57,    7,  219,  575,  265,  264,
 /*    80 */   521,  156,  155,  336,  335,  338,  567,  547,  546,  548,
 /*    90 */   271,  561,   11,  722,  199,  297,  203,  489,  459,  332,
 /*   100 */   566,  565,  451,  253,  158,  521,  449,  444,  443,  337,
 /*   110 */   187,  859,  545,  187,  578,  515,  168,  328,  503,  343,
 /*   120 */   142,  235,  489,  108,  316,  245,  521,  164,   36,  529,
 /*   130 */   187,   12,  521,  252,  234,  545,  236,  119,  340,  232,
 /*   140 */   339,  120,  216,  188,   33,   34,  481,  545,  322,  215,
 /*   150 */   517,  516,   35,  712,  566,  565,  320,  367,  545,  554,
 /*   160 */     7,  712,  400,  321,  251,  521,  712,   19,  336,  335,
 /*   170 */   553,  551,  547,  546,  548,   89,  465,  498,  401,  466,
 /*   180 */   366,  365,  550,  364,  293,  435,   40,   40,   40,   39,
 /*   190 */   521,  560,   60,  118,  712,  567,  712,  712,  841,  568,
 /*   200 */   271,  712,  500,  841,   32,  712,   30,  712,  712,  712,
 /*   210 */   712,  521,  567,  178,  529,  422,   12,  521,   45,   46,
 /*   220 */   330,   43,   43,  528,  528,  223,  841,  841,   44,   44,
 /*   230 */    44,   44,   42,   42,   42,   42,   41,   41,   40,   40,
 /*   240 */    40,   39,  199,  297,  203,    5,  236,  611,  340,  232,
 /*   250 */   339,  120,  216,  568,  106,  568,  268,  568,  187,  215,
 /*   260 */   498,  104,  551,   42,   42,   42,   42,   41,   41,   40,
 /*   270 */    40,   40,   39,  550,   41,   41,   40,   40,   40,   39,
 /*   280 */   841,  219,  566,  565,  612,  841,   99,  308,  306,  305,
 /*   290 */   460,  567,  494,  440,  322,   75,  517,  516,   54,  304,
 /*   300 */    45,   46,  330,   43,   43,  528,  528,  223,  841,  841,
 /*   310 */    44,   44,   44,   44,   42,   42,   42,   42,   41,   41,
 /*   320 */    40,   40,   40,   39,  613,  531,  841,  569,    3,  505,
 /*   330 */   245,  841,  256,  510,  418,  418,  566,  565,  566,  565,
 /*   340 */   566,  565,  926,  122,  344,    1,   45,   46,  330,   43,
 /*   350 */    43,  528,  528,  223,  841,  841,   44,   44,   44,   44,
 /*   360 */    42,   42,   42,   42,   41,   41,   40,   40,   40,   39,
 /*   370 */   338,   14,   45,   46,  330,   43,   43,  528,  528,  223,
 /*   380 */   448,  447,   44,   44,   44,   44,   42,   42,   42,   42,
 /*   390 */    41,   41,   40,   40,   40,   39,   64,    9,   87,  772,
 /*   400 */   220,  568,  328,  284,   45,   46,  330,   43,   43,  528,
 /*   410 */   528,  223,  772,   36,   44,   44,   44,   44,   42,   42,
 /*   420 */    42,   42,   41,   41,   40,   40,   40,   39,    8,   33,
 /*   430 */    34,  274,   66,  435,  425,  470,  237,   35,  767,  421,
 /*   440 */    60,  345,  426,  567,  250,    7,  767,  437,  441,  169,
 /*   450 */   521,  446,  445,  336,  335,  498,  772,  547,  546,  548,
 /*   460 */    44,   44,   44,   44,   42,   42,   42,   42,   41,   41,
 /*   470 */    40,   40,   40,   39,  100,  521,  332,  387,  225,  767,
 /*   480 */   388,  767,  767,  839,  566,  565,  337,   91,  839,   84,
 /*   490 */   767,  580,  767,  767,  767,   65,  521,  142,   31,  529,
 /*   500 */   285,   12,  521,  839,  839,  839,  839,  839,  839,  839,
 /*   510 */   839,  839,  839,  839,  839,  839,  839,  839,  839,  839,
 /*   520 */   839,  839,  839,  839,  839,  839,  839,  841,  111,  357,
 /*   530 */    55,   17,  841,  320,  325,  269,  542,  541,  498,  567,
 /*   540 */   311,  251,  401,  255,  358,  359,  527,   45,   46,  330,
 /*   550 */    43,   43,  528,  528,  223,  841,  841,   44,   44,   44,
 /*   560 */    44,   42,   42,   42,   42,   41,   41,   40,   40,   40,
 /*   570 */    39,   45,   46,  330,   43,   43,  528,  528,  223,  908,
 /*   580 */   187,   44,   44,   44,   44,   42,   42,   42,   42,   41,
 /*   590 */    41,   40,   40,   40,   39,  292,  536,  526,  773,  172,
 /*   600 */   171,  170,  488,  360,  536,  102,  199,  297,  203,  477,
 /*   610 */    95,  773,   96,  478,   45,   46,  330,   43,   43,  528,
 /*   620 */   528,  223,  187,  159,   44,   44,   44,   44,   42,   42,
 /*   630 */    42,   42,   41,   41,   40,   40,   40,   39,  464,  487,
 /*   640 */   483,  908,  559,   79,  452,   23,   70,  393,  392,  455,
 /*   650 */   389,  390,  287,  525,  568,  773,  498,   45,   46,  330,
 /*   660 */    43,   43,  528,  528,  223,  463,  317,   44,   44,   44,
 /*   670 */    44,   42,   42,   42,   42,   41,   41,   40,   40,   40,
 /*   680 */    39,   45,   46,  330,   43,   43,  528,  528,  223,  581,
 /*   690 */     1,   44,   44,   44,   44,   42,   42,   42,   42,   41,
 /*   700 */    41,   40,   40,   40,   39,  185,  184,   45,   46,  330,
 /*   710 */    43,   43,  528,  528,  223,  110,  475,   44,   44,   44,
 /*   720 */    44,   42,   42,   42,   42,   41,   41,   40,   40,   40,
 /*   730 */    39,  524,  267,  538,  537,  214,  434,  566,  565,  498,
 /*   740 */    75,  436,  218,   45,   46,  330,   43,   43,  528,  528,
 /*   750 */   223,   28,  523,   44,   44,   44,   44,   42,   42,   42,
 /*   760 */    42,   41,   41,   40,   40,   40,   39,  568,  518,   45,
 /*   770 */    46,  330,   43,   43,  528,  528,  223,  568,  212,   44,
 /*   780 */    44,   44,   44,   42,   42,   42,   42,   41,   41,   40,
 /*   790 */    40,   40,   39,   46,  330,   43,   43,  528,  528,  223,
 /*   800 */   514,  568,   44,   44,   44,   44,   42,   42,   42,   42,
 /*   810 */    41,   41,   40,   40,   40,   39,  338,  330,   43,   43,
 /*   820 */   528,  528,  223,  582,  498,   44,   44,   44,   44,   42,
 /*   830 */    42,   42,   42,   41,   41,   40,   40,   40,   39,  848,
 /*   840 */   568,  213,   11,   25,  332,  345,   75,  489,  328,  162,
 /*   850 */   566,  565,  506,  568,  337,  538,  537,  391,  164,   36,
 /*   860 */   566,  565,  480,  164,  500,  139,  568,  167,  209,  205,
 /*   870 */   272,  204,  489,   13,  567,   33,   34,  310,  567,  567,
 /*   880 */   545,   76,  391,   35,  566,  565,  100,   49,  395,  545,
 /*   890 */   495,    7,  851,  395,  545,  580,  521,  338,  545,  336,
 /*   900 */   335,  103,  301,  547,  546,  548,  530,  498,  568,  520,
 /*   910 */    80,  396,  398,  484,  397,  293,  396,  398,  259,  397,
 /*   920 */   293,  521,  434,  566,  565,  568,  493,  530,  568,  328,
 /*   930 */    99,  308,  306,  305,  290,  163,  566,  565,    4,  289,
 /*   940 */    36,  568,  521,  304,  357,  529,  413,   12,  521,  566,
 /*   950 */   565,  533,  568,  312,  567,  255,   33,   34,  530,  358,
 /*   960 */   275,  215,  479,  568,   35,  219,  545,  185,  184,  522,
 /*   970 */   474,  413,    7,  471,  473,  567,  568,  521,  338,  530,
 /*   980 */   336,  335,  439,  217,  547,  546,  548,  522,  500,  568,
 /*   990 */   324,  566,  565,  567,  354,  538,  537,  160,  567,  307,
 /*  1000 */   303,  568,  521,   98,  356,  407,  355,  420,  566,  565,
 /*  1010 */   328,  566,  565,  568,  181,  540,  542,  541,  276,  536,
 /*  1020 */    53,   36,   52,  521,  566,  565,  529,   11,   12,  521,
 /*  1030 */   407,  338,  489,  728,  332,  566,  565,   33,   34,  498,
 /*  1040 */   522,  568,  286,  380,  337,   35,  566,  565,  498,   18,
 /*  1050 */   495,  495,   51,    7,  211,   78,  403,  489,  521,  566,
 /*  1060 */   565,  336,  335,  328,  234,  547,  546,  548,   73,  376,
 /*  1070 */   728,  728,  566,  565,   36,  568,  536,   82,  202,  383,
 /*  1080 */   296,  403,  332,  521,  566,  565,  482,  491,  567,  333,
 /*  1090 */    33,   34,  337,  371,  376,  302,  566,  565,   35,  520,
 /*  1100 */    75,  380,  568,  142,  521,  160,    7,  529,   69,   12,
 /*  1110 */   521,  521,  338,  332,  336,  335,  106,  124,  547,  546,
 /*  1120 */   548,  368,  498,  337,  566,  565,  568,  501,  350,    2,
 /*  1130 */    22,  566,  565,   21,  142,  254,  521,  568,  179,  318,
 /*  1140 */   442,  182,   67,  179,  328,  567,  361,  251,  567,  568,
 /*  1150 */   567,  160,  371,  567,  494,   36,  404,  521,  566,  565,
 /*  1160 */   529,  108,   12,  521,  405,  849,  534,  542,  541,  266,
 /*  1170 */   338,   33,   34,    6,  262,  399,  394,  568,  323,   35,
 /*  1180 */   512,  222,  568,  368,  332,  566,  565,    7,  350,  258,
 /*  1190 */   568,  558,  521,  568,  337,  336,  335,  568,  455,  547,
 /*  1200 */   546,  548,  328,  197,  338,   77,  568,  492,   75,  566,
 /*  1210 */   565,  456,   71,   36,  198,  495,  456,  521,  664,  108,
 /*  1220 */   566,  565,  568,  423,  567,  187,  468,  536,  386,   33,
 /*  1230 */    34,  568,  566,  565,  568,   50,  328,   35,  521,  568,
 /*  1240 */    81,  529,  568,   12,  521,    7,  851,   36,  568,  520,
 /*  1250 */   521,  490,  496,  336,  335,  281,  115,  547,  546,  548,
 /*  1260 */   566,  565,  568,   33,   34,  566,  565,  486,  568,  381,
 /*  1270 */   568,   35,  278,  566,  565,  521,  566,  565,  568,    7,
 /*  1280 */   566,  565,  568,  363,  521,  353,  431,  336,  335,  566,
 /*  1290 */   565,  547,  546,  548,  277,  485,  521,  417,  424,  529,
 /*  1300 */   294,   12,  521,  513,  352,  566,  565,  351,   48,  521,
 /*  1310 */   567,  416,  174,  567,  566,  565,  157,  566,  565,  263,
 /*  1320 */   542,  541,  566,  565,  179,  566,  565,  415,  160,  180,
 /*  1330 */   521,  566,  565,  529,  567,   12,  521,   74,  385,  411,
 /*  1340 */   179,  309,  542,  541,  406,  566,  565,  377,  241,  112,
 /*  1350 */   567,  566,  565,  566,  565,  261,  374,  409,  564,  179,
 /*  1360 */   177,  566,  565,  332,  332,  566,  565,  342,  332,  567,
 /*  1370 */   577,  260,   10,  337,  337,  557,  563,  332,  337,  341,
 /*  1380 */   536,  192,  332,  562,  146,  144,  270,  337,  556,  151,
 /*  1390 */   257,  567,  337,  555,  229,  332,  499,  456,  150,  332,
 /*  1400 */   552,  373,  536,  152,  457,  337,  549,  228,  408,  337,
 /*  1410 */   370,  279,  187,  456,   17,  332,  161,  332,   24,  220,
 /*  1420 */   224,  567,  319,  226,  332,  337,  544,  337,  520,  520,
 /*  1430 */    59,  332,  456,  520,  337,  227,  249,  334,  143,   39,
 /*  1440 */    47,  337,  520,  543,  332,  149,  332,  520,  332,  332,
 /*  1450 */    29,  568,  145,  332,  337,  519,  337,  183,  337,  337,
 /*  1460 */   520,  511,  332,  337,  520,  248,  332,  247,   37,  246,
 /*  1470 */   141,  332,  337,  508,  133,  201,  337,  200,  332,  109,
 /*  1480 */   520,  337,  520,  132,  332,  567,  472,  140,  337,  520,
 /*  1490 */   107,  332,  131,  196,  337,  378,  520,  105,  332,  148,
 /*  1500 */   332,  337,  244,  567,   56,  147,  454,  332,  337,  520,
 /*  1510 */   337,  520,  130,  520,  520,  453,  332,  337,  520,  129,
 /*  1520 */   332,  127,  195,  332,  372,  332,  337,  520,  135,  430,
 /*  1530 */   337,  520,  567,  337,  429,  337,  520,  134,  362,  428,
 /*  1540 */   427,  136,  419,  520,  138,   97,  137,  332,  567,  520,
 /*  1550 */   243,   94,  314,  288,  346,  207,  520,  337,  298,  194,
 /*  1560 */   570,  369,  337,  520,  567,  520,  532,  326,  128,  567,
 /*  1570 */   567,   93,  520,   61,  502,  206,  567,  567,   20,   68,
 /*  1580 */   414,  520,  497,  153,  567,  520,  101,   92,  520,  315,
 /*  1590 */   520,  469,  567,  432,   90,  210,  567,  123,  300,  567,
 /*  1600 */    72,  567,  402,  567,  166,  567,  295,  117,  567,  375,
 /*  1610 */   331,  221,  520,  208,  567,  176,  567,  520,  283,  567,
 /*  1620 */   567,  567,  382,  567,   88,  567,   86,   85,  116,  280,
 /*  1630 */   175,  347,  349,  113,  173,  126,  233,  539,  535,  230,
 /*  1640 */   329,  507,  504,  470,  458,  282,  154,  273,  410,  190,
 /*  1650 */   348,  438,  467,  462,  461,  165,  327,  231,  927,   62,
 /*  1660 */   299,  433,  576,  412,  927,  927,  927,   38,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,    8,  195,   10,   80,   25,    5,   14,  156,  202,
 /*    10 */    30,   41,   19,  113,   21,  115,  116,    4,  166,    4,
 /*    20 */    79,   25,   81,   34,   23,  156,   30,   26,   35,  177,
 /*    30 */    37,   72,   36,   53,   54,  166,   43,  113,   37,  115,
 /*    40 */   116,   45,   46,   47,   48,   49,   50,   51,   52,   53,
 /*    50 */    54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
 /*    60 */    64,   65,   66,   67,   68,  213,   96,   71,   75,   76,
 /*    70 */    77,    4,  220,  221,   85,   79,  156,   76,   63,   64,
 /*    80 */    84,  161,   13,   87,   88,    4,  166,   91,   92,   93,
 /*    90 */    47,   80,   79,   80,  101,  102,  103,   84,  229,  156,
 /*   100 */    87,   88,   87,  110,  161,  109,   91,   92,   93,  166,
 /*   110 */   117,  141,  192,  117,  148,   80,  161,   36,   80,  153,
 /*   120 */   177,   93,  109,   85,  204,  205,  130,  161,   47,  133,
 /*   130 */   117,  135,  136,   90,  106,  192,   93,   94,   95,   96,
 /*   140 */    97,   98,   99,   32,   63,   64,   65,  192,  113,  106,
 /*   150 */   115,  116,   71,   72,   87,   88,  213,  191,  192,   16,
 /*   160 */    79,   80,   21,  220,  221,   84,   85,   79,   87,   88,
 /*   170 */    27,    7,   91,   92,   93,   82,   90,    4,   37,   93,
 /*   180 */   214,  215,   18,  217,  218,  156,   65,   66,   67,   68,
 /*   190 */   109,  162,  163,  100,  113,  166,  115,  116,   25,    4,
 /*   200 */    47,  120,  156,   30,  138,  124,  140,  126,  127,  128,
 /*   210 */   129,  130,  166,  184,  133,  186,  135,  136,   45,   46,
 /*   220 */    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
 /*   230 */    57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
 /*   240 */    67,   68,  101,  102,  103,   79,   93,   82,   95,   96,
 /*   250 */    97,   98,   99,    4,   81,    4,  210,    4,  117,  106,
 /*   260 */    87,   80,    7,   59,   60,   61,   62,   63,   64,   65,
 /*   270 */    66,   67,   68,   18,   63,   64,   65,   66,   67,   68,
 /*   280 */    25,  156,   87,   88,   82,   30,   94,   95,   96,   97,
 /*   290 */    80,  166,  119,   80,  113,   85,  115,  116,   85,  107,
 /*   300 */    45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
 /*   310 */    55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
 /*   320 */    65,   66,   67,   68,   82,  130,   25,   74,   79,  204,
 /*   330 */   205,   30,  157,   84,   83,   84,   87,   88,   87,   88,
 /*   340 */    87,   88,  149,  150,  151,  152,   45,   46,   47,   48,
 /*   350 */    49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*   360 */    59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
 /*   370 */     4,  125,   45,   46,   47,   48,   49,   50,   51,   52,
 /*   380 */    91,   92,   55,   56,   57,   58,   59,   60,   61,   62,
 /*   390 */    63,   64,   65,   66,   67,   68,   42,   48,   44,   72,
 /*   400 */    99,    4,   36,  228,   45,   46,   47,   48,   49,   50,
 /*   410 */    51,   52,   85,   47,   55,   56,   57,   58,   59,   60,
 /*   420 */    61,   62,   63,   64,   65,   66,   67,   68,   79,   63,
 /*   430 */    64,   82,   78,  156,  180,  181,  159,   71,   72,  162,
 /*   440 */   163,   22,  188,  166,  164,   79,   80,  167,  168,  169,
 /*   450 */    84,   91,   92,   87,   88,    4,  129,   91,   92,   93,
 /*   460 */    55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
 /*   470 */    65,   66,   67,   68,   31,  109,  156,    6,   85,  113,
 /*   480 */     9,  115,  116,   25,   87,   88,  166,   85,   30,   82,
 /*   490 */   124,   72,  126,  127,  128,  141,  130,  177,  139,  133,
 /*   500 */    29,  135,  136,   45,   46,   47,   48,   49,   50,   51,
 /*   510 */    52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
 /*   520 */    62,   63,   64,   65,   66,   67,   68,   25,   82,  156,
 /*   530 */    79,  129,   30,  213,  137,  170,  171,  172,   87,  166,
 /*   540 */   220,  221,   37,  100,  171,  172,   93,   45,   46,   47,
 /*   550 */    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
 /*   560 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   570 */    68,   45,   46,   47,   48,   49,   50,   51,   52,   10,
 /*   580 */   117,   55,   56,   57,   58,   59,   60,   61,   62,   63,
 /*   590 */    64,   65,   66,   67,   68,  132,  231,   21,   72,  101,
 /*   600 */   102,  103,   85,  230,  231,   88,  101,  102,  103,  114,
 /*   610 */    42,   85,   44,  118,   45,   46,   47,   48,   49,   50,
 /*   620 */    51,   52,  117,   79,   55,   56,   57,   58,   59,   60,
 /*   630 */    61,   62,   63,   64,   65,   66,   67,   68,   11,  122,
 /*   640 */   123,   72,  173,  174,  175,  100,   78,   39,   40,  180,
 /*   650 */   101,  102,  103,   80,    4,  129,    4,   45,   46,   47,
 /*   660 */    48,   49,   50,   51,   52,   38,  121,   55,   56,   57,
 /*   670 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   680 */    68,   45,   46,   47,   48,   49,   50,   51,   52,  151,
 /*   690 */   152,   55,   56,   57,   58,   59,   60,   61,   62,   63,
 /*   700 */    64,   65,   66,   67,   68,   63,   64,   45,   46,   47,
 /*   710 */    48,   49,   50,   51,   52,   85,   80,   55,   56,   57,
 /*   720 */    58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   730 */    68,   80,  105,   91,   92,   80,   86,   87,   88,   87,
 /*   740 */    85,   89,   80,   45,   46,   47,   48,   49,   50,   51,
 /*   750 */    52,  139,   80,   55,   56,   57,   58,   59,   60,   61,
 /*   760 */    62,   63,   64,   65,   66,   67,   68,    4,  114,   45,
 /*   770 */    46,   47,   48,   49,   50,   51,   52,    4,   80,   55,
 /*   780 */    56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
 /*   790 */    66,   67,   68,   46,   47,   48,   49,   50,   51,   52,
 /*   800 */    80,    4,   55,   56,   57,   58,   59,   60,   61,   62,
 /*   810 */    63,   64,   65,   66,   67,   68,    4,   47,   48,   49,
 /*   820 */    50,   51,   52,    0,    4,   55,   56,   57,   58,   59,
 /*   830 */    60,   61,   62,   63,   64,   65,   66,   67,   68,  138,
 /*   840 */     4,   80,   79,   85,  156,   22,   85,   84,   36,  161,
 /*   850 */    87,   88,   85,    4,  166,   91,   92,   84,  161,   47,
 /*   860 */    87,   88,   65,  161,  156,  177,    4,  161,  156,  156,
 /*   870 */   158,  158,  109,  125,  166,   63,   64,   65,  166,  166,
 /*   880 */   192,   79,  109,   71,   87,   88,   31,  120,  191,  192,
 /*   890 */   167,   79,   80,  191,  192,   72,   84,    4,  192,   87,
 /*   900 */    88,   80,   47,   91,   92,   93,  109,   87,    4,  221,
 /*   910 */    82,  214,  215,  122,  217,  218,  214,  215,  210,  217,
 /*   920 */   218,  109,   86,   87,   88,    4,  203,  130,    4,   36,
 /*   930 */    94,   95,   96,   97,  237,  161,   87,   88,  236,  237,
 /*   940 */    47,    4,  130,  107,  156,  133,   84,  135,  136,   87,
 /*   950 */    88,  176,    4,   82,  166,  100,   63,   64,  109,  171,
 /*   960 */   172,  106,   65,    4,   71,  156,  192,   63,   64,    5,
 /*   970 */    80,  109,   79,   80,   80,  166,    4,   84,    4,  130,
 /*   980 */    87,   88,   80,  156,   91,   92,   93,   23,  156,    4,
 /*   990 */    26,   87,   88,  166,   90,   91,   92,  222,  166,   32,
 /*  1000 */    32,    4,  109,   98,  100,   84,  102,   83,   87,   88,
 /*  1010 */    36,   87,   88,    4,  205,  170,  171,  172,  230,  231,
 /*  1020 */    79,   47,   79,  130,   87,   88,  133,   79,  135,  136,
 /*  1030 */   109,    4,   84,   85,  156,   87,   88,   63,   64,    4,
 /*  1040 */    76,    4,  210,   84,  166,   71,   87,   88,    4,   79,
 /*  1050 */   167,  167,   79,   79,   80,  177,   84,  109,   84,   87,
 /*  1060 */    88,   87,   88,   36,  106,   91,   92,   93,  105,   84,
 /*  1070 */   122,  123,   87,   88,   47,    4,  231,  100,  156,  142,
 /*  1080 */   158,  109,  156,  109,   87,   88,  203,  203,  166,  211,
 /*  1090 */    63,   64,  166,   84,  109,   80,   87,   88,   71,  221,
 /*  1100 */    85,  142,    4,  177,  130,  222,   79,  133,  120,  135,
 /*  1110 */   136,   84,    4,  156,   87,   88,   81,   81,   91,   92,
 /*  1120 */    93,   84,   87,  166,   87,   88,    4,  130,   84,   10,
 /*  1130 */    48,   87,   88,   48,  177,  156,  109,    4,  156,  213,
 /*  1140 */   156,  212,  131,  156,   36,  166,  167,  221,  166,    4,
 /*  1150 */   166,  222,  143,  166,  119,   47,   80,  130,   87,   88,
 /*  1160 */   133,   85,  135,  136,   80,  138,  170,  171,  172,  187,
 /*  1170 */     4,   63,   64,   79,  187,   72,   72,    4,  221,   71,
 /*  1180 */   109,  224,    4,  146,  156,   87,   88,   79,  144,   20,
 /*  1190 */     4,  173,   84,    4,  166,   87,   88,    4,  180,   91,
 /*  1200 */    92,   93,   36,   80,    4,  177,    4,  109,   85,   87,
 /*  1210 */    88,  229,   33,   47,  156,  167,  229,  109,   80,   85,
 /*  1220 */    87,   88,    4,   85,  166,  117,  104,  231,   33,   63,
 /*  1230 */    64,    4,   87,   88,    4,   79,   36,   71,  130,    4,
 /*  1240 */   141,  133,    4,  135,  136,   79,   80,   47,    4,  221,
 /*  1250 */    84,  203,  119,   87,   88,  100,  120,   91,   92,   93,
 /*  1260 */    87,   88,    4,   63,   64,   87,   88,  122,    4,  109,
 /*  1270 */     4,   71,  121,   87,   88,  109,   87,   88,    4,   79,
 /*  1280 */    87,   88,    4,   87,   84,   80,  108,   87,   88,   87,
 /*  1290 */    88,   91,   92,   93,   17,  122,  130,  111,  109,  133,
 /*  1300 */   156,  135,  136,  156,   80,   87,   88,  144,  165,  109,
 /*  1310 */   166,  109,   81,  166,   87,   88,  206,   87,   88,  170,
 /*  1320 */   171,  172,   87,   88,  156,   87,   88,  109,  222,  179,
 /*  1330 */   130,   87,   88,  133,  166,  135,  136,  179,  145,  109,
 /*  1340 */   156,  170,  171,  172,  109,   87,   88,  109,  154,   73,
 /*  1350 */   166,   87,   88,   87,   88,  187,  112,  130,  154,  156,
 /*  1360 */   216,   87,   88,  156,  156,   87,   88,  100,  156,  166,
 /*  1370 */   155,  187,   85,  166,  166,  155,  154,  156,  166,  160,
 /*  1380 */   231,  156,  156,  154,  177,  177,   28,  166,  155,  177,
 /*  1390 */   187,  166,  166,  183,  197,  156,  130,  229,  177,  156,
 /*  1400 */   155,  143,  231,  177,  130,  166,  155,  198,  130,  166,
 /*  1410 */   146,  156,  117,  229,  129,  156,  177,  156,  127,   99,
 /*  1420 */   177,  166,  126,  200,  156,  166,  192,  166,  221,  221,
 /*  1430 */   128,  156,  229,  221,  166,  199,  177,  124,  177,   68,
 /*  1440 */   212,  166,  221,  201,  156,  177,  156,  221,  156,  156,
 /*  1450 */   138,    4,  177,  156,  166,   47,  166,  225,  166,  166,
 /*  1460 */   221,  209,  156,  166,  221,  177,  156,  177,  222,  177,
 /*  1470 */   177,  156,  166,  166,  177,  156,  166,  158,  156,   82,
 /*  1480 */   221,  166,  221,  177,  156,  166,  155,  177,  166,  221,
 /*  1490 */   209,  156,  177,  156,  166,  158,  221,   82,  156,  177,
 /*  1500 */   156,  166,  178,  166,   79,  177,  166,  156,  166,  221,
 /*  1510 */   166,  221,  177,  221,  221,  183,  156,  166,  221,  177,
 /*  1520 */   156,  177,  156,  156,  158,  156,  166,  221,  177,  155,
 /*  1530 */   166,  221,  166,  166,  155,  166,  221,  177,  156,  155,
 /*  1540 */   155,  177,  209,  221,  177,   82,  177,  156,  166,  221,
 /*  1550 */   178,   82,  156,   24,  156,  209,  221,  166,  235,  156,
 /*  1560 */   156,  158,  166,  221,  166,  221,  156,  156,  177,  166,
 /*  1570 */   166,   82,  221,  177,  156,  234,  166,  166,  138,  190,
 /*  1580 */   197,  221,  156,   45,  166,  221,  156,   82,  221,  156,
 /*  1590 */   221,  156,  166,  156,   82,  156,  166,  219,  156,  166,
 /*  1600 */    79,  166,  190,  166,  156,  166,  156,   82,  166,  156,
 /*  1610 */   156,  156,  221,  156,  166,  156,  166,  221,  209,  166,
 /*  1620 */   166,  166,  155,  166,   82,  166,   82,   82,  190,  209,
 /*  1630 */   238,   15,  239,  238,  121,  194,  176,  231,  231,  196,
 /*  1640 */   226,  176,  208,  181,  176,  209,  185,  167,  197,  167,
 /*  1650 */   167,  167,  182,  182,  182,  232,  227,  193,  240,  207,
 /*  1660 */   233,  186,  189,  189,  240,  240,  240,  223,
};
#define YY_SHIFT_USE_DFLT (-101)
#define YY_SHIFT_COUNT (343)
#define YY_SHIFT_MIN   (-100)
#define YY_SHIFT_MAX   (1616)
static const short yy_shift_ofst[] = {
 /*     0 */   419,   -7,  505,   -4,  141,  812, 1166, 1108,  904,  904,
 /*    10 */   836,   13, 1027, 1200, 1200,  650,   81,  366,  974,  893,
 /*    20 */  1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
 /*    30 */  1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
 /*    40 */  1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,   43,  948,
 /*    50 */  1274, 1274, 1274, 1274,  642,  642, 1274,  642,  642,  642,
 /*    60 */   652,  173,  763, 1044, 1037, 1009,  985,  972,  921,  862,
 /*    70 */   251, 1266, 1266, 1278,  855, 1274, 1266,  255,  301,  153,
 /*    80 */   797,  959,  773,  249,  849, 1264, 1258, 1244, 1238,  937,
 /*    90 */  1235, 1227, 1230, 1218, 1202, 1193, 1186,  924, 1189, 1178,
 /*   100 */  1122, 1173, 1145, 1035, 1035, 1098, 1133, 1035,  997, 1071,
 /*   110 */   397,  195,  253,   67,   67,   67,   67,   67,   67,   67,
 /*   120 */    67,  -30,  823,  463, 1295, 1295, -101,  502,  502,  502,
 /*   130 */   502,  502,  502,  502,  526,  327,  569,  698,  662,  636,
 /*   140 */   612,  359,  724,  724,  747,  770,  770,  405,  405,  405,
 /*   150 */   405,  204,  211,    1,  192,    1,  181,  517,   35,  964,
 /*   160 */   -20,  121,  -76, -100, -100,  549,  471, -100, -100,  451,
 /*   170 */   627,  627,  627,  820,  820,  820,   93,  402, 1138,  164,
 /*   180 */   443,  545,  164,   66,  764,  764,  767,  495,  164, 1616,
 /*   190 */  1513, 1616, 1525, 1538, 1545, 1544, 1542, 1267, 1525, 1538,
 /*   200 */  1521, 1512, 1505, 1538, 1285, 1489, 1440, 1529, 1469, 1463,
 /*   210 */  1425, 1267, 1267, 1267, 1267, 1358, 1447, 1425, 1267, 1415,
 /*   220 */  1447, 1397, 1312, 1408, 1371, 1320, 1302, 1313, 1291, 1296,
 /*   230 */  1285, 1295, 1267, 1267, 1358, 1267, 1267, 1287, 1276, 1276,
 /*   240 */  1276, 1267, 1276, -101, -101, -101, -101, -101, -101, -101,
 /*   250 */  -101,  458,   15,  354,  349,  498,  568, 1123,  608, 1076,
 /*   260 */  1015,  761,  655,  213,  360,  289,  210,   86,   38,  -11,
 /*   270 */   143,   28,  -59, 1231, 1163, 1224, 1205, 1196, 1277, 1151,
 /*   280 */  1136, 1160, 1155, 1156, 1099, 1195, 1134, 1179, 1169, 1104,
 /*   290 */  1103, 1084, 1094, 1011, 1085, 1082,  963,  988, 1119,  977,
 /*   300 */  1036,  958,  905,  973,  968,  970,  943,  941,  967,  902,
 /*   310 */   894,  890,  897,  871,  828,  791,  821,  802,  758,  748,
 /*   320 */   758,  720,  654,  701,  672,  651,  573,  630,  544,  576,
 /*   330 */   453,  446,  407,  393,  246,  242,  202,  165,  166,   88,
 /*   340 */   111,   11,   69,  -41,
};
#define YY_REDUCE_USE_DFLT (-194)
#define YY_REDUCE_COUNT (250)
#define YY_REDUCE_MIN   (-193)
#define YY_REDUCE_MAX   (1484)
static const short yy_reduce_ofst[] = {
 /*     0 */   193,  -34,  702,  -57,  697,  320, -148,  688,  788,  373,
 /*    10 */    29,  -80,  957,  926,  878,  277, 1396, 1391, 1369, 1367,
 /*    20 */  1364, 1360, 1351, 1344, 1342, 1335, 1328, 1322, 1315, 1310,
 /*    30 */  1306, 1297, 1293, 1292, 1290, 1288, 1275, 1268, 1261, 1259,
 /*    40 */  1243, 1239, 1226, 1221, 1212, 1208, 1207, 1028,  469,  125,
 /*    50 */  1203, 1184, 1168,  987, 1171, 1149,  982,  996,  845,  365,
 /*    60 */   280,  883,  809,  979, 1403, 1366, 1337, 1319,  922,  713,
 /*    70 */   712,  832,  708, 1144,  254, -131,   46,  775,  929, 1018,
 /*    80 */  1454, 1459, 1457, 1455, 1454, 1147, 1147, 1453, 1147, 1147,
 /*    90 */  1147, 1450, 1147, 1147, 1147, 1448, 1442, 1147, 1439, 1437,
 /*   100 */  1435, 1433, 1430, 1048,  884, 1147, 1426,  723, 1418, 1147,
 /*   110 */  1411, 1410, 1404, 1398, 1382, 1255, 1225, 1147, 1058,  984,
 /*   120 */   827,  175,  538,  774,  706,  -45, -193, 1106, 1106, 1106,
 /*   130 */  1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
 /*   140 */  1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
 /*   150 */  1106, 1106, 1106, 1474, 1475, 1473, 1464, 1452, 1464, 1429,
 /*   160 */  1444, 1106, 1464, 1464, 1464, 1427, 1423, 1464, 1464, 1484,
 /*   170 */  1472, 1471, 1470, 1483, 1482, 1480, 1436, 1451, 1461, 1468,
 /*   180 */  1462, 1434, 1465, 1414, 1407, 1406, 1443, 1441, 1460, 1395,
 /*   190 */  1393, 1392, 1420, 1438, 1333, 1333, 1333, 1467, 1409, 1412,
 /*   200 */  1378, 1333, 1333, 1389, 1383, 1333, 1323, 1341, 1346, 1333,
 /*   210 */  1372, 1385, 1384, 1379, 1374, 1332, 1340, 1324, 1331, 1281,
 /*   220 */  1307, 1252, 1232, 1246, 1106, 1228, 1242, 1223, 1236, 1209,
 /*   230 */  1197, 1234, 1251, 1245, 1210, 1233, 1220, 1219, 1229, 1222,
 /*   240 */  1204, 1215, 1194, 1158, 1150, 1110, 1106, 1106, 1106, 1106,
 /*   250 */  1143,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   587,  925,  925,  851,  892,  840,  840,  840,  925,  925,
 /*    10 */   925,  728,  840,  840,  840,  925,  840,  840,  840,  840,
 /*    20 */   840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
 /*    30 */   840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
 /*    40 */   840,  840,  840,  840,  840,  840,  840,  840,  606,  722,
 /*    50 */   925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
 /*    60 */   614,  718,  728,  925,  925,  925,  925,  925,  925,  925,
 /*    70 */   925,  789,  789,  774,  677,  925,  789,  752,  748,  925,
 /*    80 */   828,  925,  925,  925,  828,  925,  925,  925,  925,  925,
 /*    90 */   925,  775,  925,  925,  925,  925,  925,  925,  925,  925,
 /*   100 */   925,  925,  925,  718,  718,  729,  925,  718,  925,  925,
 /*   110 */   925,  829,  592,  925,  871,  925,  925,  925,  925,  925,
 /*   120 */   925,  603,  587,  925,  925,  925,  708,  732,  766,  756,
 /*   130 */   852,  845,  846,  844,  841,  841,  841,  841,  841,  841,
 /*   140 */   841,  841,  841,  812,  805,  816,  804,  820,  830,  815,
 /*   150 */   807,  806,  808,  925,  925,  925,  925,  721,  925,  925,
 /*   160 */   925,  809,  925,  780,  696,  925,  899,  691,  599,  616,
 /*   170 */   925,  925,  925,  925,  925,  925,  925,  765,  668,  752,
 /*   180 */   643,  734,  752,  847,  925,  925,  719,  706,  752,  923,
 /*   190 */   920,  923,  735,  681,  735,  735,  735,  679,  735,  681,
 /*   200 */   785,  735,  735,  681,  765,  735,  907,  904,  735,  735,
 /*   210 */   860,  679,  679,  679,  679,  660,  925,  860,  679,  735,
 /*   220 */   925,  735,  925,  841,  810,  748,  757,  744,  755,  753,
 /*   230 */   765,  925,  679,  679,  660,  679,  679,  663,  591,  591,
 /*   240 */   591,  679,  591,  647,  647,  724,  819,  818,  817,  811,
 /*   250 */   627,  853,  925,  925,  925,  925,  925,  925,  925,  925,
 /*   260 */   925,  925,  925,  925,  925,  925,  925,  925,  925,  758,
 /*   270 */   925,  925,  925,  925,  925,  925,  925,  925,  925,  870,
 /*   280 */   925,  925,  925,  925,  925,  925,  903,  902,  925,  925,
 /*   290 */   925,  925,  925,  925,  925,  925,  925,  925,  891,  925,
 /*   300 */   925,  925,  925,  925,  925,  925,  925,  925,  925,  925,
 /*   310 */   925,  925,  925,  925,  925,  925,  925,  925,  754,  925,
 /*   320 */   850,  832,  699,  839,  925,  925,  925,  925,  925,  831,
 /*   330 */   842,  799,  925,  745,  925,  798,  795,  797,  609,  925,
 /*   340 */   925,  925,  925,  925,  584,  588,  924,  922,  921,  919,
 /*   350 */   879,  878,  877,  875,  884,  883,  882,  881,  880,  876,
 /*   360 */   874,  873,  872,  869,  778,  768,  761,  695,  918,  916,
 /*   370 */   917,  868,  866,  867,  694,  693,  690,  689,  688,  858,
 /*   380 */   857,  855,  854,  856,  602,  895,  898,  897,  896,  901,
 /*   390 */   900,  893,  906,  905,  910,  914,  913,  912,  911,  909,
 /*   400 */   890,  784,  783,  781,  786,  779,  782,  771,  777,  776,
 /*   410 */   769,  770,  682,  764,  762,  763,  894,  692,  601,  737,
 /*   420 */   600,  605,  666,  667,  675,  678,  673,  676,  672,  671,
 /*   430 */   670,  674,  669,  665,  608,  607,  621,  619,  620,  618,
 /*   440 */   617,  615,  637,  636,  633,  635,  632,  634,  631,  630,
 /*   450 */   629,  628,  626,  659,  645,  644,  863,  865,  864,  862,
 /*   460 */   861,  652,  651,  657,  656,  655,  654,  650,  653,  649,
 /*   470 */   648,  646,  642,  803,  802,  796,  824,  705,  704,  713,
 /*   480 */   711,  710,  709,  743,  742,  741,  740,  739,  738,  731,
 /*   490 */   727,  726,  730,  725,  717,  715,  716,  714,  610,  791,
 /*   500 */   788,  790,  787,  733,  723,  720,  707,  747,  749,  843,
 /*   510 */   833,  823,  834,  736,  821,  822,  702,  701,  700,  842,
 /*   520 */   839,  835,  915,  827,  838,  826,  825,  814,  813,  801,
 /*   530 */   836,  837,  800,  746,  760,  887,  886,  889,  888,  885,
 /*   540 */   759,  623,  622,  703,  698,  697,  794,  793,  792,  641,
 /*   550 */   751,  750,  640,  662,  661,  658,  639,  638,  625,  624,
 /*   560 */   604,  598,  597,  596,  595,  613,  612,  611,  609,  594,
 /*   570 */   593,  687,  686,  685,  684,  683,  680,  590,  589,  586,
 /*   580 */   585,  583,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*      AFTER => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*    CASCADE => ID */
    4,  /*    CLUSTER => ID */
    4,  /*   CONFLICT => ID */
    4,  /*       COPY => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /* DELIMITERS => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*        FOR => ID */
    4,  /*       GLOB => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*       LIKE => ID */
    4,  /*      MATCH => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*     PRAGMA => ID */
    4,  /*      RAISE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*  STATEMENT => ID */
    4,  /*       TEMP => ID */
    4,  /*    TRIGGER => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite2_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite2_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite2_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite2_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite2_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite2_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "AFTER",         "ASC",         
  "ATTACH",        "BEFORE",        "BEGIN",         "CASCADE",     
  "CLUSTER",       "CONFLICT",      "COPY",          "DATABASE",    
  "DEFERRED",      "DELIMITERS",    "DESC",          "DETACH",      
  "EACH",          "END",           "EXPLAIN",       "FAIL",        
  "FOR",           "GLOB",          "IGNORE",        "IMMEDIATE",   
  "INITIALLY",     "INSTEAD",       "LIKE",          "MATCH",       
  "KEY",           "OF",            "OFFSET",        "PRAGMA",      
  "RAISE",         "REPLACE",       "RESTRICT",      "ROW",         
  "STATEMENT",     "TEMP",          "TRIGGER",       "VACUUM",      
  "VIEW",          "OR",            "AND",           "NOT",         
  "EQ",            "NE",            "ISNULL",        "NOTNULL",     
  "IS",            "BETWEEN",       "IN",            "GT",          
  "GE",            "LT",            "LE",            "BITAND",      
  "BITOR",         "LSHIFT",        "RSHIFT",        "PLUS",        
  "MINUS",         "STAR",          "SLASH",         "REM",         
  "CONCAT",        "UMINUS",        "UPLUS",         "BITNOT",      
  "SEMI",          "TRANSACTION",   "ID_TRANS",      "COMMIT",      
  "ROLLBACK",      "CREATE",        "TABLE",         "LP",          
  "RP",            "AS",            "DOT",           "ID_TAB_NEW",  
  "ID_DB",         "COMMA",         "ID_COL_NEW",    "STRING",      
  "JOIN_KW",       "ID_COL_TYPE",   "DEFAULT",       "INTEGER",     
  "FLOAT",         "NULL",          "CONSTRAINT",    "PRIMARY",     
  "UNIQUE",        "CHECK",         "REFERENCES",    "COLLATE",     
  "ON",            "INSERT",        "DELETE",        "UPDATE",      
  "ID_FK_MATCH",   "SET",           "DEFERRABLE",    "FOREIGN",     
  "ID_CONSTR",     "ID_TAB",        "DROP",          "ID_VIEW_NEW", 
  "ID_VIEW",       "UNION",         "ALL",           "EXCEPT",      
  "INTERSECT",     "SELECT",        "DISTINCT",      "ID_ALIAS",    
  "FROM",          "USING",         "JOIN",          "ID_JOIN_OPTS",
  "ORDER",         "BY",            "GROUP",         "HAVING",      
  "LIMIT",         "WHERE",         "ID_COL",        "INTO",        
  "VALUES",        "VARIABLE",      "LIKE_KW",       "CASE",        
  "ID_FN",         "ID_ERR_MSG",    "WHEN",          "THEN",        
  "ELSE",          "INDEX",         "ID_IDX_NEW",    "ID_IDX",      
  "ID_PRAGMA",     "ID_TRIG_NEW",   "ID_TRIG",       "error",       
  "cmd",           "input",         "cmdlist",       "ecmd",        
  "explain",       "cmdx",          "trans_opt",     "onconf",      
  "nm",            "temp",          "fullname",      "columnlist",  
  "conslist_opt",  "select",        "column",        "columnid",    
  "type",          "carglist",      "id",            "ids",         
  "typetoken",     "typename",      "signed",        "plus_num",    
  "minus_num",     "ccons",         "ccons_nm",      "carg",        
  "sortorder",     "expr",          "idxlist_opt",   "refargs",     
  "defer_subclause",  "refarg",        "refact",        "init_deferred_pred_opt",
  "conslist",      "tconscomma",    "tcons",         "idxlist",     
  "defer_subclause_opt",  "resolvetype",   "orconf",        "select_stmt", 
  "oneselect",     "multiselect_op",  "distinct",      "selcollist",  
  "from",          "where_opt",     "groupby_opt",   "having_opt",  
  "orderby_opt",   "limit_opt",     "sclp",          "as",          
  "joinsrc",       "singlesrc",     "seltablist",    "joinop",      
  "joinconstr_opt",  "dbnm",          "inscollist",    "sortlist",    
  "collate",       "nexprlist",     "delete_stmt",   "update_stmt", 
  "setlist",       "insert_stmt",   "insert_cmd",    "inscollist_opt",
  "exprlist",      "exprx",         "not_opt",       "likeop",      
  "case_operand",  "case_exprlist",  "case_else",     "raisetype",   
  "uniqueflag",    "idxlist_single",  "nmnum",         "number",      
  "trigger_time",  "trigger_event",  "foreach_clause",  "when_clause", 
  "trigger_cmd_list",  "trigger_cmd",   "database_kw_opt",  "key_opt",     
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "cmdx ::= cmd",
 /*   8 */ "cmd ::= BEGIN trans_opt onconf",
 /*   9 */ "trans_opt ::=",
 /*  10 */ "trans_opt ::= TRANSACTION",
 /*  11 */ "trans_opt ::= TRANSACTION nm",
 /*  12 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  13 */ "cmd ::= COMMIT trans_opt",
 /*  14 */ "cmd ::= END trans_opt",
 /*  15 */ "cmd ::= ROLLBACK trans_opt",
 /*  16 */ "cmd ::= CREATE temp TABLE fullname LP columnlist conslist_opt RP",
 /*  17 */ "cmd ::= CREATE temp TABLE fullname AS select",
 /*  18 */ "cmd ::= CREATE temp TABLE nm DOT ID_TAB_NEW",
 /*  19 */ "cmd ::= CREATE temp TABLE ID_DB|ID_TAB_NEW",
 /*  20 */ "temp ::= TEMP",
 /*  21 */ "temp ::=",
 /*  22 */ "columnlist ::= columnlist COMMA column",
 /*  23 */ "columnlist ::= column",
 /*  24 */ "column ::= columnid type carglist",
 /*  25 */ "columnid ::= nm",
 /*  26 */ "columnid ::= ID_COL_NEW",
 /*  27 */ "id ::= ID",
 /*  28 */ "ids ::= ID|STRING",
 /*  29 */ "nm ::= id",
 /*  30 */ "nm ::= STRING",
 /*  31 */ "nm ::= JOIN_KW",
 /*  32 */ "type ::=",
 /*  33 */ "type ::= typetoken",
 /*  34 */ "typetoken ::= typename",
 /*  35 */ "typetoken ::= typename LP signed RP",
 /*  36 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  37 */ "typename ::= ids",
 /*  38 */ "typename ::= typename ids",
 /*  39 */ "typename ::= ID_COL_TYPE",
 /*  40 */ "signed ::= plus_num",
 /*  41 */ "signed ::= minus_num",
 /*  42 */ "carglist ::= carglist ccons",
 /*  43 */ "carglist ::= carglist ccons_nm ccons",
 /*  44 */ "carglist ::= carglist carg",
 /*  45 */ "carglist ::=",
 /*  46 */ "carg ::= DEFAULT STRING",
 /*  47 */ "carg ::= DEFAULT ID",
 /*  48 */ "carg ::= DEFAULT INTEGER",
 /*  49 */ "carg ::= DEFAULT PLUS INTEGER",
 /*  50 */ "carg ::= DEFAULT MINUS INTEGER",
 /*  51 */ "carg ::= DEFAULT FLOAT",
 /*  52 */ "carg ::= DEFAULT PLUS FLOAT",
 /*  53 */ "carg ::= DEFAULT MINUS FLOAT",
 /*  54 */ "carg ::= DEFAULT NULL",
 /*  55 */ "ccons_nm ::= CONSTRAINT nm",
 /*  56 */ "ccons ::= NULL onconf",
 /*  57 */ "ccons ::= NOT NULL onconf",
 /*  58 */ "ccons ::= PRIMARY KEY sortorder onconf",
 /*  59 */ "ccons ::= UNIQUE onconf",
 /*  60 */ "ccons ::= CHECK LP expr RP onconf",
 /*  61 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  62 */ "ccons ::= defer_subclause",
 /*  63 */ "ccons ::= COLLATE id",
 /*  64 */ "ccons ::= CHECK LP RP",
 /*  65 */ "refargs ::=",
 /*  66 */ "refargs ::= refargs refarg",
 /*  67 */ "refarg ::= MATCH nm",
 /*  68 */ "refarg ::= ON INSERT refact",
 /*  69 */ "refarg ::= ON DELETE refact",
 /*  70 */ "refarg ::= ON UPDATE refact",
 /*  71 */ "refarg ::= MATCH ID_FK_MATCH",
 /*  72 */ "refact ::= SET NULL",
 /*  73 */ "refact ::= SET DEFAULT",
 /*  74 */ "refact ::= CASCADE",
 /*  75 */ "refact ::= RESTRICT",
 /*  76 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /*  77 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /*  78 */ "init_deferred_pred_opt ::=",
 /*  79 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /*  80 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /*  81 */ "conslist_opt ::=",
 /*  82 */ "conslist_opt ::= COMMA conslist",
 /*  83 */ "conslist ::= conslist tconscomma tcons",
 /*  84 */ "conslist ::= tcons",
 /*  85 */ "tconscomma ::= COMMA",
 /*  86 */ "tconscomma ::=",
 /*  87 */ "tcons ::= CONSTRAINT nm",
 /*  88 */ "tcons ::= PRIMARY KEY LP idxlist RP onconf",
 /*  89 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /*  90 */ "tcons ::= CHECK LP expr RP onconf",
 /*  91 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /*  92 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /*  93 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /*  94 */ "tcons ::= CHECK LP RP onconf",
 /*  95 */ "defer_subclause_opt ::=",
 /*  96 */ "defer_subclause_opt ::= defer_subclause",
 /*  97 */ "onconf ::=",
 /*  98 */ "onconf ::= ON CONFLICT resolvetype",
 /*  99 */ "orconf ::=",
 /* 100 */ "orconf ::= OR resolvetype",
 /* 101 */ "resolvetype ::= ROLLBACK",
 /* 102 */ "resolvetype ::= ABORT",
 /* 103 */ "resolvetype ::= FAIL",
 /* 104 */ "resolvetype ::= IGNORE",
 /* 105 */ "resolvetype ::= REPLACE",
 /* 106 */ "cmd ::= DROP TABLE fullname",
 /* 107 */ "cmd ::= DROP TABLE nm DOT ID_TAB",
 /* 108 */ "cmd ::= DROP TABLE ID_DB|ID_TAB",
 /* 109 */ "cmd ::= CREATE temp VIEW nm AS select",
 /* 110 */ "cmd ::= CREATE temp VIEW ID_VIEW_NEW",
 /* 111 */ "cmd ::= DROP VIEW nm",
 /* 112 */ "cmd ::= DROP VIEW ID_VIEW",
 /* 113 */ "cmd ::= select_stmt",
 /* 114 */ "select_stmt ::= select",
 /* 115 */ "select ::= oneselect",
 /* 116 */ "select ::= select multiselect_op oneselect",
 /* 117 */ "multiselect_op ::= UNION",
 /* 118 */ "multiselect_op ::= UNION ALL",
 /* 119 */ "multiselect_op ::= EXCEPT",
 /* 120 */ "multiselect_op ::= INTERSECT",
 /* 121 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 122 */ "distinct ::= DISTINCT",
 /* 123 */ "distinct ::= ALL",
 /* 124 */ "distinct ::=",
 /* 125 */ "sclp ::= selcollist COMMA",
 /* 126 */ "sclp ::=",
 /* 127 */ "selcollist ::= sclp expr as",
 /* 128 */ "selcollist ::= sclp STAR",
 /* 129 */ "selcollist ::= sclp nm DOT STAR",
 /* 130 */ "selcollist ::= sclp",
 /* 131 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 132 */ "as ::= AS nm",
 /* 133 */ "as ::= ids",
 /* 134 */ "as ::= AS ID_ALIAS",
 /* 135 */ "as ::= ID_ALIAS",
 /* 136 */ "as ::=",
 /* 137 */ "from ::=",
 /* 138 */ "from ::= FROM joinsrc",
 /* 139 */ "joinsrc ::= singlesrc seltablist",
 /* 140 */ "joinsrc ::=",
 /* 141 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 142 */ "seltablist ::=",
 /* 143 */ "singlesrc ::= nm dbnm as",
 /* 144 */ "singlesrc ::= LP select RP as",
 /* 145 */ "singlesrc ::= LP joinsrc RP as",
 /* 146 */ "singlesrc ::=",
 /* 147 */ "singlesrc ::= nm DOT",
 /* 148 */ "singlesrc ::= nm DOT ID_TAB",
 /* 149 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 150 */ "joinconstr_opt ::= ON expr",
 /* 151 */ "joinconstr_opt ::= USING LP inscollist RP",
 /* 152 */ "joinconstr_opt ::=",
 /* 153 */ "dbnm ::=",
 /* 154 */ "dbnm ::= DOT nm",
 /* 155 */ "fullname ::= nm dbnm",
 /* 156 */ "joinop ::= COMMA",
 /* 157 */ "joinop ::= JOIN",
 /* 158 */ "joinop ::= JOIN_KW JOIN",
 /* 159 */ "joinop ::= JOIN_KW nm JOIN",
 /* 160 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 161 */ "joinop ::= ID_JOIN_OPTS",
 /* 162 */ "orderby_opt ::=",
 /* 163 */ "orderby_opt ::= ORDER BY sortlist",
 /* 164 */ "sortlist ::= sortlist COMMA collate expr sortorder",
 /* 165 */ "sortlist ::= expr collate sortorder",
 /* 166 */ "collate ::=",
 /* 167 */ "collate ::= COLLATE id",
 /* 168 */ "sortorder ::= ASC",
 /* 169 */ "sortorder ::= DESC",
 /* 170 */ "sortorder ::=",
 /* 171 */ "groupby_opt ::=",
 /* 172 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 173 */ "having_opt ::=",
 /* 174 */ "having_opt ::= HAVING expr",
 /* 175 */ "limit_opt ::=",
 /* 176 */ "limit_opt ::= LIMIT signed",
 /* 177 */ "limit_opt ::= LIMIT signed OFFSET signed",
 /* 178 */ "limit_opt ::= LIMIT signed COMMA signed",
 /* 179 */ "cmd ::= delete_stmt",
 /* 180 */ "delete_stmt ::= DELETE FROM fullname where_opt",
 /* 181 */ "delete_stmt ::= DELETE FROM nm DOT ID_TAB",
 /* 182 */ "delete_stmt ::= DELETE FROM ID_DB|ID_TAB",
 /* 183 */ "where_opt ::=",
 /* 184 */ "where_opt ::= WHERE expr",
 /* 185 */ "where_opt ::= WHERE",
 /* 186 */ "cmd ::= update_stmt",
 /* 187 */ "update_stmt ::= UPDATE orconf fullname SET setlist where_opt",
 /* 188 */ "update_stmt ::= UPDATE orconf nm DOT ID_TAB",
 /* 189 */ "update_stmt ::= UPDATE orconf ID_DB|ID_TAB",
 /* 190 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 191 */ "setlist ::= nm EQ expr",
 /* 192 */ "setlist ::=",
 /* 193 */ "setlist ::= setlist COMMA",
 /* 194 */ "setlist ::= setlist COMMA ID_COL",
 /* 195 */ "setlist ::= ID_COL",
 /* 196 */ "cmd ::= insert_stmt",
 /* 197 */ "insert_stmt ::= insert_cmd INTO fullname inscollist_opt VALUES LP exprlist RP",
 /* 198 */ "insert_stmt ::= insert_cmd INTO fullname inscollist_opt select",
 /* 199 */ "insert_stmt ::= insert_cmd INTO ID_DB|ID_TAB",
 /* 200 */ "insert_stmt ::= insert_cmd INTO nm DOT ID_TAB",
 /* 201 */ "insert_cmd ::= INSERT orconf",
 /* 202 */ "insert_cmd ::= REPLACE",
 /* 203 */ "inscollist_opt ::=",
 /* 204 */ "inscollist_opt ::= LP inscollist RP",
 /* 205 */ "inscollist ::= inscollist COMMA nm",
 /* 206 */ "inscollist ::= nm",
 /* 207 */ "inscollist ::=",
 /* 208 */ "inscollist ::= inscollist COMMA ID_COL",
 /* 209 */ "inscollist ::= ID_COL",
 /* 210 */ "exprx ::= NULL",
 /* 211 */ "exprx ::= INTEGER",
 /* 212 */ "exprx ::= FLOAT",
 /* 213 */ "exprx ::= STRING",
 /* 214 */ "exprx ::= LP expr RP",
 /* 215 */ "exprx ::= id",
 /* 216 */ "exprx ::= JOIN_KW",
 /* 217 */ "exprx ::= nm DOT nm",
 /* 218 */ "exprx ::= nm DOT nm DOT nm",
 /* 219 */ "exprx ::= VARIABLE",
 /* 220 */ "exprx ::= ID LP exprlist RP",
 /* 221 */ "exprx ::= ID LP STAR RP",
 /* 222 */ "exprx ::= expr AND expr",
 /* 223 */ "exprx ::= expr OR expr",
 /* 224 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 225 */ "exprx ::= expr EQ|NE expr",
 /* 226 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 227 */ "exprx ::= expr PLUS|MINUS expr",
 /* 228 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 229 */ "exprx ::= expr CONCAT expr",
 /* 230 */ "exprx ::= expr not_opt likeop expr",
 /* 231 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 232 */ "exprx ::= expr NOT NULL",
 /* 233 */ "exprx ::= expr IS not_opt expr",
 /* 234 */ "exprx ::= NOT expr",
 /* 235 */ "exprx ::= BITNOT expr",
 /* 236 */ "exprx ::= MINUS expr",
 /* 237 */ "exprx ::= PLUS expr",
 /* 238 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 239 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 240 */ "exprx ::= expr not_opt IN LP select RP",
 /* 241 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 242 */ "exprx ::= LP select RP",
 /* 243 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 244 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 245 */ "exprx ::= RAISE LP IGNORE RP",
 /* 246 */ "exprx ::= nm DOT",
 /* 247 */ "exprx ::= nm DOT nm DOT",
 /* 248 */ "exprx ::= expr not_opt BETWEEN expr",
 /* 249 */ "exprx ::= CASE case_operand case_exprlist case_else",
 /* 250 */ "exprx ::= expr not_opt IN LP exprlist",
 /* 251 */ "exprx ::= expr not_opt IN ID_DB",
 /* 252 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 253 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 254 */ "exprx ::= nm DOT ID_TAB|ID_COL",
 /* 255 */ "exprx ::= nm DOT nm DOT ID_COL",
 /* 256 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 257 */ "expr ::= exprx",
 /* 258 */ "expr ::=",
 /* 259 */ "not_opt ::=",
 /* 260 */ "not_opt ::= NOT",
 /* 261 */ "likeop ::= LIKE|GLOB",
 /* 262 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 263 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 264 */ "case_else ::= ELSE expr",
 /* 265 */ "case_else ::=",
 /* 266 */ "case_operand ::= exprx",
 /* 267 */ "case_operand ::=",
 /* 268 */ "exprlist ::= nexprlist",
 /* 269 */ "exprlist ::=",
 /* 270 */ "nexprlist ::= nexprlist COMMA expr",
 /* 271 */ "nexprlist ::= exprx",
 /* 272 */ "cmd ::= CREATE uniqueflag INDEX nm ON nm dbnm LP idxlist RP onconf",
 /* 273 */ "cmd ::= CREATE uniqueflag INDEX nm dbnm ON ID_TAB",
 /* 274 */ "cmd ::= CREATE uniqueflag INDEX nm DOT ID_IDX_NEW",
 /* 275 */ "cmd ::= CREATE uniqueflag INDEX ID_DB|ID_IDX_NEW",
 /* 276 */ "uniqueflag ::= UNIQUE",
 /* 277 */ "uniqueflag ::=",
 /* 278 */ "idxlist_opt ::=",
 /* 279 */ "idxlist_opt ::= LP idxlist RP",
 /* 280 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 281 */ "idxlist ::= idxlist_single",
 /* 282 */ "idxlist_single ::= nm sortorder",
 /* 283 */ "idxlist_single ::= ID_COL",
 /* 284 */ "cmd ::= DROP INDEX fullname",
 /* 285 */ "cmd ::= DROP INDEX nm DOT ID_IDX",
 /* 286 */ "cmd ::= DROP INDEX ID_DB|ID_IDX",
 /* 287 */ "cmd ::= COPY orconf nm dbnm FROM nm USING DELIMITERS STRING",
 /* 288 */ "cmd ::= COPY orconf nm dbnm FROM nm",
 /* 289 */ "cmd ::= VACUUM",
 /* 290 */ "cmd ::= VACUUM nm",
 /* 291 */ "cmd ::= PRAGMA ids",
 /* 292 */ "cmd ::= PRAGMA nm EQ nmnum",
 /* 293 */ "cmd ::= PRAGMA nm LP nmnum RP",
 /* 294 */ "cmd ::= PRAGMA nm EQ minus_num",
 /* 295 */ "cmd ::= PRAGMA nm LP minus_num RP",
 /* 296 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 297 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 298 */ "nmnum ::= plus_num",
 /* 299 */ "nmnum ::= nm",
 /* 300 */ "nmnum ::= ON",
 /* 301 */ "nmnum ::= DELETE",
 /* 302 */ "nmnum ::= DEFAULT",
 /* 303 */ "plus_num ::= PLUS number",
 /* 304 */ "plus_num ::= number",
 /* 305 */ "minus_num ::= MINUS number",
 /* 306 */ "number ::= INTEGER",
 /* 307 */ "number ::= FLOAT",
 /* 308 */ "cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON nm dbnm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 309 */ "cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON nm dbnm foreach_clause when_clause",
 /* 310 */ "cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON nm dbnm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 311 */ "cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON ID_TAB|ID_DB",
 /* 312 */ "cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON nm DOT ID_TAB",
 /* 313 */ "cmd ::= CREATE temp TRIGGER ID_TRIG_NEW",
 /* 314 */ "trigger_time ::= BEFORE",
 /* 315 */ "trigger_time ::= AFTER",
 /* 316 */ "trigger_time ::= INSTEAD OF",
 /* 317 */ "trigger_time ::=",
 /* 318 */ "trigger_event ::= DELETE",
 /* 319 */ "trigger_event ::= INSERT",
 /* 320 */ "trigger_event ::= UPDATE",
 /* 321 */ "trigger_event ::= UPDATE OF inscollist",
 /* 322 */ "foreach_clause ::=",
 /* 323 */ "foreach_clause ::= FOR EACH ROW",
 /* 324 */ "foreach_clause ::= FOR EACH STATEMENT",
 /* 325 */ "when_clause ::=",
 /* 326 */ "when_clause ::= WHEN expr",
 /* 327 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 328 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 329 */ "trigger_cmd ::= update_stmt",
 /* 330 */ "trigger_cmd ::= insert_stmt",
 /* 331 */ "trigger_cmd ::= delete_stmt",
 /* 332 */ "trigger_cmd ::= select_stmt",
 /* 333 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 334 */ "cmd ::= DROP TRIGGER fullname",
 /* 335 */ "cmd ::= DROP TRIGGER nm DOT ID_TRIG",
 /* 336 */ "cmd ::= DROP TRIGGER ID_DB|ID_TRIG",
 /* 337 */ "cmd ::= ATTACH database_kw_opt ids AS ids key_opt",
 /* 338 */ "key_opt ::=",
 /* 339 */ "key_opt ::= USING ids",
 /* 340 */ "database_kw_opt ::= DATABASE",
 /* 341 */ "database_kw_opt ::=",
 /* 342 */ "cmd ::= DETACH database_kw_opt nm",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite2_parse and sqlite2_parseFree.
*/
void *sqlite2_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite2_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 148: /* cmd */
    case 151: /* ecmd */
    case 153: /* cmdx */
    case 191: /* select_stmt */
    case 214: /* delete_stmt */
    case 215: /* update_stmt */
    case 217: /* insert_stmt */
    case 237: /* trigger_cmd */
{
delete (yypminor->yy203);
}
      break;
    case 152: /* explain */
{
delete (yypminor->yy91);
}
      break;
    case 154: /* trans_opt */
{
delete (yypminor->yy404);
}
      break;
    case 155: /* onconf */
    case 189: /* resolvetype */
    case 190: /* orconf */
{
delete (yypminor->yy418);
}
      break;
    case 156: /* nm */
    case 163: /* columnid */
    case 166: /* id */
    case 167: /* ids */
    case 169: /* typename */
    case 209: /* dbnm */
{
delete (yypminor->yy319);
}
      break;
    case 157: /* temp */
    case 194: /* distinct */
{
delete (yypminor->yy226);
}
      break;
    case 158: /* fullname */
{
delete (yypminor->yy120);
}
      break;
    case 159: /* columnlist */
{
delete (yypminor->yy42);
}
      break;
    case 160: /* conslist_opt */
    case 184: /* conslist */
{
delete (yypminor->yy13);
}
      break;
    case 161: /* select */
{
delete (yypminor->yy153);
}
      break;
    case 162: /* column */
{
delete (yypminor->yy147);
}
      break;
    case 164: /* type */
    case 168: /* typetoken */
{
delete (yypminor->yy57);
}
      break;
    case 165: /* carglist */
{
delete (yypminor->yy371);
}
      break;
    case 170: /* signed */
    case 171: /* plus_num */
    case 172: /* minus_num */
    case 230: /* nmnum */
    case 231: /* number */
{
delete (yypminor->yy69);
}
      break;
    case 173: /* ccons */
    case 174: /* ccons_nm */
    case 175: /* carg */
{
delete (yypminor->yy304);
}
      break;
    case 176: /* sortorder */
{
delete (yypminor->yy389);
}
      break;
    case 177: /* expr */
    case 197: /* where_opt */
    case 199: /* having_opt */
    case 221: /* exprx */
    case 224: /* case_operand */
    case 226: /* case_else */
{
delete (yypminor->yy192);
}
      break;
    case 178: /* idxlist_opt */
    case 187: /* idxlist */
{
delete (yypminor->yy63);
}
      break;
    case 179: /* refargs */
{
delete (yypminor->yy264);
}
      break;
    case 180: /* defer_subclause */
    case 188: /* defer_subclause_opt */
{
delete (yypminor->yy329);
}
      break;
    case 181: /* refarg */
{
delete (yypminor->yy187);
}
      break;
    case 182: /* refact */
{
delete (yypminor->yy424);
}
      break;
    case 183: /* init_deferred_pred_opt */
{
delete (yypminor->yy312);
}
      break;
    case 185: /* tconscomma */
    case 222: /* not_opt */
    case 228: /* uniqueflag */
    case 238: /* database_kw_opt */
{
delete (yypminor->yy291);
}
      break;
    case 186: /* tcons */
{
delete (yypminor->yy406);
}
      break;
    case 192: /* oneselect */
{
delete (yypminor->yy150);
}
      break;
    case 193: /* multiselect_op */
{
delete (yypminor->yy382);
}
      break;
    case 195: /* selcollist */
    case 202: /* sclp */
{
delete (yypminor->yy213);
}
      break;
    case 196: /* from */
    case 204: /* joinsrc */
{
delete (yypminor->yy31);
}
      break;
    case 198: /* groupby_opt */
    case 213: /* nexprlist */
    case 220: /* exprlist */
    case 225: /* case_exprlist */
{
delete (yypminor->yy231);
}
      break;
    case 200: /* orderby_opt */
    case 211: /* sortlist */
{
delete (yypminor->yy243);
}
      break;
    case 201: /* limit_opt */
{
delete (yypminor->yy324);
}
      break;
    case 203: /* as */
{
delete (yypminor->yy40);
}
      break;
    case 205: /* singlesrc */
{
delete (yypminor->yy121);
}
      break;
    case 206: /* seltablist */
{
delete (yypminor->yy131);
}
      break;
    case 207: /* joinop */
{
delete (yypminor->yy221);
}
      break;
    case 208: /* joinconstr_opt */
{
delete (yypminor->yy455);
}
      break;
    case 210: /* inscollist */
    case 219: /* inscollist_opt */
{
delete (yypminor->yy207);
}
      break;
    case 212: /* collate */
{
if ((yypminor->yy319)) delete (yypminor->yy319);
}
      break;
    case 216: /* setlist */
{
delete (yypminor->yy201);
}
      break;
    case 218: /* insert_cmd */
{
delete (yypminor->yy344);
}
      break;
    case 223: /* likeop */
{
delete (yypminor->yy41);
}
      break;
    case 229: /* idxlist_single */
{
delete (yypminor->yy428);
}
      break;
    case 232: /* trigger_time */
{
delete (yypminor->yy372);
}
      break;
    case 233: /* trigger_event */
{
delete (yypminor->yy151);
}
      break;
    case 234: /* foreach_clause */
{
delete (yypminor->yy83);
}
      break;
    case 235: /* when_clause */
    case 239: /* key_opt */
{
if ((yypminor->yy192)) delete (yypminor->yy192);
}
      break;
    case 236: /* trigger_cmd_list */
{
delete (yypminor->yy270);
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite2_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite2_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite2_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   sqlite2_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    UNUSED_PARAMETER(yypMinor);
    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite2_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 149, 1 },
  { 150, 2 },
  { 150, 1 },
  { 151, 1 },
  { 151, 3 },
  { 152, 0 },
  { 152, 1 },
  { 153, 1 },
  { 148, 3 },
  { 154, 0 },
  { 154, 1 },
  { 154, 2 },
  { 154, 2 },
  { 148, 2 },
  { 148, 2 },
  { 148, 2 },
  { 148, 8 },
  { 148, 6 },
  { 148, 6 },
  { 148, 4 },
  { 157, 1 },
  { 157, 0 },
  { 159, 3 },
  { 159, 1 },
  { 162, 3 },
  { 163, 1 },
  { 163, 1 },
  { 166, 1 },
  { 167, 1 },
  { 156, 1 },
  { 156, 1 },
  { 156, 1 },
  { 164, 0 },
  { 164, 1 },
  { 168, 1 },
  { 168, 4 },
  { 168, 6 },
  { 169, 1 },
  { 169, 2 },
  { 169, 1 },
  { 170, 1 },
  { 170, 1 },
  { 165, 2 },
  { 165, 3 },
  { 165, 2 },
  { 165, 0 },
  { 175, 2 },
  { 175, 2 },
  { 175, 2 },
  { 175, 3 },
  { 175, 3 },
  { 175, 2 },
  { 175, 3 },
  { 175, 3 },
  { 175, 2 },
  { 174, 2 },
  { 173, 2 },
  { 173, 3 },
  { 173, 4 },
  { 173, 2 },
  { 173, 5 },
  { 173, 4 },
  { 173, 1 },
  { 173, 2 },
  { 173, 3 },
  { 179, 0 },
  { 179, 2 },
  { 181, 2 },
  { 181, 3 },
  { 181, 3 },
  { 181, 3 },
  { 181, 2 },
  { 182, 2 },
  { 182, 2 },
  { 182, 1 },
  { 182, 1 },
  { 180, 3 },
  { 180, 2 },
  { 183, 0 },
  { 183, 2 },
  { 183, 2 },
  { 160, 0 },
  { 160, 2 },
  { 184, 3 },
  { 184, 1 },
  { 185, 1 },
  { 185, 0 },
  { 186, 2 },
  { 186, 6 },
  { 186, 5 },
  { 186, 5 },
  { 186, 10 },
  { 186, 2 },
  { 186, 7 },
  { 186, 4 },
  { 188, 0 },
  { 188, 1 },
  { 155, 0 },
  { 155, 3 },
  { 190, 0 },
  { 190, 2 },
  { 189, 1 },
  { 189, 1 },
  { 189, 1 },
  { 189, 1 },
  { 189, 1 },
  { 148, 3 },
  { 148, 5 },
  { 148, 3 },
  { 148, 6 },
  { 148, 4 },
  { 148, 3 },
  { 148, 3 },
  { 148, 1 },
  { 191, 1 },
  { 161, 1 },
  { 161, 3 },
  { 193, 1 },
  { 193, 2 },
  { 193, 1 },
  { 193, 1 },
  { 192, 9 },
  { 194, 1 },
  { 194, 1 },
  { 194, 0 },
  { 202, 2 },
  { 202, 0 },
  { 195, 3 },
  { 195, 2 },
  { 195, 4 },
  { 195, 1 },
  { 195, 4 },
  { 203, 2 },
  { 203, 1 },
  { 203, 2 },
  { 203, 1 },
  { 203, 0 },
  { 196, 0 },
  { 196, 2 },
  { 204, 2 },
  { 204, 0 },
  { 206, 4 },
  { 206, 0 },
  { 205, 3 },
  { 205, 4 },
  { 205, 4 },
  { 205, 0 },
  { 205, 2 },
  { 205, 3 },
  { 205, 1 },
  { 208, 2 },
  { 208, 4 },
  { 208, 0 },
  { 209, 0 },
  { 209, 2 },
  { 158, 2 },
  { 207, 1 },
  { 207, 1 },
  { 207, 2 },
  { 207, 3 },
  { 207, 4 },
  { 207, 1 },
  { 200, 0 },
  { 200, 3 },
  { 211, 5 },
  { 211, 3 },
  { 212, 0 },
  { 212, 2 },
  { 176, 1 },
  { 176, 1 },
  { 176, 0 },
  { 198, 0 },
  { 198, 3 },
  { 199, 0 },
  { 199, 2 },
  { 201, 0 },
  { 201, 2 },
  { 201, 4 },
  { 201, 4 },
  { 148, 1 },
  { 214, 4 },
  { 214, 5 },
  { 214, 3 },
  { 197, 0 },
  { 197, 2 },
  { 197, 1 },
  { 148, 1 },
  { 215, 6 },
  { 215, 5 },
  { 215, 3 },
  { 216, 5 },
  { 216, 3 },
  { 216, 0 },
  { 216, 2 },
  { 216, 3 },
  { 216, 1 },
  { 148, 1 },
  { 217, 8 },
  { 217, 5 },
  { 217, 3 },
  { 217, 5 },
  { 218, 2 },
  { 218, 1 },
  { 219, 0 },
  { 219, 3 },
  { 210, 3 },
  { 210, 1 },
  { 210, 0 },
  { 210, 3 },
  { 210, 1 },
  { 221, 1 },
  { 221, 1 },
  { 221, 1 },
  { 221, 1 },
  { 221, 3 },
  { 221, 1 },
  { 221, 1 },
  { 221, 3 },
  { 221, 5 },
  { 221, 1 },
  { 221, 4 },
  { 221, 4 },
  { 221, 3 },
  { 221, 3 },
  { 221, 3 },
  { 221, 3 },
  { 221, 3 },
  { 221, 3 },
  { 221, 3 },
  { 221, 3 },
  { 221, 4 },
  { 221, 2 },
  { 221, 3 },
  { 221, 4 },
  { 221, 2 },
  { 221, 2 },
  { 221, 2 },
  { 221, 2 },
  { 221, 6 },
  { 221, 6 },
  { 221, 6 },
  { 221, 5 },
  { 221, 3 },
  { 221, 5 },
  { 221, 6 },
  { 221, 4 },
  { 221, 2 },
  { 221, 4 },
  { 221, 4 },
  { 221, 4 },
  { 221, 5 },
  { 221, 4 },
  { 221, 6 },
  { 221, 1 },
  { 221, 3 },
  { 221, 5 },
  { 221, 6 },
  { 177, 1 },
  { 177, 0 },
  { 222, 0 },
  { 222, 1 },
  { 223, 1 },
  { 225, 5 },
  { 225, 4 },
  { 226, 2 },
  { 226, 0 },
  { 224, 1 },
  { 224, 0 },
  { 220, 1 },
  { 220, 0 },
  { 213, 3 },
  { 213, 1 },
  { 148, 11 },
  { 148, 7 },
  { 148, 6 },
  { 148, 4 },
  { 228, 1 },
  { 228, 0 },
  { 178, 0 },
  { 178, 3 },
  { 187, 3 },
  { 187, 1 },
  { 229, 2 },
  { 229, 1 },
  { 148, 3 },
  { 148, 5 },
  { 148, 3 },
  { 148, 9 },
  { 148, 6 },
  { 148, 1 },
  { 148, 2 },
  { 148, 2 },
  { 148, 4 },
  { 148, 5 },
  { 148, 4 },
  { 148, 5 },
  { 148, 4 },
  { 148, 2 },
  { 230, 1 },
  { 230, 1 },
  { 230, 1 },
  { 230, 1 },
  { 230, 1 },
  { 171, 2 },
  { 171, 1 },
  { 172, 2 },
  { 231, 1 },
  { 231, 1 },
  { 148, 14 },
  { 148, 11 },
  { 148, 13 },
  { 148, 8 },
  { 148, 10 },
  { 148, 4 },
  { 232, 1 },
  { 232, 1 },
  { 232, 2 },
  { 232, 0 },
  { 233, 1 },
  { 233, 1 },
  { 233, 1 },
  { 233, 3 },
  { 234, 0 },
  { 234, 3 },
  { 234, 3 },
  { 235, 0 },
  { 235, 2 },
  { 236, 3 },
  { 236, 2 },
  { 237, 1 },
  { 237, 1 },
  { 237, 1 },
  { 237, 1 },
  { 227, 1 },
  { 148, 3 },
  { 148, 5 },
  { 148, 3 },
  { 148, 6 },
  { 239, 0 },
  { 239, 2 },
  { 238, 1 },
  { 238, 0 },
  { 148, 3 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite2_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy203); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy203);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy203 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy203 = yymsp[-1].minor.yy203;
                                                yygotominor.yy203->explain = yymsp[-2].minor.yy91->explain;
                                                yygotominor.yy203->queryPlan = yymsp[-2].minor.yy91->queryPlan;
                                                delete yymsp[-2].minor.yy91;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy91 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy91 = new ParserStubExplain(true, false);}
        break;
      case 7: /* cmdx ::= cmd */
      case 329: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==329);
      case 330: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==330);
      case 331: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==331);
      case 332: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==332);
{yygotominor.yy203 = yymsp[0].minor.yy203;}
        break;
      case 8: /* cmd ::= BEGIN trans_opt onconf */
{
                                                yygotominor.yy203 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy404->transactionKw,
                                                        yymsp[-1].minor.yy404->name,
                                                        *(yymsp[0].minor.yy418)
                                                    );
                                                delete yymsp[-1].minor.yy404;
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 9: /* trans_opt ::= */
{yygotominor.yy404 = new ParserStubTransDetails();}
        break;
      case 10: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy404 = new ParserStubTransDetails();
                                                yygotominor.yy404->transactionKw = true;
                                            }
        break;
      case 11: /* trans_opt ::= TRANSACTION nm */
      case 12: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==12);
{
                                                yygotominor.yy404 = new ParserStubTransDetails();
                                                yygotominor.yy404->transactionKw = true;
                                                yygotominor.yy404->name = *(yymsp[0].minor.yy319);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 13: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy203 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy404->transactionKw,
                                                        yymsp[0].minor.yy404->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy404;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 14: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy203 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy404->transactionKw,
                                                        yymsp[0].minor.yy404->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy404;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 15: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy203 = new SqliteRollback(
                                                        yymsp[0].minor.yy404->transactionKw,
                                                        yymsp[0].minor.yy404->name
                                                    );
                                                delete yymsp[0].minor.yy404;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 16: /* cmd ::= CREATE temp TABLE fullname LP columnlist conslist_opt RP */
{
                                                yygotominor.yy203 = new SqliteCreateTable(
                                                        *(yymsp[-6].minor.yy226),
                                                        false,
                                                        yymsp[-4].minor.yy120->name1,
                                                        yymsp[-4].minor.yy120->name2,
                                                        *(yymsp[-2].minor.yy42),
                                                        *(yymsp[-1].minor.yy13)
                                                    );
                                                delete yymsp[-6].minor.yy226;
                                                delete yymsp[-2].minor.yy42;
                                                delete yymsp[-1].minor.yy13;
                                                delete yymsp[-4].minor.yy120;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 17: /* cmd ::= CREATE temp TABLE fullname AS select */
{
                                                yygotominor.yy203 = new SqliteCreateTable(
                                                        *(yymsp[-4].minor.yy226),
                                                        false,
                                                        yymsp[-2].minor.yy120->name1,
                                                        yymsp[-2].minor.yy120->name2,
                                                        yymsp[0].minor.yy153
                                                    );
                                                delete yymsp[-4].minor.yy226;
                                                delete yymsp[-2].minor.yy120;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 18: /* cmd ::= CREATE temp TABLE nm DOT ID_TAB_NEW */
{  yy_destructor(yypParser,157,&yymsp[-4].minor);
  yy_destructor(yypParser,156,&yymsp[-2].minor);
}
        break;
      case 19: /* cmd ::= CREATE temp TABLE ID_DB|ID_TAB_NEW */
      case 110: /* cmd ::= CREATE temp VIEW ID_VIEW_NEW */ yytestcase(yyruleno==110);
      case 313: /* cmd ::= CREATE temp TRIGGER ID_TRIG_NEW */ yytestcase(yyruleno==313);
{  yy_destructor(yypParser,157,&yymsp[-2].minor);
}
        break;
      case 20: /* temp ::= TEMP */
{yygotominor.yy226 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 21: /* temp ::= */
      case 124: /* distinct ::= */ yytestcase(yyruleno==124);
{yygotominor.yy226 = new int(0);}
        break;
      case 22: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy42->append(yymsp[0].minor.yy147);
                                                yygotominor.yy42 = yymsp[-2].minor.yy42;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 23: /* columnlist ::= column */
{
                                                yygotominor.yy42 = new ParserCreateTableColumnList();
                                                yygotominor.yy42->append(yymsp[0].minor.yy147);
                                            }
        break;
      case 24: /* column ::= columnid type carglist */
{
                                                yygotominor.yy147 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy319), yymsp[-1].minor.yy57, *(yymsp[0].minor.yy371));
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy371;
                                                objectForTokens = yygotominor.yy147;
                                            }
        break;
      case 25: /* columnid ::= nm */
      case 26: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==26);
      case 29: /* nm ::= id */ yytestcase(yyruleno==29);
      case 37: /* typename ::= ids */ yytestcase(yyruleno==37);
      case 154: /* dbnm ::= DOT nm */ yytestcase(yyruleno==154);
      case 167: /* collate ::= COLLATE id */ yytestcase(yyruleno==167);
{yygotominor.yy319 = yymsp[0].minor.yy319;}
        break;
      case 27: /* id ::= ID */
{
                                                yygotominor.yy319 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value,
                                                        parserContext->dialect
                                                    )
                                                );
                                            }
        break;
      case 28: /* ids ::= ID|STRING */
      case 31: /* nm ::= JOIN_KW */ yytestcase(yyruleno==31);
{yygotominor.yy319 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 30: /* nm ::= STRING */
{yygotominor.yy319 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 32: /* type ::= */
{yygotominor.yy57 = nullptr;}
        break;
      case 33: /* type ::= typetoken */
{yygotominor.yy57 = yymsp[0].minor.yy57;}
        break;
      case 34: /* typetoken ::= typename */
{
                                                yygotominor.yy57 = new SqliteColumnType(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy57;
                                            }
        break;
      case 35: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy57 = new SqliteColumnType(*(yymsp[-3].minor.yy319), *(yymsp[-1].minor.yy69));
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-1].minor.yy69;
                                                objectForTokens = yygotominor.yy57;
                                            }
        break;
      case 36: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy57 = new SqliteColumnType(*(yymsp[-5].minor.yy319), *(yymsp[-3].minor.yy69), *(yymsp[-1].minor.yy69));
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-3].minor.yy69;
                                                delete yymsp[-1].minor.yy69;
                                                objectForTokens = yygotominor.yy57;
                                            }
        break;
      case 38: /* typename ::= typename ids */
      case 39: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==39);
{
                                                yymsp[-1].minor.yy319->append(" " + *(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                yygotominor.yy319 = yymsp[-1].minor.yy319;
                                            }
        break;
      case 40: /* signed ::= plus_num */
      case 41: /* signed ::= minus_num */ yytestcase(yyruleno==41);
      case 298: /* nmnum ::= plus_num */ yytestcase(yyruleno==298);
      case 303: /* plus_num ::= PLUS number */ yytestcase(yyruleno==303);
      case 304: /* plus_num ::= number */ yytestcase(yyruleno==304);
{yygotominor.yy69 = yymsp[0].minor.yy69;}
        break;
      case 42: /* carglist ::= carglist ccons */
      case 44: /* carglist ::= carglist carg */ yytestcase(yyruleno==44);
{
                                                yymsp[-1].minor.yy371->append(yymsp[0].minor.yy304);
                                                yygotominor.yy371 = yymsp[-1].minor.yy371;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 43: /* carglist ::= carglist ccons_nm ccons */
{
                                                yymsp[-2].minor.yy371->append(yymsp[-1].minor.yy304);
                                                yymsp[-2].minor.yy371->append(yymsp[0].minor.yy304);
                                                yygotominor.yy371 = yymsp[-2].minor.yy371;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 45: /* carglist ::= */
{yygotominor.yy371 = new ParserCreateTableColumnConstraintList();}
        break;
      case 46: /* carg ::= DEFAULT STRING */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initDefId(stripObjName(
                                                    yymsp[0].minor.yy0->value,
                                                    parserContext->dialect
                                                ));
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 47: /* carg ::= DEFAULT ID */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initDefId(stripObjName(
                                                    yymsp[0].minor.yy0->value,
                                                    parserContext->dialect
                                                ));
                                                objectForTokens = yygotominor.yy304;

                                            }
        break;
      case 48: /* carg ::= DEFAULT INTEGER */
      case 49: /* carg ::= DEFAULT PLUS INTEGER */ yytestcase(yyruleno==49);
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                QVariant val = QVariant(yymsp[0].minor.yy0->value).toLongLong();
                                                yygotominor.yy304->initDefTerm(val, false);
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 50: /* carg ::= DEFAULT MINUS INTEGER */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                QVariant val = QVariant(yymsp[0].minor.yy0->value).toLongLong();
                                                yygotominor.yy304->initDefTerm(val, true);
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 51: /* carg ::= DEFAULT FLOAT */
      case 52: /* carg ::= DEFAULT PLUS FLOAT */ yytestcase(yyruleno==52);
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                QVariant val = QVariant(yymsp[0].minor.yy0->value).toDouble();
                                                yygotominor.yy304->initDefTerm(val, false);
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 53: /* carg ::= DEFAULT MINUS FLOAT */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                QVariant val = QVariant(yymsp[0].minor.yy0->value).toDouble();
                                                yygotominor.yy304->initDefTerm(val, true);
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 54: /* carg ::= DEFAULT NULL */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initDefTerm(QVariant(), false);
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 55: /* ccons_nm ::= CONSTRAINT nm */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initDefNameOnly(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 56: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initNull(*(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 57: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initNotNull(*(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 58: /* ccons ::= PRIMARY KEY sortorder onconf */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initPk(*(yymsp[-1].minor.yy389), *(yymsp[0].minor.yy418), false);
                                                delete yymsp[-1].minor.yy389;
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 59: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initUnique(*(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 60: /* ccons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initCheck(yymsp[-2].minor.yy192, *(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 61: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initFk(*(yymsp[-2].minor.yy319), *(yymsp[-1].minor.yy63), *(yymsp[0].minor.yy264));
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy264;
                                                delete yymsp[-1].minor.yy63;
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 62: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initDefer(yymsp[0].minor.yy329->initially, yymsp[0].minor.yy329->deferrable);
                                                delete yymsp[0].minor.yy329;
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 63: /* ccons ::= COLLATE id */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initColl(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy304;
                                            }
        break;
      case 64: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy304 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy304->initCheck();
                                                objectForTokens = yygotominor.yy304;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 65: /* refargs ::= */
{yygotominor.yy264 = new ParserFkConditionList();}
        break;
      case 66: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy264->append(yymsp[0].minor.yy187);
                                                yygotominor.yy264 = yymsp[-1].minor.yy264;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 67: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy187 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 68: /* refarg ::= ON INSERT refact */
{yygotominor.yy187 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy424)); delete yymsp[0].minor.yy424;}
        break;
      case 69: /* refarg ::= ON DELETE refact */
{yygotominor.yy187 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy424)); delete yymsp[0].minor.yy424;}
        break;
      case 70: /* refarg ::= ON UPDATE refact */
      case 71: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==71);
{yygotominor.yy187 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy424)); delete yymsp[0].minor.yy424;}
        break;
      case 72: /* refact ::= SET NULL */
{yygotominor.yy424 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 73: /* refact ::= SET DEFAULT */
{yygotominor.yy424 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 74: /* refact ::= CASCADE */
{yygotominor.yy424 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 75: /* refact ::= RESTRICT */
{yygotominor.yy424 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 76: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy329 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy312));
                                                delete yymsp[0].minor.yy312;
                                            }
        break;
      case 77: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy329 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy312));
                                                delete yymsp[0].minor.yy312;
                                            }
        break;
      case 78: /* init_deferred_pred_opt ::= */
{yygotominor.yy312 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 79: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy312 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 80: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy312 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 81: /* conslist_opt ::= */
{yygotominor.yy13 = new ParserCreateTableConstraintList();}
        break;
      case 82: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy13 = yymsp[0].minor.yy13;}
        break;
      case 83: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy406->afterComma = *(yymsp[-1].minor.yy291);
                                                yymsp[-2].minor.yy13->append(yymsp[0].minor.yy406);
                                                yygotominor.yy13 = yymsp[-2].minor.yy13;
                                                delete yymsp[-1].minor.yy291;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 84: /* conslist ::= tcons */
{
                                                yygotominor.yy13 = new ParserCreateTableConstraintList();
                                                yygotominor.yy13->append(yymsp[0].minor.yy406);
                                            }
        break;
      case 85: /* tconscomma ::= COMMA */
      case 260: /* not_opt ::= NOT */ yytestcase(yyruleno==260);
      case 276: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==276);
      case 340: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==340);
{yygotominor.yy291 = new bool(true);}
        break;
      case 86: /* tconscomma ::= */
      case 259: /* not_opt ::= */ yytestcase(yyruleno==259);
      case 277: /* uniqueflag ::= */ yytestcase(yyruleno==277);
      case 341: /* database_kw_opt ::= */ yytestcase(yyruleno==341);
{yygotominor.yy291 = new bool(false);}
        break;
      case 87: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy406 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy406->initNameOnly(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy406;
                                            }
        break;
      case 88: /* tcons ::= PRIMARY KEY LP idxlist RP onconf */
{
                                                yygotominor.yy406 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy406->initPk(*(yymsp[-2].minor.yy63), false, *(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                delete yymsp[-2].minor.yy63;
                                                objectForTokens = yygotominor.yy406;
                                            }
        break;
      case 89: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy406 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy406->initUnique(*(yymsp[-2].minor.yy63), *(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                delete yymsp[-2].minor.yy63;
                                                objectForTokens = yygotominor.yy406;
                                            }
        break;
      case 90: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy406 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy406->initCheck(yymsp[-2].minor.yy192, *(yymsp[0].minor.yy418));
                                                objectForTokens = yygotominor.yy406;
                                            }
        break;
      case 91: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 92: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==92);
      case 93: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==93);
{
                                                yygotominor.yy406 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy406->initFk(
                                                    *(yymsp[-6].minor.yy63),
                                                    *(yymsp[-3].minor.yy319),
                                                    *(yymsp[-2].minor.yy63),
                                                    *(yymsp[-1].minor.yy264),
                                                    yymsp[0].minor.yy329->initially,
                                                    yymsp[0].minor.yy329->deferrable
                                                );
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-1].minor.yy264;
                                                delete yymsp[0].minor.yy329;
                                                delete yymsp[-2].minor.yy63;
                                                delete yymsp[-6].minor.yy63;
                                                objectForTokens = yygotominor.yy406;
                                            }
        break;
      case 94: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy406 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy406->initCheck();
                                                objectForTokens = yygotominor.yy406;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,155,&yymsp[0].minor);
}
        break;
      case 95: /* defer_subclause_opt ::= */
{yygotominor.yy329 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 96: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy329 = yymsp[0].minor.yy329;}
        break;
      case 97: /* onconf ::= */
      case 99: /* orconf ::= */ yytestcase(yyruleno==99);
{yygotominor.yy418 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 98: /* onconf ::= ON CONFLICT resolvetype */
      case 100: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==100);
{yygotominor.yy418 = yymsp[0].minor.yy418;}
        break;
      case 101: /* resolvetype ::= ROLLBACK */
      case 102: /* resolvetype ::= ABORT */ yytestcase(yyruleno==102);
      case 103: /* resolvetype ::= FAIL */ yytestcase(yyruleno==103);
      case 104: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==104);
      case 105: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==105);
{yygotominor.yy418 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 106: /* cmd ::= DROP TABLE fullname */
{
                                                yygotominor.yy203 = new SqliteDropTable(false, yymsp[0].minor.yy120->name1, yymsp[0].minor.yy120->name2);
                                                delete yymsp[0].minor.yy120;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 107: /* cmd ::= DROP TABLE nm DOT ID_TAB */
      case 108: /* cmd ::= DROP TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==108);
      case 148: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==148);
      case 149: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==149);
      case 181: /* delete_stmt ::= DELETE FROM nm DOT ID_TAB */ yytestcase(yyruleno==181);
      case 182: /* delete_stmt ::= DELETE FROM ID_DB|ID_TAB */ yytestcase(yyruleno==182);
      case 188: /* update_stmt ::= UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==188);
      case 189: /* update_stmt ::= UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==189);
      case 254: /* exprx ::= nm DOT ID_TAB|ID_COL */ yytestcase(yyruleno==254);
      case 274: /* cmd ::= CREATE uniqueflag INDEX nm DOT ID_IDX_NEW */ yytestcase(yyruleno==274);
      case 275: /* cmd ::= CREATE uniqueflag INDEX ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==275);
      case 285: /* cmd ::= DROP INDEX nm DOT ID_IDX */ yytestcase(yyruleno==285);
      case 286: /* cmd ::= DROP INDEX ID_DB|ID_IDX */ yytestcase(yyruleno==286);
      case 296: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==296);
      case 297: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==297);
      case 335: /* cmd ::= DROP TRIGGER nm DOT ID_TRIG */ yytestcase(yyruleno==335);
      case 336: /* cmd ::= DROP TRIGGER ID_DB|ID_TRIG */ yytestcase(yyruleno==336);
{  yy_destructor(yypParser,156,&yymsp[-2].minor);
}
        break;
      case 109: /* cmd ::= CREATE temp VIEW nm AS select */
{
                                                yygotominor.yy203 = new SqliteCreateView(*(yymsp[-4].minor.yy226), false, *(yymsp[-2].minor.yy319), QString::null, yymsp[0].minor.yy153);
                                                delete yymsp[-4].minor.yy226;
                                                delete yymsp[-2].minor.yy319;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 111: /* cmd ::= DROP VIEW nm */
      case 112: /* cmd ::= DROP VIEW ID_VIEW */ yytestcase(yyruleno==112);
{
                                                yygotominor.yy203 = new SqliteDropView(false, *(yymsp[0].minor.yy319), QString::null);
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 113: /* cmd ::= select_stmt */
      case 179: /* cmd ::= delete_stmt */ yytestcase(yyruleno==179);
      case 186: /* cmd ::= update_stmt */ yytestcase(yyruleno==186);
      case 196: /* cmd ::= insert_stmt */ yytestcase(yyruleno==196);
{
                                                yygotominor.yy203 = yymsp[0].minor.yy203;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 114: /* select_stmt ::= select */
{
                                                yygotominor.yy203 = yymsp[0].minor.yy153;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 115: /* select ::= oneselect */
{
                                                yygotominor.yy153 = SqliteSelect::append(yymsp[0].minor.yy150);
                                                objectForTokens = yygotominor.yy153;
                                            }
        break;
      case 116: /* select ::= select multiselect_op oneselect */
{
                                                yygotominor.yy153 = SqliteSelect::append(yymsp[-2].minor.yy153, *(yymsp[-1].minor.yy382), yymsp[0].minor.yy150);
                                                delete yymsp[-1].minor.yy382;
                                                objectForTokens = yygotominor.yy153;
                                            }
        break;
      case 117: /* multiselect_op ::= UNION */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 118: /* multiselect_op ::= UNION ALL */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 119: /* multiselect_op ::= EXCEPT */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 120: /* multiselect_op ::= INTERSECT */
{yygotominor.yy382 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 121: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy150 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy226),
                                                        *(yymsp[-6].minor.yy213),
                                                        yymsp[-5].minor.yy31,
                                                        yymsp[-4].minor.yy192,
                                                        *(yymsp[-3].minor.yy231),
                                                        yymsp[-2].minor.yy192,
                                                        *(yymsp[-1].minor.yy243),
                                                        yymsp[0].minor.yy324
                                                    );
                                                delete yymsp[-6].minor.yy213;
                                                delete yymsp[-7].minor.yy226;
                                                delete yymsp[-3].minor.yy231;
                                                objectForTokens = yygotominor.yy150;
                                            }
        break;
      case 122: /* distinct ::= DISTINCT */
{yygotominor.yy226 = new int(1);}
        break;
      case 123: /* distinct ::= ALL */
{yygotominor.yy226 = new int(2);}
        break;
      case 125: /* sclp ::= selcollist COMMA */
{yygotominor.yy213 = yymsp[-1].minor.yy213;}
        break;
      case 126: /* sclp ::= */
{yygotominor.yy213 = new ParserResultColumnList();}
        break;
      case 127: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy192,
                                                        yymsp[0].minor.yy40 ? yymsp[0].minor.yy40->asKw : false,
                                                        yymsp[0].minor.yy40 ? yymsp[0].minor.yy40->name : QString::null
                                                    );

                                                yymsp[-2].minor.yy213->append(obj);
                                                yygotominor.yy213 = yymsp[-2].minor.yy213;
                                                delete yymsp[0].minor.yy40;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 128: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy213->append(obj);
                                                yygotominor.yy213 = yymsp[-1].minor.yy213;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 129: /* selcollist ::= sclp nm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        *(yymsp[-2].minor.yy319)
                                                    );
                                                yymsp[-3].minor.yy213->append(obj);
                                                yygotominor.yy213 = yymsp[-3].minor.yy213;
                                                delete yymsp[-2].minor.yy319;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 130: /* selcollist ::= sclp */
      case 131: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==131);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy213 = yymsp[0].minor.yy213;
                                            }
        break;
      case 132: /* as ::= AS nm */
{
                                                yygotominor.yy40 = new ParserStubAlias(*(yymsp[0].minor.yy319), true);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 133: /* as ::= ids */
      case 134: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==134);
      case 135: /* as ::= ID_ALIAS */ yytestcase(yyruleno==135);
{
                                                yygotominor.yy40 = new ParserStubAlias(*(yymsp[0].minor.yy319), false);
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 136: /* as ::= */
{yygotominor.yy40 = nullptr;}
        break;
      case 137: /* from ::= */
{yygotominor.yy31 = nullptr;}
        break;
      case 138: /* from ::= FROM joinsrc */
{yygotominor.yy31 = yymsp[0].minor.yy31;}
        break;
      case 139: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy31 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy121,
                                                        *(yymsp[0].minor.yy131)
                                                    );
                                                delete yymsp[0].minor.yy131;
                                                objectForTokens = yygotominor.yy31;
                                            }
        break;
      case 140: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy31 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy31;
                                            }
        break;
      case 141: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy221, yymsp[-1].minor.yy121, yymsp[0].minor.yy455);

                                                yymsp[-3].minor.yy131->append(src);
                                                yygotominor.yy131 = yymsp[-3].minor.yy131;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 142: /* seltablist ::= */
{
                                                yygotominor.yy131 = new ParserOtherSourceList();
                                            }
        break;
      case 143: /* singlesrc ::= nm dbnm as */
{
                                                yygotominor.yy121 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-2].minor.yy319),
                                                        *(yymsp[-1].minor.yy319),
                                                        yymsp[0].minor.yy40 ? yymsp[0].minor.yy40->asKw : false,
                                                        yymsp[0].minor.yy40 ? yymsp[0].minor.yy40->name : QString::null,
                                                        false,
                                                        QString::null
                                                    );
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[-1].minor.yy319;
                                                delete yymsp[0].minor.yy40;
                                                objectForTokens = yygotominor.yy121;
                                            }
        break;
      case 144: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy121 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy153,
                                                        yymsp[0].minor.yy40 ? yymsp[0].minor.yy40->asKw : false,
                                                        yymsp[0].minor.yy40 ? yymsp[0].minor.yy40->name : QString::null
                                                    );
                                                delete yymsp[0].minor.yy40;
                                                objectForTokens = yygotominor.yy121;
                                            }
        break;
      case 145: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy121 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy31,
                                                        yymsp[0].minor.yy40 ? yymsp[0].minor.yy40->asKw : false,
                                                        yymsp[0].minor.yy40 ? yymsp[0].minor.yy40->name : QString::null
                                                    );
                                                delete yymsp[0].minor.yy40;
                                                objectForTokens = yygotominor.yy121;
                                            }
        break;
      case 146: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy121 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy121;
                                            }
        break;
      case 147: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy121 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy121->database = *(yymsp[-1].minor.yy319);
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy121;
                                            }
        break;
      case 150: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy455 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy192);
                                                objectForTokens = yygotominor.yy455;
                                            }
        break;
      case 151: /* joinconstr_opt ::= USING LP inscollist RP */
{
                                                yygotominor.yy455 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy207));
                                                delete yymsp[-1].minor.yy207;
                                                objectForTokens = yygotominor.yy455;
                                            }
        break;
      case 152: /* joinconstr_opt ::= */
{yygotominor.yy455 = nullptr;}
        break;
      case 153: /* dbnm ::= */
{yygotominor.yy319 = new QString();}
        break;
      case 155: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy120 = new ParserFullName();
                                                yygotominor.yy120->name1 = *(yymsp[-1].minor.yy319);
                                                yygotominor.yy120->name2 = *(yymsp[0].minor.yy319);
                                                delete yymsp[-1].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 156: /* joinop ::= COMMA */
{
                                                yygotominor.yy221 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy221;
                                            }
        break;
      case 157: /* joinop ::= JOIN */
{
                                                yygotominor.yy221 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy221;
                                            }
        break;
      case 158: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy221 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy221;
                                            }
        break;
      case 159: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy221 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy319));
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy221;
                                            }
        break;
      case 160: /* joinop ::= JOIN_KW nm nm JOIN */
      case 161: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==161);
{
                                                yygotominor.yy221 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy319), *(yymsp[-1].minor.yy319));
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[-2].minor.yy319;
                                                objectForTokens = yygotominor.yy221;
                                            }
        break;
      case 162: /* orderby_opt ::= */
{yygotominor.yy243 = new ParserOrderByList();}
        break;
      case 163: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy243 = yymsp[0].minor.yy243;}
        break;
      case 164: /* sortlist ::= sortlist COMMA collate expr sortorder */
{
                                                SqliteOrderBy* obj;
                                                if (yymsp[-2].minor.yy319)
                                                {
                                                    SqliteExpr* coll = new SqliteExpr();
                                                    coll->initCollate(yymsp[-1].minor.yy192, *(yymsp[-2].minor.yy319));
                                                    delete yymsp[-2].minor.yy319;
                                                    obj = new SqliteOrderBy(coll, *(yymsp[0].minor.yy389));
                                                }
                                                else
                                                {
                                                    obj = new SqliteOrderBy(yymsp[-1].minor.yy192, *(yymsp[0].minor.yy389));
                                                }
                                                yymsp[-4].minor.yy243->append(obj);
                                                yygotominor.yy243 = yymsp[-4].minor.yy243;
                                                delete yymsp[0].minor.yy389;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 165: /* sortlist ::= expr collate sortorder */
{
                                                SqliteOrderBy* obj;
                                                if (yymsp[-1].minor.yy319)
                                                {
                                                    SqliteExpr* coll = new SqliteExpr();
                                                    coll->initCollate(yymsp[-2].minor.yy192, *(yymsp[-1].minor.yy319));
                                                    delete yymsp[-1].minor.yy319;
                                                    obj = new SqliteOrderBy(coll, *(yymsp[0].minor.yy389));
                                                }
                                                else
                                                {
                                                    obj = new SqliteOrderBy(yymsp[-2].minor.yy192, *(yymsp[0].minor.yy389));
                                                }
                                                yygotominor.yy243 = new ParserOrderByList();
                                                yygotominor.yy243->append(obj);
                                                delete yymsp[0].minor.yy389;
                                                objectForTokens = obj;
                                            }
        break;
      case 166: /* collate ::= */
{yygotominor.yy319 = nullptr;}
        break;
      case 168: /* sortorder ::= ASC */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 169: /* sortorder ::= DESC */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 170: /* sortorder ::= */
{yygotominor.yy389 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 171: /* groupby_opt ::= */
      case 269: /* exprlist ::= */ yytestcase(yyruleno==269);
{yygotominor.yy231 = new ParserExprList();}
        break;
      case 172: /* groupby_opt ::= GROUP BY nexprlist */
      case 268: /* exprlist ::= nexprlist */ yytestcase(yyruleno==268);
{yygotominor.yy231 = yymsp[0].minor.yy231;}
        break;
      case 173: /* having_opt ::= */
      case 183: /* where_opt ::= */ yytestcase(yyruleno==183);
      case 265: /* case_else ::= */ yytestcase(yyruleno==265);
      case 267: /* case_operand ::= */ yytestcase(yyruleno==267);
      case 325: /* when_clause ::= */ yytestcase(yyruleno==325);
      case 338: /* key_opt ::= */ yytestcase(yyruleno==338);
{yygotominor.yy192 = nullptr;}
        break;
      case 174: /* having_opt ::= HAVING expr */
      case 184: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==184);
      case 257: /* expr ::= exprx */ yytestcase(yyruleno==257);
      case 264: /* case_else ::= ELSE expr */ yytestcase(yyruleno==264);
      case 266: /* case_operand ::= exprx */ yytestcase(yyruleno==266);
      case 326: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==326);
{yygotominor.yy192 = yymsp[0].minor.yy192;}
        break;
      case 175: /* limit_opt ::= */
{yygotominor.yy324 = nullptr;}
        break;
      case 176: /* limit_opt ::= LIMIT signed */
{
                                                yygotominor.yy324 = new SqliteLimit(*(yymsp[0].minor.yy69));
                                                delete yymsp[0].minor.yy69;
                                                objectForTokens = yygotominor.yy324;
                                            }
        break;
      case 177: /* limit_opt ::= LIMIT signed OFFSET signed */
{
                                                SqliteExpr* expr1 = new SqliteExpr();
                                                expr1->initLiteral(*(yymsp[-2].minor.yy69));
                                                expr1->setParent(yygotominor.yy324);

                                                SqliteExpr* expr2 = new SqliteExpr();
                                                expr1->initLiteral(*(yymsp[0].minor.yy69));
                                                expr1->setParent(yygotominor.yy324);

                                                yygotominor.yy324 = new SqliteLimit(expr1, expr2, true);

                                                TokenPtr limitToken = TokenPtr::create(Token::INTEGER, yymsp[-2].minor.yy69->toString());
                                                parserContext->addManagedToken(limitToken);
                                                expr1->tokens << limitToken;
                                                expr1->tokensMap["term"] << limitToken;

                                                TokenPtr offsetToken = TokenPtr::create(Token::INTEGER, yymsp[0].minor.yy69->toString());
                                                parserContext->addManagedToken(offsetToken);
                                                expr2->tokens << offsetToken;
                                                expr2->tokensMap["term"] << offsetToken;

                                                delete yymsp[-2].minor.yy69;
                                                delete yymsp[0].minor.yy69;
                                                objectForTokens = yygotominor.yy324;
                                            }
        break;
      case 178: /* limit_opt ::= LIMIT signed COMMA signed */
{
                                                SqliteExpr* expr1 = new SqliteExpr();
                                                expr1->initLiteral(*(yymsp[-2].minor.yy69));
                                                expr1->setParent(yygotominor.yy324);

                                                SqliteExpr* expr2 = new SqliteExpr();
                                                expr1->initLiteral(*(yymsp[0].minor.yy69));
                                                expr1->setParent(yygotominor.yy324);

                                                yygotominor.yy324 = new SqliteLimit(expr1, expr2, false);

                                                TokenPtr limitToken = TokenPtr::create(Token::INTEGER, yymsp[-2].minor.yy69->toString());
                                                parserContext->addManagedToken(limitToken);
                                                expr1->tokens << limitToken;
                                                expr1->tokensMap["term"] << limitToken;

                                                TokenPtr offsetToken = TokenPtr::create(Token::INTEGER, yymsp[0].minor.yy69->toString());
                                                parserContext->addManagedToken(offsetToken);
                                                expr2->tokens << offsetToken;
                                                expr2->tokensMap["term"] << offsetToken;

                                                delete yymsp[-2].minor.yy69;
                                                delete yymsp[0].minor.yy69;
                                                objectForTokens = yygotominor.yy324;
                                            }
        break;
      case 180: /* delete_stmt ::= DELETE FROM fullname where_opt */
{
                                                yygotominor.yy203 = new SqliteDelete(
                                                        yymsp[-1].minor.yy120->name1,
                                                        yymsp[-1].minor.yy120->name2,
                                                        false,
                                                        yymsp[0].minor.yy192
                                                    );
                                                delete yymsp[-1].minor.yy120;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 185: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy192 = new SqliteExpr();
                                            }
        break;
      case 187: /* update_stmt ::= UPDATE orconf fullname SET setlist where_opt */
{
                                                yygotominor.yy203 = new SqliteUpdate(
                                                        *(yymsp[-4].minor.yy418),
                                                        yymsp[-3].minor.yy120->name1,
                                                        yymsp[-3].minor.yy120->name2,
                                                        false,
                                                        QString::null,
                                                        *(yymsp[-1].minor.yy201),
                                                        yymsp[0].minor.yy192
                                                    );
                                                delete yymsp[-4].minor.yy418;
                                                delete yymsp[-3].minor.yy120;
                                                delete yymsp[-1].minor.yy201;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 190: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yygotominor.yy201->append(ParserSetValue(*(yymsp[-2].minor.yy319), yymsp[0].minor.yy192));
                                                yygotominor.yy201 = yymsp[-4].minor.yy201;
                                                delete yymsp[-2].minor.yy319;
                                                DONT_INHERIT_TOKENS("setlist");
                                            }
        break;
      case 191: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy201 = new ParserSetValueList();
                                                yygotominor.yy201->append(ParserSetValue(*(yymsp[-2].minor.yy319), yymsp[0].minor.yy192));
                                                delete yymsp[-2].minor.yy319;
                                            }
        break;
      case 192: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy201 = new ParserSetValueList();
                                            }
        break;
      case 193: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy201 = yymsp[-1].minor.yy201;
                                            }
        break;
      case 194: /* setlist ::= setlist COMMA ID_COL */
      case 195: /* setlist ::= ID_COL */ yytestcase(yyruleno==195);
{  yy_destructor(yypParser,216,&yymsp[-2].minor);
}
        break;
      case 197: /* insert_stmt ::= insert_cmd INTO fullname inscollist_opt VALUES LP exprlist RP */
{
                                                yygotominor.yy203 = new SqliteInsert(
                                                        yymsp[-7].minor.yy344->replace,
                                                        yymsp[-7].minor.yy344->orConflict,
                                                        yymsp[-5].minor.yy120->name1,
                                                        yymsp[-5].minor.yy120->name2,
                                                        *(yymsp[-4].minor.yy207),
                                                        *(yymsp[-1].minor.yy231)
                                                    );
                                                delete yymsp[-5].minor.yy120;
                                                delete yymsp[-7].minor.yy344;
                                                delete yymsp[-1].minor.yy231;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 198: /* insert_stmt ::= insert_cmd INTO fullname inscollist_opt select */
{
                                                yygotominor.yy203 = new SqliteInsert(
                                                        yymsp[-4].minor.yy344->replace,
                                                        yymsp[-4].minor.yy344->orConflict,
                                                        yymsp[-2].minor.yy120->name1,
                                                        yymsp[-2].minor.yy120->name2,
                                                        *(yymsp[-1].minor.yy207),
                                                        yymsp[0].minor.yy153
                                                    );
                                                delete yymsp[-2].minor.yy120;
                                                delete yymsp[-4].minor.yy344;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 199: /* insert_stmt ::= insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,218,&yymsp[-2].minor);
}
        break;
      case 200: /* insert_stmt ::= insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,218,&yymsp[-4].minor);
  yy_destructor(yypParser,156,&yymsp[-2].minor);
}
        break;
      case 201: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy344 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                            }
        break;
      case 202: /* insert_cmd ::= REPLACE */
{yygotominor.yy344 = new ParserStubInsertOrReplace(true);}
        break;
      case 203: /* inscollist_opt ::= */
{yygotominor.yy207 = new ParserStringList();}
        break;
      case 204: /* inscollist_opt ::= LP inscollist RP */
{yygotominor.yy207 = yymsp[-1].minor.yy207;}
        break;
      case 205: /* inscollist ::= inscollist COMMA nm */
{
                                                yymsp[-2].minor.yy207->append(*(yymsp[0].minor.yy319));
                                                yygotominor.yy207 = yymsp[-2].minor.yy207;
                                                delete yymsp[0].minor.yy319;
                                                DONT_INHERIT_TOKENS("inscollist");
                                            }
        break;
      case 206: /* inscollist ::= nm */
{
                                                yygotominor.yy207 = new ParserStringList();
                                                yygotominor.yy207->append(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 207: /* inscollist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy207 = new ParserStringList();
                                            }
        break;
      case 208: /* inscollist ::= inscollist COMMA ID_COL */
      case 209: /* inscollist ::= ID_COL */ yytestcase(yyruleno==209);
{  yy_destructor(yypParser,210,&yymsp[-2].minor);
}
        break;
      case 210: /* exprx ::= NULL */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initNull();
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 211: /* exprx ::= INTEGER */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                QVariant val = QVariant(yymsp[0].minor.yy0->value).toLongLong();
                                                yygotominor.yy192->initLiteral(val);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 212: /* exprx ::= FLOAT */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                QVariant val = QVariant(yymsp[0].minor.yy0->value).toDouble();
                                                yygotominor.yy192->initLiteral(val);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 213: /* exprx ::= STRING */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initLiteral(QVariant(yymsp[0].minor.yy0->value));
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 214: /* exprx ::= LP expr RP */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initSubExpr(yymsp[-1].minor.yy192);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 215: /* exprx ::= id */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initId(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 216: /* exprx ::= JOIN_KW */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initId(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 217: /* exprx ::= nm DOT nm */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initId(*(yymsp[-2].minor.yy319), *(yymsp[0].minor.yy319));
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 218: /* exprx ::= nm DOT nm DOT nm */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initId(*(yymsp[-4].minor.yy319), *(yymsp[-2].minor.yy319), *(yymsp[0].minor.yy319));
                                                delete yymsp[-4].minor.yy319;
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 219: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 220: /* exprx ::= ID LP exprlist RP */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initFunction(yymsp[-3].minor.yy0->value, false, *(yymsp[-1].minor.yy231));
                                                delete yymsp[-1].minor.yy231;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 221: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 222: /* exprx ::= expr AND expr */
      case 223: /* exprx ::= expr OR expr */ yytestcase(yyruleno==223);
      case 224: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==224);
      case 225: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==225);
      case 226: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==226);
      case 227: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==227);
      case 228: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==228);
      case 229: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==229);
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initBinOp(yymsp[-2].minor.yy192, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy192);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 230: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initLike(yymsp[-3].minor.yy192, *(yymsp[-2].minor.yy291), *(yymsp[-1].minor.yy41), yymsp[0].minor.yy192);
                                                delete yymsp[-2].minor.yy291;
                                                delete yymsp[-1].minor.yy41;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 231: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initNull(yymsp[-1].minor.yy192, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 232: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initNull(yymsp[-2].minor.yy192, "NOT NULL");
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 233: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initIs(yymsp[-3].minor.yy192, *(yymsp[-1].minor.yy291), yymsp[0].minor.yy192);
                                                delete yymsp[-1].minor.yy291;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 234: /* exprx ::= NOT expr */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initUnaryOp(yymsp[0].minor.yy192, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 235: /* exprx ::= BITNOT expr */
      case 236: /* exprx ::= MINUS expr */ yytestcase(yyruleno==236);
      case 237: /* exprx ::= PLUS expr */ yytestcase(yyruleno==237);
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initUnaryOp(yymsp[0].minor.yy192, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 238: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initBetween(yymsp[-5].minor.yy192, *(yymsp[-4].minor.yy291), yymsp[-2].minor.yy192, yymsp[0].minor.yy192);
                                                delete yymsp[-4].minor.yy291;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 239: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initIn(yymsp[-5].minor.yy192, *(yymsp[-4].minor.yy291), *(yymsp[-1].minor.yy231));
                                                delete yymsp[-4].minor.yy291;
                                                delete yymsp[-1].minor.yy231;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 240: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initIn(yymsp[-5].minor.yy192, *(yymsp[-4].minor.yy291), yymsp[-1].minor.yy153);
                                                delete yymsp[-4].minor.yy291;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 241: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initIn(yymsp[-4].minor.yy192, yymsp[-3].minor.yy291, *(yymsp[-1].minor.yy319), *(yymsp[0].minor.yy319));
                                                delete yymsp[-3].minor.yy291;
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 242: /* exprx ::= LP select RP */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initSubSelect(yymsp[-1].minor.yy153);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 243: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initCase(yymsp[-3].minor.yy192, *(yymsp[-2].minor.yy231), yymsp[-1].minor.yy192);
                                                delete yymsp[-2].minor.yy231;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 244: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy319));
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 245: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy192;
                                            }
        break;
      case 246: /* exprx ::= nm DOT */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initId(*(yymsp[-1].minor.yy319), QString::null, QString::null);
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy192;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 247: /* exprx ::= nm DOT nm DOT */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                yygotominor.yy192->initId(*(yymsp[-3].minor.yy319), *(yymsp[-1].minor.yy319), QString::null);
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy192;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 248: /* exprx ::= expr not_opt BETWEEN expr */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                delete yymsp[-2].minor.yy291;
                                                delete yymsp[-3].minor.yy192;
                                                delete yymsp[0].minor.yy192;
                                                objectForTokens = yygotominor.yy192;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 249: /* exprx ::= CASE case_operand case_exprlist case_else */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                delete yymsp[-1].minor.yy231;
                                                delete yymsp[-2].minor.yy192;
                                                delete yymsp[0].minor.yy192;
                                                objectForTokens = yygotominor.yy192;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 250: /* exprx ::= expr not_opt IN LP exprlist */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                delete yymsp[-3].minor.yy291;
                                                delete yymsp[0].minor.yy231;
                                                delete yymsp[-4].minor.yy192;
                                                objectForTokens = yygotominor.yy192;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 251: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,177,&yymsp[-3].minor);
}
        break;
      case 252: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 253: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==253);
{  yy_destructor(yypParser,177,&yymsp[-5].minor);
  yy_destructor(yypParser,156,&yymsp[-2].minor);
}
        break;
      case 255: /* exprx ::= nm DOT nm DOT ID_COL */
      case 256: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==256);
{  yy_destructor(yypParser,156,&yymsp[-4].minor);
  yy_destructor(yypParser,156,&yymsp[-2].minor);
}
        break;
      case 258: /* expr ::= */
{
                                                yygotominor.yy192 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy192;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 261: /* likeop ::= LIKE|GLOB */
{yygotominor.yy41 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 262: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy231->append(yymsp[-2].minor.yy192);
                                                yymsp[-4].minor.yy231->append(yymsp[0].minor.yy192);
                                                yygotominor.yy231 = yymsp[-4].minor.yy231;
                                            }
        break;
      case 263: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy231 = new ParserExprList();
                                                yygotominor.yy231->append(yymsp[-2].minor.yy192);
                                                yygotominor.yy231->append(yymsp[0].minor.yy192);
                                            }
        break;
      case 270: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy231->append(yymsp[0].minor.yy192);
                                                yygotominor.yy231 = yymsp[-2].minor.yy231;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 271: /* nexprlist ::= exprx */
{
                                                yygotominor.yy231 = new ParserExprList();
                                                yygotominor.yy231->append(yymsp[0].minor.yy192);
                                            }
        break;
      case 272: /* cmd ::= CREATE uniqueflag INDEX nm ON nm dbnm LP idxlist RP onconf */
{
                                                yygotominor.yy203 = new SqliteCreateIndex(
                                                        *(yymsp[-9].minor.yy291),
                                                        false,
                                                        *(yymsp[-7].minor.yy319),
                                                        *(yymsp[-5].minor.yy319),
                                                        *(yymsp[-4].minor.yy319),
                                                        *(yymsp[-2].minor.yy63),
                                                        *(yymsp[0].minor.yy418)
                                                    );
                                                delete yymsp[-9].minor.yy291;
                                                delete yymsp[-7].minor.yy319;
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-4].minor.yy319;
                                                delete yymsp[-2].minor.yy63;
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 273: /* cmd ::= CREATE uniqueflag INDEX nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,156,&yymsp[-3].minor);
}
        break;
      case 278: /* idxlist_opt ::= */
{yygotominor.yy63 = new ParserIndexedColumnList();}
        break;
      case 279: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy63 = yymsp[-1].minor.yy63;}
        break;
      case 280: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy63->append(yymsp[0].minor.yy428);
                                                yygotominor.yy63 = yymsp[-2].minor.yy63;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 281: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy63 = new ParserIndexedColumnList();
                                                yygotominor.yy63->append(yymsp[0].minor.yy428);
                                            }
        break;
      case 282: /* idxlist_single ::= nm sortorder */
      case 283: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==283);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-1].minor.yy319),
                                                        QString::null,
                                                        *(yymsp[0].minor.yy389)
                                                    );
                                                yygotominor.yy428 = obj;
                                                delete yymsp[0].minor.yy389;
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy428;
                                            }
        break;
      case 284: /* cmd ::= DROP INDEX fullname */
{
                                                yygotominor.yy203 = new SqliteDropIndex(false, yymsp[0].minor.yy120->name1, yymsp[0].minor.yy120->name2);
                                                delete yymsp[0].minor.yy120;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 287: /* cmd ::= COPY orconf nm dbnm FROM nm USING DELIMITERS STRING */
{
                                                yygotominor.yy203 = new SqliteCopy(
                                                    *(yymsp[-7].minor.yy418),
                                                    *(yymsp[-6].minor.yy319),
                                                    *(yymsp[-5].minor.yy319),
                                                    *(yymsp[-3].minor.yy319),
                                                    yymsp[0].minor.yy0->value
                                                );
                                                delete yymsp[-7].minor.yy418;
                                                delete yymsp[-6].minor.yy319;
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-3].minor.yy319;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 288: /* cmd ::= COPY orconf nm dbnm FROM nm */
{
                                                yygotominor.yy203 = new SqliteCopy(
                                                    *(yymsp[-4].minor.yy418),
                                                    *(yymsp[-3].minor.yy319),
                                                    *(yymsp[-2].minor.yy319),
                                                    *(yymsp[0].minor.yy319)
                                                );
                                                delete yymsp[-4].minor.yy418;
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 289: /* cmd ::= VACUUM */
{
                                                yygotominor.yy203 = new SqliteVacuum();
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 290: /* cmd ::= VACUUM nm */
{
                                                yygotominor.yy203 = new SqliteVacuum(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 291: /* cmd ::= PRAGMA ids */
{
                                                yygotominor.yy203 = new SqlitePragma(*(yymsp[0].minor.yy319), QString::null);
                                                delete yymsp[0].minor.yy319;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 292: /* cmd ::= PRAGMA nm EQ nmnum */
      case 294: /* cmd ::= PRAGMA nm EQ minus_num */ yytestcase(yyruleno==294);
{
                                                yygotominor.yy203 = new SqlitePragma(*(yymsp[-2].minor.yy319), QString::null, *(yymsp[0].minor.yy69), true);
                                                delete yymsp[-2].minor.yy319;
                                                delete yymsp[0].minor.yy69;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 293: /* cmd ::= PRAGMA nm LP nmnum RP */
      case 295: /* cmd ::= PRAGMA nm LP minus_num RP */ yytestcase(yyruleno==295);
{
                                                yygotominor.yy203 = new SqlitePragma(*(yymsp[-3].minor.yy319), QString::null, *(yymsp[-1].minor.yy69), false);
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-1].minor.yy69;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 299: /* nmnum ::= nm */
{
                                                yygotominor.yy69 = new QVariant(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                            }
        break;
      case 300: /* nmnum ::= ON */
      case 301: /* nmnum ::= DELETE */ yytestcase(yyruleno==301);
      case 302: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==302);
{yygotominor.yy69 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 305: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy69->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy69) = -(yymsp[0].minor.yy69->toDouble());
                                                else if (yymsp[0].minor.yy69->type() == QVariant::LongLong)
                                                    *(yymsp[0].minor.yy69) = -(yymsp[0].minor.yy69->toLongLong());
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy69 = yymsp[0].minor.yy69;
                                            }
        break;
      case 306: /* number ::= INTEGER */
{yygotominor.yy69 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toLongLong());}
        break;
      case 307: /* number ::= FLOAT */
{yygotominor.yy69 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 308: /* cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON nm dbnm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy203 = new SqliteCreateTrigger(
                                                        *(yymsp[-12].minor.yy226),
                                                        false,
                                                        *(yymsp[-10].minor.yy319),
                                                        *(yymsp[-6].minor.yy319),
                                                        *(yymsp[-5].minor.yy319),
                                                        *(yymsp[-9].minor.yy372),
                                                        yymsp[-8].minor.yy151,
                                                        *(yymsp[-4].minor.yy83),
                                                        yymsp[-3].minor.yy192,
                                                        *(yymsp[-1].minor.yy270),
                                                        2
                                                    );
                                                delete yymsp[-12].minor.yy226;
                                                delete yymsp[-9].minor.yy372;
                                                delete yymsp[-4].minor.yy83;
                                                delete yymsp[-6].minor.yy319;
                                                delete yymsp[-10].minor.yy319;
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-1].minor.yy270;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 309: /* cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON nm dbnm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy203 = new SqliteCreateTrigger(
                                                        *(yymsp[-9].minor.yy226),
                                                        false,
                                                        *(yymsp[-7].minor.yy319),
                                                        *(yymsp[-3].minor.yy319),
                                                        *(yymsp[-2].minor.yy319),
                                                        *(yymsp[-6].minor.yy372),
                                                        yymsp[-5].minor.yy151,
                                                        *(yymsp[-1].minor.yy83),
                                                        yymsp[0].minor.yy192,
                                                        CL,
                                                        2
                                                    );
                                                delete yymsp[-9].minor.yy226;
                                                delete yymsp[-6].minor.yy372;
                                                delete yymsp[-1].minor.yy83;
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-7].minor.yy319;
                                                delete yymsp[-2].minor.yy319;
                                                objectForTokens = yygotominor.yy203;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 310: /* cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON nm dbnm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy203 = new SqliteCreateTrigger(
                                                        *(yymsp[-11].minor.yy226),
                                                        false,
                                                        *(yymsp[-9].minor.yy319),
                                                        *(yymsp[-5].minor.yy319),
                                                        *(yymsp[-4].minor.yy319),
                                                        *(yymsp[-8].minor.yy372),
                                                        yymsp[-7].minor.yy151,
                                                        *(yymsp[-3].minor.yy83),
                                                        yymsp[-2].minor.yy192,
                                                        *(yymsp[0].minor.yy270),
                                                        2
                                                    );
                                                delete yymsp[-11].minor.yy226;
                                                delete yymsp[-8].minor.yy372;
                                                delete yymsp[-3].minor.yy83;
                                                delete yymsp[-5].minor.yy319;
                                                delete yymsp[-9].minor.yy319;
                                                delete yymsp[-4].minor.yy319;
                                                delete yymsp[0].minor.yy270;
                                                objectForTokens = yygotominor.yy203;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 311: /* cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON ID_TAB|ID_DB */
{  yy_destructor(yypParser,157,&yymsp[-6].minor);
  yy_destructor(yypParser,156,&yymsp[-4].minor);
  yy_destructor(yypParser,232,&yymsp[-3].minor);
  yy_destructor(yypParser,233,&yymsp[-2].minor);
}
        break;
      case 312: /* cmd ::= CREATE temp TRIGGER nm trigger_time trigger_event ON nm DOT ID_TAB */
{  yy_destructor(yypParser,157,&yymsp[-8].minor);
  yy_destructor(yypParser,156,&yymsp[-6].minor);
  yy_destructor(yypParser,232,&yymsp[-5].minor);
  yy_destructor(yypParser,233,&yymsp[-4].minor);
  yy_destructor(yypParser,156,&yymsp[-2].minor);
}
        break;
      case 314: /* trigger_time ::= BEFORE */
{yygotominor.yy372 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 315: /* trigger_time ::= AFTER */
{yygotominor.yy372 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 316: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy372 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 317: /* trigger_time ::= */
{yygotominor.yy372 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 318: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy151 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy151;
                                            }
        break;
      case 319: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy151 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy151;
                                            }
        break;
      case 320: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy151 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy151;
                                            }
        break;
      case 321: /* trigger_event ::= UPDATE OF inscollist */
{
                                                yygotominor.yy151 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy207));
                                                delete yymsp[0].minor.yy207;
                                                objectForTokens = yygotominor.yy151;
                                            }
        break;
      case 322: /* foreach_clause ::= */
{yygotominor.yy83 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 323: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy83 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 324: /* foreach_clause ::= FOR EACH STATEMENT */
{yygotominor.yy83 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_STATEMENT);}
        break;
      case 327: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy270->append(yymsp[-1].minor.yy203);
                                                yygotominor.yy270 = yymsp[-2].minor.yy270;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 328: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy270 = new ParserQueryList();
                                                yygotominor.yy270->append(yymsp[-1].minor.yy203);
                                            }
        break;
      case 333: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 334: /* cmd ::= DROP TRIGGER fullname */
{
                                                yygotominor.yy203 = new SqliteDropTrigger(false, yymsp[0].minor.yy120->name1, yymsp[0].minor.yy120->name2);
                                                delete yymsp[0].minor.yy120;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 337: /* cmd ::= ATTACH database_kw_opt ids AS ids key_opt */
{
                                                SqliteExpr* e1 = new SqliteExpr();
                                                SqliteExpr* e2 = new SqliteExpr();
                                                e1->initLiteral(*(yymsp[-3].minor.yy319));
                                                e2->initLiteral(*(yymsp[-1].minor.yy319));
                                                yygotominor.yy203 = new SqliteAttach(*(yymsp[-4].minor.yy291), e1, e2, yymsp[0].minor.yy192);
                                                delete yymsp[-4].minor.yy291;
                                                delete yymsp[-3].minor.yy319;
                                                delete yymsp[-1].minor.yy319;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      case 339: /* key_opt ::= USING ids */
{
                                                SqliteExpr* e = new SqliteExpr();
                                                e->initLiteral(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                yygotominor.yy192 = e;
                                            }
        break;
      case 342: /* cmd ::= DETACH database_kw_opt nm */
{
                                                SqliteExpr* e = new SqliteExpr();
                                                e->initLiteral(*(yymsp[0].minor.yy319));
                                                delete yymsp[0].minor.yy319;
                                                yygotominor.yy203 = new SqliteDetach(*(yymsp[-1].minor.yy291), e);
                                                delete yymsp[-1].minor.yy291;
                                                objectForTokens = yygotominor.yy203;
                                            }
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
          //objectForTokens->inheritedTokens += allTokensWithAllInherited;
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite2_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite2_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite2_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
  sqlite2_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite2_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite2_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite2_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite2_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite2_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite2_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite2_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
