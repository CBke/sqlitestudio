/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
**
** This version of "lempar.c" is modified, slightly, for use by SQLite.
** The only modifications are the addition of a couple of NEVER()
** macros to disable tests that are needed in the case of a general
** LALR(1) grammar but which are always false in the
** specific grammar used by SQLite.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>

#include "token.h"
#include "parsercontext.h"
#include "parser/ast/sqlitealtertable.h"
#include "parser/ast/sqliteanalyze.h"
#include "parser/ast/sqliteattach.h"
#include "parser/ast/sqlitebegintrans.h"
#include "parser/ast/sqlitecommittrans.h"
#include "parser/ast/sqlitecopy.h"
#include "parser/ast/sqlitecreateindex.h"
#include "parser/ast/sqlitecreatetable.h"
#include "parser/ast/sqlitecreatetrigger.h"
#include "parser/ast/sqlitecreateview.h"
#include "parser/ast/sqlitecreatevirtualtable.h"
#include "parser/ast/sqlitedelete.h"
#include "parser/ast/sqlitedetach.h"
#include "parser/ast/sqlitedropindex.h"
#include "parser/ast/sqlitedroptable.h"
#include "parser/ast/sqlitedroptrigger.h"
#include "parser/ast/sqlitedropview.h"
#include "parser/ast/sqliteemptyquery.h"
#include "parser/ast/sqliteinsert.h"
#include "parser/ast/sqlitepragma.h"
#include "parser/ast/sqlitereindex.h"
#include "parser/ast/sqliterelease.h"
#include "parser/ast/sqliterollback.h"
#include "parser/ast/sqlitesavepoint.h"
#include "parser/ast/sqliteselect.h"
#include "parser/ast/sqliteupdate.h"
#include "parser/ast/sqlitevacuum.h"
#include "parser/ast/sqliteexpr.h"
#include "parser/ast/sqlitecolumntype.h"
#include "parser/ast/sqliteconflictalgo.h"
#include "parser/ast/sqlitesortorder.h"
#include "parser/ast/sqliteindexedcolumn.h"
#include "parser/ast/sqliteforeignkey.h"
#include "parser_helper_stubs.h"
#include "common/utils_sql.h"
#include <QObject>
#include <QDebug>

#define assert(X) Q_ASSERT(X)
#define UNUSED_PARAMETER(X) (void)(X)
#define DONT_INHERIT_TOKENS(X) noTokenInheritanceFields << X
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/*
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands.
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    sqlite3_parseTOKENTYPE     is the data type used for minor tokens given
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is sqlite3_parseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    sqlite3_parseARG_SDECL     A static variable declaration for the %extra_argument
**    sqlite3_parseARG_PDECL     A parameter declaration for the %extra_argument
**    sqlite3_parseARG_STORE     Code to store %extra_argument into yypParser
**    sqlite3_parseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned short int
#define YYNOCODE 273
#define YYACTIONTYPE unsigned short int
#define YYWILDCARD 59
#define sqlite3_parseTOKENTYPE Token*
typedef union {
  int yyinit;
  sqlite3_parseTOKENTYPE yy0;
  ParserOtherSourceList* yy3;
  ParserIndexedBy* yy16;
  SqliteCreateTrigger::Event* yy23;
  SqliteCreateTrigger::Time* yy52;
  SqliteSelect::Core::SingleSource* yy57;
  SqliteForeignKey::Condition::Reaction* yy72;
  ParserSetValueList* yy73;
  ParserCreateTableColumnList* yy74;
  bool* yy99;
  SqliteCreateTable::Column* yy115;
  ParserIndexedColumnList* yy127;
  SqliteIndexedColumn* yy140;
  ParserOrderByList* yy147;
  ParserStubTransDetails* yy148;
  SqliteCreateTrigger::Scope* yy149;
  SqliteSelect::Core* yy150;
  ParserCreateTableConstraintList* yy173;
  ParserResultColumnList* yy181;
  SqliteCreateTable::Constraint* yy182;
  SqliteSelect::Core::JoinOp* yy189;
  SqliteSortOrder* yy197;
  SqliteSelect::Core::JoinConstraint* yy199;
  SqliteExpr::LikeOp* yy232;
  SqliteSelect::CompoundOperator* yy254;
  QVariant* yy261;
  ParserExprNestedList* yy262;
  QString* yy287;
  ParserStringList* yy303;
  ParserStubInsertOrReplace* yy312;
  SqliteForeignKey::Condition* yy315;
  SqliteQuery* yy331;
  ParserFkConditionList* yy360;
  ParserStubAlias* yy361;
  SqliteCreateTable::Column::Constraint* yy368;
  ParserCreateTableColumnConstraintList* yy371;
  SqliteInitially* yy376;
  SqliteSelect* yy377;
  SqliteConflictAlgo* yy418;
  SqliteColumnType* yy441;
  int* yy450;
  ParserExprList* yy455;
  ParserStubExplain* yy475;
  ParserDeferSubClause* yy489;
  ParserQueryList* yy494;
  ParserFullName* yy504;
  SqliteExpr* yy512;
  SqliteLimit* yy516;
  SqliteSelect::Core::JoinSource* yy543;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define sqlite3_parseARG_SDECL ParserContext* parserContext;
#define sqlite3_parseARG_PDECL ,ParserContext* parserContext
#define sqlite3_parseARG_FETCH ParserContext* parserContext = yypParser->parserContext
#define sqlite3_parseARG_STORE yypParser->parserContext = parserContext
#define YYNSTATE 699
#define YYNRULE 407
#define YYFALLBACK 1
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

#define GET_CONTEXT yyParser* yypParser = pParser; sqlite3_parseARG_FETCH

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
#define YY_ACTTAB_COUNT (2181)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   415,   49,   49,   48,   48,   48,   47,  216,  199,  198,
 /*    10 */   197,  409,   52,   52,   52,   52,   45,   50,   50,   50,
 /*    20 */    50,   49,   49,   48,   48,   48,   47,  216,  312,  990,
 /*    30 */   990,  637,  535,  215,   52,   52,   52,   52,  403,   50,
 /*    40 */    50,   50,   50,   49,   49,   48,   48,   48,   47,  216,
 /*    50 */   615,  208,  581,  660,  553,  554,  990,  990,   42,  990,
 /*    60 */   990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
 /*    70 */   281,  990,  990,  990,  990,   39,   40,  990,  990,  990,
 /*    80 */   990,  990,   41,  415,  490,  659,  691,  601,  280,  405,
 /*    90 */     6,  633,  632,  696,  409,  625,  412,  406,  467,  205,
 /*   100 */   662,  413,   85,  412,  206,  665,  330,  491,  493,  414,
 /*   110 */   492,  359,  625,  664,  663,  662,  414,  661,  175,  666,
 /*   120 */   562,  403,  412,  667,  661,  174,  585,  496,  612,  213,
 /*   130 */     4,  352,  234,  303,  469,  414,  660,  687,  659,  573,
 /*   140 */   336,   42,  685,  661,  179,  625,  205,  686,  650,    8,
 /*   150 */   625,  141,   92,  282,  380,  277,  379,  128,   39,   40,
 /*   160 */   584,  193,  192,  298,  591,   41,  854,  130,  624,  495,
 /*   170 */   488,  274,  565,    6,  854,  624,   57,  205,  625,  656,
 /*   180 */   406,  854,  564,  662,  413,  396,  662,  294,  665,  691,
 /*   190 */   496,  665,   13,  383,  313,  385,  664,  663,  662,  664,
 /*   200 */   663,  662,  443,  590,  586,  255,  363,  259,  991,  991,
 /*   210 */    58,  854,  152,  854,  854,  690,  691,   12,  854,  234,
 /*   220 */   444,  445,  647,  854,  854,  854,  854,  854,  625,   66,
 /*   230 */   467,  650,    8,  625,  217,   53,   54,  410,  286,  991,
 /*   240 */   991,  649,  649,   51,   51,   52,   52,   52,   52,  235,
 /*   250 */    50,   50,   50,   50,   49,   49,   48,   48,   48,   47,
 /*   260 */   216,  415,  127,   21,  691,  303,  468,  614,  255,  363,
 /*   270 */   259,  135,  409,   48,   48,   48,   47,  216,  613,  656,
 /*   280 */   656,  611,  234,  446,  640,   53,   54,  410,  286,  689,
 /*   290 */   688,  649,  649,   51,   51,   52,   52,   52,   52,  403,
 /*   300 */    50,   50,   50,   50,   49,   49,   48,   48,   48,   47,
 /*   310 */   216,  475, 1072,  600,  660,  382,  689,  688,   59,   42,
 /*   320 */    50,   50,   50,   50,   49,   49,   48,   48,   48,   47,
 /*   330 */   216,  231,  230,  662,  652,  746,   39,   40,  665,  231,
 /*   340 */   230,  691,  283,   41,  911,  691,  664,  663,  662,  317,
 /*   350 */   200,    6,  911,   47,  216,  690,  625,  265,  406,  267,
 /*   360 */   691,  662,  413,  748,  689,  688,  665,  666,  440,  642,
 /*   370 */   641,  667,  475,  625,  664,  663,  662,  642,  641,  106,
 /*   380 */   656,  442,  636,  441,  659,  534,  991,  991,  601,  911,
 /*   390 */   295,  911,  911,   55,  520,   68,  388,  308,  690,  283,
 /*   400 */   296,  911,  911,  911,  911,  405,  625,  633,  632,  650,
 /*   410 */     8,  625,  690,   53,   54,  410,  286,  991,  991,  649,
 /*   420 */   649,   51,   51,   52,   52,   52,   52,  227,   50,   50,
 /*   430 */    50,   50,   49,   49,   48,   48,   48,   47,  216,  614,
 /*   440 */   140,  689,  688,  482,  533,  689,  688,  483,  126,  534,
 /*   450 */   613,  377,  374,  373,  228,   30,  673,  648,  424,   68,
 /*   460 */   689,  688,  690,  991,  991,   54,  410,  286,  347,  372,
 /*   470 */   649,  649,   51,   51,   52,   52,   52,   52,  589,   50,
 /*   480 */    50,   50,   50,   49,   49,   48,   48,   48,   47,  216,
 /*   490 */    53,   54,  410,  286,  991,  991,  649,  649,   51,   51,
 /*   500 */    52,   52,   52,   52,  656,   50,   50,   50,   50,   49,
 /*   510 */    49,   48,   48,   48,   47,  216,  608,  126,  642,  641,
 /*   520 */   377,  374,  373,  137,  989,  989,  410,  286,  698,    1,
 /*   530 */   649,  649,   51,   51,   52,   52,   52,   52,  372,   50,
 /*   540 */    50,   50,   50,   49,   49,   48,   48,   48,   47,  216,
 /*   550 */    43,  989,  989,  989,  989,  989,  989,  989,  989,  989,
 /*   560 */   989,  989,  989,  989,  989,  646,  989,  989,  989,  989,
 /*   570 */   989,  989,  989,  989,  989,  989,  989,  547,  412,  616,
 /*   580 */   616,  484,  485,  349,   85,  991,  991, 1107,  150,  419,
 /*   590 */     1,  414,  321,  195,   67,  243,  272,  247,  335,  661,
 /*   600 */    89,  635,  691,   85,  656,  691,  637,  407,  215,  691,
 /*   610 */    33,  105,   53,   54,  410,  286,  991,  991,  649,  649,
 /*   620 */    51,   51,   52,   52,   52,   52,  443,   50,   50,   50,
 /*   630 */    50,   49,   49,   48,   48,   48,   47,  216,  249,  690,
 /*   640 */   394,   38,  153,   36,  444,  338,   53,   54,  410,  286,
 /*   650 */   624,  634,  649,  649,   51,   51,   52,   52,   52,   52,
 /*   660 */   697,   50,   50,   50,   50,   49,   49,   48,   48,   48,
 /*   670 */    47,  216, 1058,  916,   53,   54,  410,  286,  118,  691,
 /*   680 */   649,  649,   51,   51,   52,   52,   52,   52,  916,   50,
 /*   690 */    50,   50,   50,   49,   49,   48,   48,   48,   47,  216,
 /*   700 */   510,  917,  689,  688,  245,  689,  688,  339,  640,  689,
 /*   710 */   688,  370,  669,  691,  630,  203,  917,  510,   85,  207,
 /*   720 */    53,   54,  410,  286,   17,  629,  649,  649,   51,   51,
 /*   730 */    52,   52,   52,   52,  916,   50,   50,   50,   50,   49,
 /*   740 */    49,   48,   48,   48,   47,  216,  631, 1058,   53,   54,
 /*   750 */   410,  286,  139,  659,  649,  649,   51,   51,   52,   52,
 /*   760 */    52,   52,  917,   50,   50,   50,   50,   49,   49,   48,
 /*   770 */    48,   48,   47,  216,  504,  691,  571,  691,  570,  689,
 /*   780 */   688,  358,  628,  405,   88,  633,  632,   53,   54,  410,
 /*   790 */   286,  504,  627,  649,  649,   51,   51,   52,   52,   52,
 /*   800 */    52,  355,   50,   50,   50,   50,   49,   49,   48,   48,
 /*   810 */    48,   47,  216,  689,  688,   53,   54,  410,  286,  998,
 /*   820 */   601,  649,  649,   51,   51,   52,   52,   52,   52,  234,
 /*   830 */    50,   50,   50,   50,   49,   49,   48,   48,   48,   47,
 /*   840 */   216,  390,  622,  691,  354,   53,   54,  410,  286,   11,
 /*   850 */   588,  649,  649,   51,   51,   52,   52,   52,   52,  594,
 /*   860 */    50,   50,   50,   50,   49,   49,   48,   48,   48,   47,
 /*   870 */   216,  466,  466,  389,  691,  689,  688,  689,  688,  405,
 /*   880 */   580,  633,  632,  500,   37,   53,   54,  410,  286,  621,
 /*   890 */    31,  649,  649,   51,   51,   52,   52,   52,   52,   31,
 /*   900 */    50,   50,   50,   50,   49,   49,   48,   48,   48,   47,
 /*   910 */   216,  509,   34,  570,  597,   53,   54,  410,  286,   29,
 /*   920 */   577,  649,  649,   51,   51,   52,   52,   52,   52,  605,
 /*   930 */    50,   50,   50,   50,   49,   49,   48,   48,   48,   47,
 /*   940 */   216,  691,  690,  689,  688,   53,   54,  410,  286,   10,
 /*   950 */   560,  649,  649,   51,   51,   52,   52,   52,   52,  692,
 /*   960 */    50,   50,   50,   50,   49,   49,   48,   48,   48,   47,
 /*   970 */   216,   86,  691,  671,  689,  688,   53,   54,  410,  286,
 /*   980 */   271,  539,  649,  649,   51,   51,   52,   52,   52,   52,
 /*   990 */   331,   50,   50,   50,   50,   49,   49,   48,   48,   48,
 /*  1000 */    47,  216,  455,  524,  558,  134,  691,   53,   54,  410,
 /*  1010 */   286,  525,   22,  649,  649,   51,   51,   52,   52,   52,
 /*  1020 */    52,  596,   50,   50,   50,   50,   49,   49,   48,   48,
 /*  1030 */    48,   47,  216,  131, 1073,  587,  691,   53,   54,  410,
 /*  1040 */   286,  689,  688,  649,  649,   51,   51,   52,   52,   52,
 /*  1050 */    52,  530,   50,   50,   50,   50,   49,   49,   48,   48,
 /*  1060 */    48,   47,  216,   27, 1071,  691,   96,  480,   53,   54,
 /*  1070 */   410,  286,  689,  688,  649,  649,   51,   51,   52,   52,
 /*  1080 */    52,   52,  391,   50,   50,   50,   50,   49,   49,   48,
 /*  1090 */    48,   48,   47,  216,  415,  499,   15,  691,  384,  582,
 /*  1100 */   412,  592,  137,  470,  870,  409,  689,  688,  202,  332,
 /*  1110 */   645,  644,  626,  414,  579,  408,  645,  644,  592,  132,
 /*  1120 */   479,  661,  179,  691,  343,  656,   15,  864,  412,  695,
 /*  1130 */   480,  592,  403,  626,  418,  569,  689,  688,  304, 1098,
 /*  1140 */   412,  414,  659,  870,  870,  208, 1098,  660,  592,  661,
 /*  1150 */   156,  568,   42,  414,  626,   15,  405,  252,  633,  632,
 /*  1160 */   592,  661,  179,  396,   85,  689,  688,  578,  234,   39,
 /*  1170 */    40,  397,  313,  691,  640,  415,   41,  592,  452,  659,
 /*  1180 */   640,  208,  474,  691,    6,  559,  409,    2,  204,  625,
 /*  1190 */   104,  406,  617,  601,  662,  413,  691,  689,  688,  665,
 /*  1200 */   624,  451,  450,  396,  449,  359,  625,  664,  663,  662,
 /*  1210 */   691,  356,  313,  403,  490,  659,  691,  135,  431,  472,
 /*  1220 */   804,  226,  659,  689,  688,  656,  305,  522,  660,  421,
 /*  1230 */  1009,   19,  593,   42,  432,  431,  205,  491,  493,  625,
 /*  1240 */   492,  359,  650,    8,  625,  534,  699,  550,  691,  376,
 /*  1250 */    39,   40,   64,  436,  672,   68,  415,   41,  690,  600,
 /*  1260 */   583,  353,  431,  691,  470,    6,  270,  409,  428,  212,
 /*  1270 */   625,  335,  406,  689,  688,  662,  413,  223,  691,  521,
 /*  1280 */   665,  680,  273,  689,  688,  428,  656,  625,  664,  663,
 /*  1290 */   662,  341,  691,  211,  403,  651,  689,  688,   63,  304,
 /*  1300 */  1097,  678,   18,  659,  690,  275,  318, 1097,  412,  660,
 /*  1310 */   689,  688,  428,  412,   42,  691,  689,  688,  690,  691,
 /*  1320 */   625,  414,  651,  650,    8,  625,  414,  659,  651,  661,
 /*  1330 */   179,   39,   40,  697,  661,  179,  415,  412,   41,  691,
 /*  1340 */   327,  360,  371,  691,   62,  125,    6,  409,  689,  688,
 /*  1350 */   414,  625,  691,  406,  690,  651,  662,  413,  661,  179,
 /*  1360 */   434,  665,  691,  689,  688,  280,  691,  127,  625,  664,
 /*  1370 */   663,  662,  691,  437,  403,  430,  392,  676,  689,  688,
 /*  1380 */   398,  367,  346,  285,  541,  313,  656,  434,  691,  660,
 /*  1390 */   574,  516,  689,  688,   42,  369,  233,  654,  668,  151,
 /*  1400 */   324,  625,  430,   16,  650,    8,  625,  219,  999,  313,
 /*  1410 */   459,   39,   40,  517,  517,  689,  688,  415,   41,  689,
 /*  1420 */   688,  121,    3,   78,   83,   26,    6, 1001,  409,   25,
 /*  1430 */    76,  625,  357,  406,  514,  437,  662,  413,  456,  689,
 /*  1440 */   688,  665,  459,  689,  688,  691,  501,  498,  625,  664,
 /*  1450 */   663,  662,  689,  688,  317,  403,  412,  463,  691,  552,
 /*  1460 */   274,  453,  689,  688,  498,  514,  689,  688,    5,  414,
 /*  1470 */   660,  533,  689,  688,  463,   42,  502,  661,  165,    9,
 /*  1480 */   378,  625,  456,  422,  650,    8,  625,  494,  689,  688,
 /*  1490 */   551,  489,   39,   40,  350,  656,  275,  415,  412,   41,
 /*  1500 */   422,  487,  412,  448,  691,   81,  481,    6,  409,  690,
 /*  1510 */   137,  414,  625,  691,  406,  414,  690,  662,  413,  661,
 /*  1520 */   182,  626,  665,  661,  180,  453,  283,  693,  624,  625,
 /*  1530 */   664,  663,  662,  115,  254,  403,   61,  691,  681,  690,
 /*  1540 */   690,  251,  626,  154,  402,  689,  688,  412,  268,  234,
 /*  1550 */   660,  690,  333,  439,  149,   42,  438,   71,  689,  688,
 /*  1560 */   414,  690,  625,  626,  462,  650,    8,  625,  661,  189,
 /*  1570 */   624,  328,   39,   40,  624,  546,  679,  415,  412,   41,
 /*  1580 */   610,  308,  334,  107,  420,  656,   93,    6,  409,  690,
 /*  1590 */   205,  414,  625,  225,  406,  656,  399,  689,  413,  661,
 /*  1600 */   188,  691,  665,  606,  689,  688,  543,  412,  201,  625,
 /*  1610 */   664,  663,  662,  689,  688,  403,  619,   84,  196,  624,
 /*  1620 */   414,   95,  147,  240,  316,  218,  315,  412,  661,  190,
 /*  1630 */   660,  275,  691,  694,  239,   42,  300,  689,  688,  691,
 /*  1640 */   414,  146,  625,  684,  690,  650,    8,  625,  661,  194,
 /*  1650 */   624,  683,   39,   40,   99,  691,  297,  496,  506,   41,
 /*  1660 */   299,  145,  412,  417,  148,  682,  222,    6,   94,  368,
 /*  1670 */   144,  602,  625,  412,  406,  414,  416,  662,  413,  624,
 /*  1680 */    80,   14,  665,  661,  232,  656,  414,  412,  675,  625,
 /*  1690 */   664,  663,  662,  412,  661,  287,  537,  142,  412,  624,
 /*  1700 */   414,  689,  688,  301,  677,  143,  414,  658,  661,  183,
 /*  1710 */   541,  414,  234,  595,  661,  187,  674,  690,  291,  661,
 /*  1720 */   186,  289,  625,   17,  290,  650,    8,  625,  393,  690,
 /*  1730 */    28,  412,  689,  688,  624,  255,  363,  259,  288,  689,
 /*  1740 */   688,  412,  314,  657,  414,  624,  395,  691,   56,  234,
 /*  1750 */   623,  540,  661,  178,  414,  689,  688,  216,  515,  624,
 /*  1760 */   618,  229,  661,  181,  138,  624,  136,  412,  266,   44,
 /*  1770 */   624,  261,  366,  412,  605,  221,  556,  337,  412,  670,
 /*  1780 */   414,  690,  133,  412,  690,  412,  414,  690,  661,  311,
 /*  1790 */    35,  414,  690,  572,  661,  310,  414,  412,  414,  661,
 /*  1800 */   309,  412,  381,  624,  661,  177,  661,  164,  329,  563,
 /*  1810 */   414,  412,  653,  624,  414,  691,  412,  567,  661,  163,
 /*  1820 */   566,  412,  661,  176,  414,  690,  562,  278,  400,  414,
 /*  1830 */   561,  307,  661,  162,  414,  323,  620,  661,  185,  624,
 /*  1840 */   412,  690,  661,  184,  691,  624,   65,  689,  688,  690,
 /*  1850 */   624,  607,  214,  414,  412,  624,  536,  624,  412,  523,
 /*  1860 */   224,  661,  161,  691,  690,  412,  529,  414,  412,  624,
 /*  1870 */   306,  414,  528,  624,  518,  661,  160,  124,  414,  661,
 /*  1880 */    90,  414,  412,  624,  412,  691,  661,  159,  624,  661,
 /*  1890 */   157,  691,  527,  624,  691,  414,  412,  414,  412,  526,
 /*  1900 */    79,  412,  123,  661,  167,  661,  166,  103,  691,  414,
 /*  1910 */   351,  414,  624,  691,  414,  689,  688,  661,  168,  661,
 /*  1920 */   171,  412,  661,   91,  122,  412,  624,  486,  412,  210,
 /*  1930 */   624,  262,  691,  120,  414,  691,  364,  624,  414,  412,
 /*  1940 */   624,  414,  661,  170,  689,  688,  661,  169,  691,  661,
 /*  1950 */   173,  691,  414,  412,  624,  691,  624,  519,  691,  386,
 /*  1960 */   661,  172,  691,  689,  688,   24,  414,  511,  624,   77,
 /*  1970 */   624,  691,  414,  624,  661,  158,  691,  605,  691,  102,
 /*  1980 */   661,   69,   87,  258,  497,  689,  688,  220,  603,  119,
 /*  1990 */   690,  689,  688,  624,  689,  688,  690,  624,  117,  598,
 /*  2000 */   624,  690,  513,  512,  129,  275,  508,  473,  689,  688,
 /*  2010 */   275,  624,  690,  689,  688,  101,  387,  690,  690,   82,
 /*  2020 */   503,  345,  477,  690,  257,  624,  275,  116,  256,  690,
 /*  2030 */   248,  624,  689,  688,  465,  689,  688,  690,  348,  690,
 /*  2040 */   326,  478,  100,  690,  476,  325,  342,  464,  689,  688,
 /*  2050 */   340,  689,  688,  114,  276,  689,  688,   75,  689,  688,
 /*  2060 */   246,  322,  689,  688,  461,  425,  113,  690,   74,   73,
 /*  2070 */   427,  689,  688,  690,  112,  460,  689,  688,  689,  688,
 /*  2080 */   557,  244,  242,  111,  541,  457,  454,  236,  531,  541,
 /*  2090 */   458,  319,   72,  690,  690,  690,  269,  263,  361,  110,
 /*  2100 */   690,  690,  344,  320,  426,  541,  109,  604,   23,  690,
 /*  2110 */   690,  690,  447,  411,  284,  690,  264,  690,  253,  435,
 /*  2120 */   250,  542,   20,  505,  241,  237,  690,  690,  238,  690,
 /*  2130 */   433,  690,   98,  690,  429,   97,  108,  690,  690,   60,
 /*  2140 */   423,  690,  191,  155,  609,  643,  639,  292,  302,  404,
 /*  2150 */   599,  279,  558,  260,  545,  362,    7,  375,  507,  655,
 /*  2160 */   638,  209,  544,   46,  293,  538,  555,  365,  549,  548,
 /*  2170 */  1108,  532,   70,  401,  576,  575, 1108, 1108, 1108, 1108,
 /*  2180 */   471,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     4,   79,   80,   81,   82,   83,   84,   85,  122,  123,
 /*    10 */   124,   15,   70,   71,   72,   73,   74,   75,   76,   77,
 /*    20 */    78,   79,   80,   81,   82,   83,   84,   85,  186,   33,
 /*    30 */    34,  189,  190,  191,   70,   71,   72,   73,   42,   75,
 /*    40 */    76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*    50 */   199,  183,   95,   57,  108,  109,   60,   61,   62,   63,
 /*    60 */    64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
 /*    70 */   109,   75,   76,   77,   78,   79,   80,   81,   82,   83,
 /*    80 */    84,   85,   86,    4,  216,  217,    4,  189,  127,  132,
 /*    90 */    94,  134,  135,   87,   15,   99,  175,  101,   59,  248,
 /*   100 */   104,  105,  102,  175,  183,  109,   62,  239,  240,  188,
 /*   110 */   242,  243,  116,  117,  118,  119,  188,  196,  197,  133,
 /*   120 */   120,   42,  175,  137,  196,  197,  228,   44,  199,   85,
 /*   130 */   262,  263,  136,   94,   95,  188,   57,   19,  217,   57,
 /*   140 */    56,   62,   24,  196,  197,  149,  248,   29,  152,  153,
 /*   150 */   154,  107,  108,  109,  110,  111,  112,  113,   79,   80,
 /*   160 */    81,   79,   80,   91,  102,   86,   87,  105,  247,   23,
 /*   170 */    87,  127,   19,   94,   95,  247,   94,  248,   99,    4,
 /*   180 */   101,  102,   29,  104,  105,  238,  104,   95,  109,    4,
 /*   190 */    44,  109,   69,  246,  247,  116,  117,  118,  119,  117,
 /*   200 */   118,  119,  175,  141,  142,  122,  123,  124,   33,   34,
 /*   210 */    94,  132,   96,  134,  135,  188,    4,   94,  139,  136,
 /*   220 */   193,  194,   95,  144,  145,  146,  147,  148,  149,  102,
 /*   230 */    59,  152,  153,  154,   94,   60,   61,   62,   63,   64,
 /*   240 */    65,   66,   67,   68,   69,   70,   71,   72,   73,  165,
 /*   250 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   260 */    85,    4,   34,   38,    4,   94,   95,    9,  122,  123,
 /*   270 */   124,   96,   15,   81,   82,   83,   84,   85,   20,  104,
 /*   280 */     4,  102,  136,  256,  257,   60,   61,   62,   63,  104,
 /*   290 */   105,   66,   67,   68,   69,   70,   71,   72,   73,   42,
 /*   300 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   310 */    85,   99,   87,  138,   57,   81,  104,  105,  139,   62,
 /*   320 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   330 */    85,   79,   80,  104,  149,   97,   79,   80,  109,   79,
 /*   340 */    80,    4,  175,   86,   87,    4,  117,  118,  119,  121,
 /*   350 */   183,   94,   95,   84,   85,  188,   99,   50,  101,   52,
 /*   360 */     4,  104,  105,   97,  104,  105,  109,  133,  108,  117,
 /*   370 */   118,  137,  160,  116,  117,  118,  119,  117,  118,   97,
 /*   380 */   104,  121,  106,  123,  217,  175,   33,   34,  189,  132,
 /*   390 */   180,  134,  135,   40,  184,  185,  229,  230,  188,  175,
 /*   400 */    93,  144,  145,  146,  147,  132,  149,  134,  135,  152,
 /*   410 */   153,  154,  188,   60,   61,   62,   63,   64,   65,   66,
 /*   420 */    67,   68,   69,   70,   71,   72,   73,  228,   75,   76,
 /*   430 */    77,   78,   79,   80,   81,   82,   83,   84,   85,    9,
 /*   440 */    97,  104,  105,    7,  103,  104,  105,   11,  107,  175,
 /*   450 */    20,  110,  111,  112,  230,  102,  100,  109,  184,  185,
 /*   460 */   104,  105,  188,   33,   34,   61,   62,   63,   32,  128,
 /*   470 */    66,   67,   68,   69,   70,   71,   72,   73,  141,   75,
 /*   480 */    76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*   490 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*   500 */    70,   71,   72,   73,    4,   75,   76,   77,   78,   79,
 /*   510 */    80,   81,   82,   83,   84,   85,   95,  107,  117,  118,
 /*   520 */   110,  111,  112,  102,   33,   34,   62,   63,  170,  171,
 /*   530 */    66,   67,   68,   69,   70,   71,   72,   73,  128,   75,
 /*   540 */    76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*   550 */    94,   60,   61,   62,   63,   64,   65,   66,   67,   68,
 /*   560 */    69,   70,   71,   72,   73,   95,   75,   76,   77,   78,
 /*   570 */    79,   80,   81,   82,   83,   84,   85,   95,  175,   33,
 /*   580 */    34,  122,  123,  124,  102,   33,   34,  168,  169,  170,
 /*   590 */   171,  188,  268,  269,   94,   50,   95,   52,   25,  196,
 /*   600 */   197,   95,    4,  102,  104,    4,  189,  190,  191,    4,
 /*   610 */    64,   65,   60,   61,   62,   63,   64,   65,   66,   67,
 /*   620 */    68,   69,   70,   71,   72,   73,  175,   75,   76,   77,
 /*   630 */    78,   79,   80,   81,   82,   83,   84,   85,   93,  188,
 /*   640 */   237,  156,   94,  158,  193,  194,   60,   61,   62,   63,
 /*   650 */   247,  133,   66,   67,   68,   69,   70,   71,   72,   73,
 /*   660 */    87,   75,   76,   77,   78,   79,   80,   81,   82,   83,
 /*   670 */    84,   85,   12,   87,   60,   61,   62,   63,  102,    4,
 /*   680 */    66,   67,   68,   69,   70,   71,   72,   73,  102,   75,
 /*   690 */    76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
 /*   700 */    99,   87,  104,  105,  159,  104,  105,  256,  257,  104,
 /*   710 */   105,   95,  114,    4,   23,   94,  102,  116,  102,  183,
 /*   720 */    60,   61,   62,   63,  148,   95,   66,   67,   68,   69,
 /*   730 */    70,   71,   72,   73,  148,   75,   76,   77,   78,   79,
 /*   740 */    80,   81,   82,   83,   84,   85,   95,   87,   60,   61,
 /*   750 */    62,   63,  102,  217,   66,   67,   68,   69,   70,   71,
 /*   760 */    72,   73,  148,   75,   76,   77,   78,   79,   80,   81,
 /*   770 */    82,   83,   84,   85,   99,    4,  212,    4,  214,  104,
 /*   780 */   105,  245,   95,  132,   96,  134,  135,   60,   61,   62,
 /*   790 */    63,  116,   95,   66,   67,   68,   69,   70,   71,   72,
 /*   800 */    73,  108,   75,   76,   77,   78,   79,   80,   81,   82,
 /*   810 */    83,   84,   85,  104,  105,   60,   61,   62,   63,  156,
 /*   820 */   189,   66,   67,   68,   69,   70,   71,   72,   73,  136,
 /*   830 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   840 */    85,   30,   95,    4,  151,   60,   61,   62,   63,   13,
 /*   850 */   141,   66,   67,   68,   69,   70,   71,   72,   73,  228,
 /*   860 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   870 */    85,   98,   99,   62,    4,  104,  105,  104,  105,  132,
 /*   880 */    95,  134,  135,   95,  157,   60,   61,   62,   63,   95,
 /*   890 */   102,   66,   67,   68,   69,   70,   71,   72,   73,  102,
 /*   900 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   910 */    85,  212,  157,  214,  143,   60,   61,   62,   63,  102,
 /*   920 */    95,   66,   67,   68,   69,   70,   71,   72,   73,  175,
 /*   930 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   940 */    85,    4,  188,  104,  105,   60,   61,   62,   63,   13,
 /*   950 */    95,   66,   67,   68,   69,   70,   71,   72,   73,   89,
 /*   960 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   970 */    85,   94,    4,  195,  104,  105,   60,   61,   62,   63,
 /*   980 */    95,  203,   66,   67,   68,   69,   70,   71,   72,   73,
 /*   990 */   236,   75,   76,   77,   78,   79,   80,   81,   82,   83,
 /*  1000 */    84,   85,  163,  203,  204,   13,    4,   60,   61,   62,
 /*  1010 */    63,  211,   96,   66,   67,   68,   69,   70,   71,   72,
 /*  1020 */    73,   30,   75,   76,   77,   78,   79,   80,   81,   82,
 /*  1030 */    83,   84,   85,   95,   87,  141,    4,   60,   61,   62,
 /*  1040 */    63,  104,  105,   66,   67,   68,   69,   70,   71,   72,
 /*  1050 */    73,  114,   75,   76,   77,   78,   79,   80,   81,   82,
 /*  1060 */    83,   84,   85,  121,   87,    4,   97,   99,   60,   61,
 /*  1070 */    62,   63,  104,  105,   66,   67,   68,   69,   70,   71,
 /*  1080 */    72,   73,  140,   75,   76,   77,   78,   79,   80,   81,
 /*  1090 */    82,   83,   84,   85,    4,   95,   94,    4,   97,   81,
 /*  1100 */   175,   99,  102,   59,  102,   15,  104,  105,  183,  192,
 /*  1110 */   193,  194,    5,  188,   95,  192,  193,  194,  116,   95,
 /*  1120 */    49,  196,  197,    4,   53,    4,   94,   95,  175,  167,
 /*  1130 */   162,   99,   42,   26,  172,   28,  104,  105,   94,   95,
 /*  1140 */   175,  188,  217,  141,  142,  183,  102,   57,  116,  196,
 /*  1150 */   197,   44,   62,  188,   47,   94,  132,   95,  134,  135,
 /*  1160 */    99,  196,  197,  238,  102,  104,  105,   95,  136,   79,
 /*  1170 */    80,  246,  247,    4,  257,    4,   86,  116,  216,  217,
 /*  1180 */   257,  183,  111,    4,   94,   95,   15,   94,  183,   99,
 /*  1190 */    17,  101,   99,  189,  104,  105,    4,  104,  105,  109,
 /*  1200 */   247,  239,  240,  238,  242,  243,  116,  117,  118,  119,
 /*  1210 */     4,  246,  247,   42,  216,  217,    4,   96,   99,   95,
 /*  1220 */    95,   38,  217,  104,  105,  104,  102,  102,   57,  267,
 /*  1230 */   159,   94,  228,   62,  115,  116,  248,  239,  240,  149,
 /*  1240 */   242,  243,  152,  153,  154,  175,    0,    6,    4,   38,
 /*  1250 */    79,   80,   94,  265,  184,  185,    4,   86,  188,  138,
 /*  1260 */    81,  263,  143,    4,   59,   94,   95,   15,   99,  183,
 /*  1270 */    99,   25,  101,  104,  105,  104,  105,  207,    4,  209,
 /*  1280 */   109,   89,   95,  104,  105,  116,    4,  116,  117,  118,
 /*  1290 */   119,  175,    4,  183,   42,  116,  104,  105,   94,   94,
 /*  1300 */    95,   89,   94,  217,  188,  175,  177,  102,  175,   57,
 /*  1310 */   104,  105,  143,  175,   62,    4,  104,  105,  188,    4,
 /*  1320 */   149,  188,  116,  152,  153,  154,  188,  217,  149,  196,
 /*  1330 */   197,   79,   80,   87,  196,  197,    4,  175,   86,    4,
 /*  1340 */   210,  175,   38,    4,   94,  113,   94,   15,  104,  105,
 /*  1350 */   188,   99,    4,  101,  188,  149,  104,  105,  196,  197,
 /*  1360 */   116,  109,    4,  104,  105,  127,    4,   34,  116,  117,
 /*  1370 */   118,  119,    4,   99,   42,  116,  238,   89,  104,  105,
 /*  1380 */   247,   62,  253,  250,  254,  247,  104,  143,    4,   57,
 /*  1390 */   188,  101,  104,  105,   62,   62,  220,  115,  196,   96,
 /*  1400 */   238,  149,  143,  227,  152,  153,  154,  241,  156,  247,
 /*  1410 */    99,   79,   80,   98,   99,  104,  105,    4,   86,  104,
 /*  1420 */   105,  121,   12,  139,  126,   69,   94,   95,   15,   69,
 /*  1430 */   150,   99,  102,  101,   99,  161,  104,  105,   99,  104,
 /*  1440 */   105,  109,  131,  104,  105,    4,  151,   99,  116,  117,
 /*  1450 */   118,  119,  104,  105,  121,   42,  175,   99,    4,   14,
 /*  1460 */   127,   99,  104,  105,  116,  130,  104,  105,   94,  188,
 /*  1470 */    57,  103,  104,  105,  116,   62,   95,  196,  197,   94,
 /*  1480 */    35,  149,  143,   99,  152,  153,  154,   87,  104,  105,
 /*  1490 */    45,   87,   79,   80,   22,    4,  175,    4,  175,   86,
 /*  1500 */   116,   46,  175,  175,    4,   39,   39,   94,   15,  188,
 /*  1510 */   102,  188,   99,    4,  101,  188,  188,  104,  105,  196,
 /*  1520 */   197,    5,  109,  196,  197,  163,  175,  175,  247,  116,
 /*  1530 */   117,  118,  119,  121,  159,   42,   94,    4,  175,  188,
 /*  1540 */   188,   93,   26,   94,   28,  104,  105,  175,  175,  136,
 /*  1550 */    57,  188,  179,   95,  140,   62,   95,   93,  104,  105,
 /*  1560 */   188,  188,  149,   47,  101,  152,  153,  154,  196,  197,
 /*  1570 */   247,  126,   79,   80,  247,  254,  175,    4,  175,   86,
 /*  1580 */   229,  230,   37,   91,   36,    4,  187,   94,   15,  188,
 /*  1590 */   248,  188,   99,  202,  101,  104,  155,  104,  105,  196,
 /*  1600 */   197,    4,  109,  149,  104,  105,  115,  175,  231,  116,
 /*  1610 */   117,  118,  119,  104,  105,   42,  116,  202,  269,  247,
 /*  1620 */   188,    8,   88,   10,  271,   12,  271,  175,  196,  197,
 /*  1630 */    57,  175,    4,  174,   21,   62,   23,  104,  105,    4,
 /*  1640 */   188,  176,  149,  174,  188,  152,  153,  154,  196,  197,
 /*  1650 */   247,  174,   79,   80,   41,    4,   43,   44,  149,   86,
 /*  1660 */    47,   48,  175,  174,   51,   48,  210,   94,   55,   58,
 /*  1670 */   176,  138,   99,  175,  101,  188,  181,  104,  105,  247,
 /*  1680 */   178,  102,  109,  196,  197,  104,  188,  175,  182,  116,
 /*  1690 */   117,  118,  119,  175,  196,  197,  115,   54,  175,  247,
 /*  1700 */   188,  104,  105,   90,  175,   92,  188,  217,  196,  197,
 /*  1710 */   254,  188,  136,  116,  196,  197,  175,  188,  222,  196,
 /*  1720 */   197,  224,  149,  148,  223,  152,  153,  154,  145,  188,
 /*  1730 */   146,  175,  104,  105,  247,  122,  123,  124,  225,  104,
 /*  1740 */   105,  175,  129,  226,  188,  247,  144,    4,  147,  136,
 /*  1750 */    62,  116,  196,  197,  188,  104,  105,   85,  130,  247,
 /*  1760 */   234,  251,  196,  197,   97,  247,  234,  175,  175,  248,
 /*  1770 */   247,  175,  179,  175,  175,  179,  125,  164,  175,  175,
 /*  1780 */   188,  188,   97,  175,  188,  175,  188,  188,  196,  197,
 /*  1790 */   156,  188,  188,  198,  196,  197,  188,  175,  188,  196,
 /*  1800 */   197,  175,  121,  247,  196,  197,  196,  197,   31,  200,
 /*  1810 */   188,  175,  175,  247,  188,    4,  175,  198,  196,  197,
 /*  1820 */   206,  175,  196,  197,  188,  188,  120,  198,  175,  188,
 /*  1830 */   198,  201,  196,  197,  188,  236,  175,  196,  197,  247,
 /*  1840 */   175,  188,  196,  197,    4,  247,   94,  104,  105,  188,
 /*  1850 */   247,  175,   85,  188,  175,  247,  206,  247,  175,  116,
 /*  1860 */   255,  196,  197,    4,  188,  175,  198,  188,  175,  247,
 /*  1870 */   201,  188,  198,  247,  234,  196,  197,   97,  188,  196,
 /*  1880 */   197,  188,  175,  247,  175,    4,  196,  197,  247,  196,
 /*  1890 */   197,    4,  198,  247,    4,  188,  175,  188,  175,  198,
 /*  1900 */   178,  175,   97,  196,  197,  196,  197,  178,    4,  188,
 /*  1910 */    27,  188,  247,    4,  188,  104,  105,  196,  197,  196,
 /*  1920 */   197,  175,  196,  197,   97,  175,  247,  116,  175,  234,
 /*  1930 */   247,  260,    4,   97,  188,    4,  261,  247,  188,  175,
 /*  1940 */   247,  188,  196,  197,  104,  105,  196,  197,    4,  196,
 /*  1950 */   197,    4,  188,  175,  247,    4,  247,   98,    4,  175,
 /*  1960 */   196,  197,    4,  104,  105,  156,  188,  222,  247,  213,
 /*  1970 */   247,    4,  188,  247,  196,  197,    4,  175,    4,   60,
 /*  1980 */   196,  197,  244,  175,  213,  104,  105,  179,  175,   97,
 /*  1990 */   188,  104,  105,  247,  104,  105,  188,  247,   97,  175,
 /*  2000 */   247,  188,  162,  116,  175,  175,  116,   98,  104,  105,
 /*  2010 */   175,  247,  188,  104,  105,  178,  175,  188,  188,   94,
 /*  2020 */   116,  234,  222,  188,  175,  247,  175,   97,  179,  188,
 /*  2030 */   175,  247,  104,  105,  179,  104,  105,  188,  236,  188,
 /*  2040 */   210,  160,  178,  188,  116,  210,  234,  116,  104,  105,
 /*  2050 */    58,  104,  105,   97,  175,  104,  105,  215,  104,  105,
 /*  2060 */   175,  210,  104,  105,  179,   98,   97,  188,  215,  215,
 /*  2070 */   116,  104,  105,  188,   97,  131,  104,  105,  104,  105,
 /*  2080 */   175,  175,  175,   97,  254,  179,  179,  175,  175,  254,
 /*  2090 */   143,  179,  215,  188,  188,  188,  175,  175,  175,   97,
 /*  2100 */   188,  188,  175,  234,  175,  254,   97,  149,  264,  188,
 /*  2110 */   188,  188,  161,  175,  175,  188,  175,  188,  175,   18,
 /*  2120 */   175,  149,  264,  149,  175,  175,  188,  188,  175,  188,
 /*  2130 */   234,  188,   97,  188,  234,   97,   97,  188,  188,  266,
 /*  2140 */    16,  188,  208,  219,  233,  257,  257,  221,  173,  252,
 /*  2150 */   235,  199,  204,  235,  199,  235,  219,  200,  222,  189,
 /*  2160 */   189,  258,  189,  249,  218,  189,  205,  259,  205,  205,
 /*  2170 */   272,  209,  232,  214,  196,  196,  272,  272,  272,  272,
 /*  2180 */   270,
};
#define YY_SHIFT_USE_DFLT (-115)
#define YY_SHIFT_COUNT (418)
#define YY_SHIFT_MIN   (-114)
#define YY_SHIFT_MAX   (2124)
static const short yy_shift_ofst[] = {
 /*     0 */   573, 1613,   -4,   83,  146, 1332, 1413, 1332, 1252, 1573,
 /*    10 */  1573, 1573,  260,  260,  341, 1032,   79,  257, 1171, 1090,
 /*    20 */  1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
 /*    30 */  1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
 /*    40 */  1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
 /*    50 */  1573, 1573, 1573, 1573, 1573, 1573, 1573, 1493, 1368, 1002,
 /*    60 */  1368, 1972, 1972, 1972, 1972, 1972,  252,  252,  276,  175,
 /*    70 */  1061, 1384, 1362, 1339, 1311, 1358, 1348,  675,  601, 1335,
 /*    80 */  1315, 1958, 1958, 1974, 1333, 1972, 1958,  693,  276,  430,
 /*    90 */   430,  225,   82,   44, 1119, 1169, 1179, 1259, 1244, 1274,
 /*   100 */   773,  212, 1107,  968, 1107, 1093, 1206, 1967, 1954, 1951,
 /*   110 */   839, 1947, 1944, 1931, 1909, 1928, 1881, 1904, 1509, 1890,
 /*   120 */  1887, 1811, 1840, 1628, 1859, 1743,  937, 1651, 1635,  709,
 /*   130 */   337, 1121, 1121, 1597,  771, 1533, 1121, 1454, 1500, 1441,
 /*   140 */   185,  598,  356, 1071, 1288, 1212, 1192,  870,  605,  605,
 /*   150 */  1246, 1576, 1576, 1576, -115, -115,  353,  552,  552,  552,
 /*   160 */   552,  552,  552,  552,  552,  552,  614,  586,  660,  977,
 /*   170 */   947,  916,  885,  855,  825,  785,  755,  727,  688, 1008,
 /*   180 */   404,  464,  464,  -58,  -36,  -36,  -36,  -36,  -36,  245,
 /*   190 */   -78,  410,  229,  229,  192, 1205, 1044, 1445, 1445, 1445,
 /*   200 */  1024,   62,  747, 1516,  651,  546,  -43,  273,  273,  459,
 /*   210 */   436,  273,  273, 1581, 1491,  500, 1282,  234,  118,  576,
 /*   220 */   811,  811,    0, 1125,  258,  228,  258,  811,  942,  485,
 /*   230 */   401,  401,  269,  179,  -14, 2124, 2039, 2038, 2035, 2101,
 /*   240 */  2101, 2009, 2002, 1992, 1986, 1992, 1977, 1992, 1969, 1992,
 /*   250 */  1956, 1611, 1575, 1930, 1611, 1919, 1925, 1901, 1892, 1919,
 /*   260 */  1575, 1836, 1809, 1883, 1827, 1611, 1805, 1611, 1780, 1752,
 /*   270 */  1681, 1681, 1681, 1681, 1777, 1767, 1752, 1681, 1706, 1681,
 /*   280 */  1777, 1681, 1681, 1685, 1667, 1634, 1688, 1672, 1601, 1602,
 /*   290 */  1584, 1583, 1575, 1576, 1643, 1579, 1611, 1617, 1617, 1534,
 /*   300 */  1534, 1534, 1534, -115, -115, -115, -115, -115, -115, -115,
 /*   310 */  -115, -115, -115,  491,  545,  171,   39, -114,  307,   84,
 /*   320 */   123, 1124, 1062, 1000,  788,  616,  501,  482,  -54,  153,
 /*   330 */   -39,  421,  127,  116, 1548, 1545, 1492, 1464, 1461, 1458,
 /*   340 */  1463, 1449, 1414, 1448, 1442, 1412, 1375, 1467, 1408, 1466,
 /*   350 */  1455, 1472, 1404, 1400, 1385, 1295, 1381, 1374, 1330, 1280,
 /*   360 */  1360, 1356, 1298, 1284, 1410, 1300, 1303, 1290, 1319, 1238,
 /*   370 */  1232, 1250, 1304, 1208, 1204, 1187, 1158, 1211, 1241, 1137,
 /*   380 */  1183, 1173, 1072, 1019, 1018, 1001,  969,  894,  938,  991,
 /*   390 */   992,  877,  797,  936,  817,  836,  797,  794,  663,  697,
 /*   400 */   687,  650,  630,  621,  691,  518,  548,  506,  470,  456,
 /*   410 */   348,  343,  282,  266,  238,  140,   92,   72,    6,
};
#define YY_REDUCE_USE_DFLT (-159)
#define YY_REDUCE_COUNT (312)
#define YY_REDUCE_MIN   (-158)
#define YY_REDUCE_MAX   (1979)
static const short yy_reduce_ofst[] = {
 /*     0 */   419,  962,  925, -132,  998,  965,  -79,  -53, 1133, 1162,
 /*    10 */  1138,  403,  451,   27, 1070,  167, 1784, 1778, 1764, 1753,
 /*    20 */  1750, 1746, 1726, 1723, 1721, 1709, 1707, 1693, 1690, 1683,
 /*    30 */  1679, 1665, 1646, 1641, 1636, 1626, 1622, 1610, 1608, 1603,
 /*    40 */  1598, 1592, 1566, 1556, 1523, 1518, 1512, 1498, 1487, 1452,
 /*    50 */  1432, 1403, 1372, 1327, 1323, 1281,  953,  -72,  210, 1351,
 /*    60 */   274, 1851, 1835, 1830, 1456, 1130,  923,  917, -158, -102,
 /*    70 */   224, 1912, 1907, 1906, 1885, 1855, 1849, 1808, 1596, 1593,
 /*    80 */  1373, 1802, 1599, 1166,  800, 1321,  754,  536,  417,  -71,
 /*    90 */  -149,  988, 1202,  778, 1953, 1950, 1938, 1661, 1661, 1949,
 /*   100 */  1945, 1943,  699, 1941,  564, 1939, 1938, 1929, 1661, 1661,
 /*   110 */  1661, 1661, 1661, 1661, 1661, 1927, 1661, 1661, 1923, 1661,
 /*   120 */  1661, 1922, 1661, 1661, 1661, 1921, 1913, 1905, 1879, 1841,
 /*   130 */  1829, 1004,  631, 1661, 1824, 1813,  199, 1676, 1661, 1653,
 /*   140 */  1637, 1604, 1541, 1129, 1529, 1401, 1363, 1352, 1328, 1116,
 /*   150 */   358, 1110, 1086, 1005,  324, 1176, 1342, 1342, 1342, 1342,
 /*   160 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   170 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   180 */  1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
 /*   190 */  1342, 1962, 1979, 1978, 1342, 1910, 1910, 1964, 1963, 1961,
 /*   200 */  1946, 1940, 1946, 1959, 1946, 1914, 1946, 1946, 1946, 1908,
 /*   210 */  1903, 1946, 1946, 1976, 1973, 1971, 1970, 1937, 1975, 1936,
 /*   220 */  1920, 1918, 1957, 1934, 1955, 1948, 1952, 1915, 1911, 1897,
 /*   230 */  1889, 1888, 1342, 1926, 1924, 1873, 1640, 1900, 1896, 1858,
 /*   240 */  1844, 1869, 1640, 1877, 1640, 1854, 1640, 1853, 1640, 1842,
 /*   250 */  1812, 1864, 1800, 1787, 1837, 1771, 1738, 1640, 1640, 1756,
 /*   260 */  1745, 1640, 1675, 1671, 1695, 1729, 1640, 1722, 1640, 1669,
 /*   270 */  1701, 1694, 1674, 1668, 1650, 1605, 1630, 1632, 1609, 1629,
 /*   280 */  1614, 1619, 1595, 1532, 1526, 1510, 1521, 1342, 1517, 1513,
 /*   290 */  1497, 1501, 1496, 1490, 1506, 1495, 1502, 1494, 1465, 1489,
 /*   300 */  1477, 1469, 1459, 1355, 1353, 1349, 1415, 1391, 1377, 1342,
 /*   310 */  1342, 1342, 1399,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   704, 1106, 1001, 1106, 1043,  990,  990,  990,  990,  990,
 /*    10 */   990,  990, 1106, 1106, 1106,  870,  990,  990,  990,  990,
 /*    20 */   990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
 /*    30 */   990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
 /*    40 */   990,  990,  990,  990,  990,  990,  990,  990,  990,  990,
 /*    50 */   990,  990,  990,  990,  990,  990,  990,  990, 1106,  864,
 /*    60 */  1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,  749,  860,
 /*    70 */   870, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
 /*    80 */  1106,  936,  936,  918,  817, 1106,  936, 1106, 1106,  896,
 /*    90 */   896,  991, 1106,  741, 1076, 1081,  977, 1106, 1106, 1106,
 /*   100 */  1106, 1106, 1106, 1106, 1106, 1106,  977, 1106, 1106, 1106,
 /*   110 */  1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,  919, 1106,
 /*   120 */  1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
 /*   130 */  1106,  860,  860,  871, 1106, 1106,  860, 1106, 1106, 1106,
 /*   140 */   978, 1106, 1106,  738, 1106, 1106, 1106,  710, 1022, 1106,
 /*   150 */   704, 1106, 1106, 1106, 1099,  850,  902,  874,  910,  900,
 /*   160 */   904, 1002,  995,  996,  994,  903,  991,  991,  991,  991,
 /*   170 */   991,  991,  991,  991,  991,  991,  991,  991,  991,  991,
 /*   180 */   952,  964,  951,  959,  968,  979,  963,  960,  954,  953,
 /*   190 */   955, 1106, 1106, 1106,  956, 1106, 1106, 1106, 1106, 1106,
 /*   200 */  1106,  863, 1106, 1106, 1106, 1106, 1106,  924,  838, 1106,
 /*   210 */  1050,  831,  729, 1106, 1106,  751, 1106,  848,  713,  909,
 /*   220 */   886,  886,  784,  808,  896,  773,  896,  886,  876,  997,
 /*   230 */  1106, 1106,  957,  861,  848, 1090,  877,  877,  877, 1075,
 /*   240 */  1075,  877,  877,  830,  877,  830,  877,  830,  877,  830,
 /*   250 */   877,  735,  909,  877,  735,  821,  932,  877,  877,  821,
 /*   260 */   909,  877, 1057, 1055,  877,  735,  877,  735,  877, 1010,
 /*   270 */   819,  819,  819,  819,  800, 1016, 1010,  819,  784,  819,
 /*   280 */   800,  819,  819,  877,  877, 1106,  991,  958,  901,  890,
 /*   290 */   899,  897,  909, 1106,  732,  803,  735,  721,  721,  709,
 /*   300 */   709,  709,  709, 1103, 1103, 1099,  786,  786,  866,  967,
 /*   310 */   966,  965,  760, 1003, 1106, 1106, 1106, 1106, 1106, 1106,
 /*   320 */  1024, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
 /*   330 */  1106, 1106, 1106, 1106, 1106,  705, 1106, 1106, 1106, 1106,
 /*   340 */  1106, 1093, 1106, 1106, 1106, 1106, 1106, 1106, 1054, 1053,
 /*   350 */  1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,  923, 1106,
 /*   360 */  1106, 1106, 1106, 1106, 1042, 1106, 1106, 1106, 1106, 1106,
 /*   370 */  1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
 /*   380 */  1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
 /*   390 */  1106, 1106,  898, 1106,  891, 1106, 1000,  981,  989, 1106,
 /*   400 */  1106, 1106, 1106, 1106,  980,  841, 1106, 1106, 1106, 1106,
 /*   410 */   992,  944, 1106,  943,  942,  744, 1106,  719, 1106,  701,
 /*   420 */   706, 1092, 1089, 1091, 1086, 1087, 1085, 1088, 1084, 1082,
 /*   430 */  1083, 1080, 1078, 1077, 1079, 1074, 1070, 1030, 1028, 1026,
 /*   440 */  1035, 1034, 1033, 1032, 1031, 1027, 1025, 1029, 1023,  922,
 /*   450 */   912,  905,  837, 1069, 1067, 1068, 1021, 1019, 1020,  836,
 /*   460 */   835,  834,  829,  828,  827,  826, 1096, 1105, 1104, 1102,
 /*   470 */  1101, 1100, 1094, 1095, 1008, 1007, 1005, 1004, 1006,  737,
 /*   480 */  1046, 1049, 1048, 1047, 1052, 1051, 1044, 1056, 1061, 1060,
 /*   490 */  1065, 1064, 1063, 1062, 1059, 1041,  929,  928,  926,  933,
 /*   500 */   930,  925,  931,  927,  915,  921,  920,  913,  914,  822,
 /*   510 */   908,  906,  907, 1045,  833,  832,  736,  731,  879,  730,
 /*   520 */   740,  806,  807,  815,  818,  813,  816,  812,  811,  810,
 /*   530 */   814,  809,  805,  743,  742,  750,  799,  777,  775,  774,
 /*   540 */   778, 1013, 1015, 1018, 1017, 1014, 1012, 1011,  791,  790,
 /*   550 */   797,  796,  795,  794,  793,  789,  792,  788,  787,  779,
 /*   560 */   772,  771,  785,  770,  802,  801,  798,  769,  825,  824,
 /*   570 */   823,  820,  768,  767,  766,  765,  764,  763,  950,  949,
 /*   580 */   941,  970,  855,  853,  852,  851,  885,  884,  883,  882,
 /*   590 */   881,  880,  873,  869,  868,  872,  888,  889,  887,  867,
 /*   600 */   859,  857,  858,  856,  938,  935,  937,  934,  875,  865,
 /*   610 */   862,  849,  893,  895,  894,  892,  993,  982,  972,  983,
 /*   620 */   878,  969,  971,  992,  989,  984, 1066,  988,  976,  975,
 /*   630 */   974,  973,  844,  843,  842,  948,  756,  754,  755, 1038,
 /*   640 */  1037, 1040, 1039, 1036,  758,  757,  753,  752,  962,  961,
 /*   650 */   946,  985,  986,  945,  987,  947,  745,  845,  840,  839,
 /*   660 */   940,  939,  783,  782,  781,  780,  847,  846,  762,  776,
 /*   670 */   761,  759,  739,  734,  733,  728,  726,  723,  725,  722,
 /*   680 */   727,  724,  720,  718,  717,  716,  715,  714,  748,  747,
 /*   690 */   746,  744,  712,  711,  708,  707,  703,  702,  700,
};

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*    ILLEGAL => nothing */
    0,  /*    COMMENT => nothing */
    0,  /*      SPACE => nothing */
    0,  /*         ID => nothing */
    4,  /*      ABORT => ID */
    4,  /*     ACTION => ID */
    4,  /*      AFTER => ID */
    4,  /*    ANALYZE => ID */
    4,  /*        ASC => ID */
    4,  /*     ATTACH => ID */
    4,  /*     BEFORE => ID */
    4,  /*      BEGIN => ID */
    4,  /*         BY => ID */
    4,  /*    CASCADE => ID */
    4,  /*       CAST => ID */
    4,  /*   COLUMNKW => ID */
    4,  /*   CONFLICT => ID */
    4,  /*   DATABASE => ID */
    4,  /*   DEFERRED => ID */
    4,  /*       DESC => ID */
    4,  /*     DETACH => ID */
    4,  /*       EACH => ID */
    4,  /*        END => ID */
    4,  /*  EXCLUSIVE => ID */
    4,  /*    EXPLAIN => ID */
    4,  /*       FAIL => ID */
    4,  /*        FOR => ID */
    4,  /*     IGNORE => ID */
    4,  /*  IMMEDIATE => ID */
    4,  /*    INDEXED => ID */
    4,  /*  INITIALLY => ID */
    4,  /*    INSTEAD => ID */
    4,  /*    LIKE_KW => ID */
    4,  /*      MATCH => ID */
    4,  /*         NO => ID */
    4,  /*       PLAN => ID */
    4,  /*      QUERY => ID */
    4,  /*        KEY => ID */
    4,  /*         OF => ID */
    4,  /*     OFFSET => ID */
    4,  /*     PRAGMA => ID */
    4,  /*      RAISE => ID */
    4,  /*    RELEASE => ID */
    4,  /*    REPLACE => ID */
    4,  /*   RESTRICT => ID */
    4,  /*        ROW => ID */
    4,  /*   ROLLBACK => ID */
    4,  /*  SAVEPOINT => ID */
    4,  /*       TEMP => ID */
    4,  /*    TRIGGER => ID */
    4,  /*     VACUUM => ID */
    4,  /*       VIEW => ID */
    4,  /*    VIRTUAL => ID */
    4,  /*    WITHOUT => ID */
    4,  /*    REINDEX => ID */
    4,  /*     RENAME => ID */
    4,  /*   CTIME_KW => ID */
    4,  /*         IF => ID */
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
  QList<Token*>* tokens = nullptr;
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  sqlite3_parseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

void *sqlite3_parseCopyParserState(void* other)
{
  yyParser *pParser;
  yyParser *otherParser = (yyParser*)other;

  // Copy parser
  pParser = (yyParser*)malloc((size_t)sizeof(yyParser));
  memcpy(pParser, other, (size_t)sizeof(yyParser));

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = malloc((size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)other)->yystack, (size_t)stackSize);
#endif

  for (int i = 0; i <= pParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(otherParser->yystack[i].tokens);
  }

  return pParser;
}

void sqlite3_parseAddToken(void* other, Token* token)
{
    yyParser *otherParser = (yyParser*)other;
    if (otherParser->yyidx < 0)
        return; // Nothing on stack yet. Might happen when parsing just whitespaces, nothing else.

    otherParser->yystack[otherParser->yyidx].tokens->append(token);
}

void sqlite3_parseRestoreParserState(void* saved, void* target)
{
  yyParser *pParser = (yyParser*)target;
  yyParser *savedParser = (yyParser*)saved;

  for (int i = 0; i <= pParser->yyidx; i++)
      delete pParser->yystack[i].tokens;

  memcpy(pParser, saved, (size_t)sizeof(yyParser));

  for (int i = 0; i <= savedParser->yyidx; i++)
  {
      pParser->yystack[i].tokens = new QList<Token*>();
      *(pParser->yystack[i].tokens) = *(savedParser->yystack[i].tokens);
  }

#if YYSTACKDEPTH<=0
  // Copy stack
  int stackSize = sizeof(yyStackEntry) * pParser->yystksz;
  pParser->yystack = relloc(pParser->yystack, (size_t)stackSize);
  memcpy(pParser->yystack, ((yyParser*)saved)->yystack, (size_t)stackSize);
#endif
}

void sqlite3_parseFreeSavedState(void* other)
{
    yyParser *pParser = (yyParser*)other;
    for (int i = 0; i <= pParser->yyidx; i++)
        delete pParser->yystack[i].tokens;

#if YYSTACKDEPTH<=0
    free(pParser->yystack);
#endif
    free(other);
}

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  "$",             "ILLEGAL",       "COMMENT",       "SPACE",       
  "ID",            "ABORT",         "ACTION",        "AFTER",       
  "ANALYZE",       "ASC",           "ATTACH",        "BEFORE",      
  "BEGIN",         "BY",            "CASCADE",       "CAST",        
  "COLUMNKW",      "CONFLICT",      "DATABASE",      "DEFERRED",    
  "DESC",          "DETACH",        "EACH",          "END",         
  "EXCLUSIVE",     "EXPLAIN",       "FAIL",          "FOR",         
  "IGNORE",        "IMMEDIATE",     "INDEXED",       "INITIALLY",   
  "INSTEAD",       "LIKE_KW",       "MATCH",         "NO",          
  "PLAN",          "QUERY",         "KEY",           "OF",          
  "OFFSET",        "PRAGMA",        "RAISE",         "RELEASE",     
  "REPLACE",       "RESTRICT",      "ROW",           "ROLLBACK",    
  "SAVEPOINT",     "TEMP",          "TRIGGER",       "VACUUM",      
  "VIEW",          "VIRTUAL",       "WITHOUT",       "REINDEX",     
  "RENAME",        "CTIME_KW",      "IF",            "ANY",         
  "OR",            "AND",           "NOT",           "IS",          
  "BETWEEN",       "IN",            "ISNULL",        "NOTNULL",     
  "NE",            "EQ",            "GT",            "LE",          
  "LT",            "GE",            "ESCAPE",        "BITAND",      
  "BITOR",         "LSHIFT",        "RSHIFT",        "PLUS",        
  "MINUS",         "STAR",          "SLASH",         "REM",         
  "CONCAT",        "COLLATE",       "BITNOT",        "SEMI",        
  "TRANSACTION",   "ID_TRANS",      "COMMIT",        "TO",          
  "CREATE",        "TABLE",         "LP",            "RP",          
  "AS",            "DOT",           "ID_TAB_NEW",    "ID_DB",       
  "CTX_ROWID_KW",  "EXISTS",        "COMMA",         "ID_COL_NEW",  
  "STRING",        "JOIN_KW",       "ID_COL_TYPE",   "CONSTRAINT",  
  "DEFAULT",       "NULL",          "PRIMARY",       "UNIQUE",      
  "CHECK",         "REFERENCES",    "ID_CONSTR",     "ID_COLLATE",  
  "ID_TAB",        "INTEGER",       "FLOAT",         "BLOB",        
  "AUTOINCR",      "ON",            "INSERT",        "DELETE",      
  "UPDATE",        "ID_FK_MATCH",   "SET",           "DEFERRABLE",  
  "FOREIGN",       "DROP",          "ID_VIEW_NEW",   "ID_VIEW",     
  "UNION",         "ALL",           "EXCEPT",        "INTERSECT",   
  "SELECT",        "DISTINCT",      "ID_ALIAS",      "FROM",        
  "USING",         "JOIN",          "ID_JOIN_OPTS",  "ID_IDX",      
  "ORDER",         "GROUP",         "HAVING",        "LIMIT",       
  "WHERE",         "ID_COL",        "INTO",          "VALUES",      
  "VARIABLE",      "CASE",          "ID_FN",         "ID_ERR_MSG",  
  "WHEN",          "THEN",          "ELSE",          "INDEX",       
  "ID_IDX_NEW",    "ID_PRAGMA",     "ID_TRIG_NEW",   "ID_TRIG",     
  "ALTER",         "ADD",           "error",         "cmd",         
  "input",         "cmdlist",       "ecmd",          "explain",     
  "cmdx",          "transtype",     "trans_opt",     "nm",          
  "savepoint_opt",  "temp",          "ifnotexists",   "fullname",    
  "columnlist",    "conslist_opt",  "table_options",  "select",      
  "column",        "columnid",      "type",          "carglist",    
  "id",            "ids",           "typetoken",     "typename",    
  "signed",        "plus_num",      "minus_num",     "ccons",       
  "term",          "expr",          "onconf",        "sortorder",   
  "autoinc",       "idxlist_opt",   "refargs",       "defer_subclause",
  "refarg",        "refact",        "init_deferred_pred_opt",  "conslist",    
  "tconscomma",    "tcons",         "idxlist",       "defer_subclause_opt",
  "resolvetype",   "orconf",        "raisetype",     "ifexists",    
  "select_stmt",   "oneselect",     "multiselect_op",  "distinct",    
  "selcollist",    "from",          "where_opt",     "groupby_opt", 
  "having_opt",    "orderby_opt",   "limit_opt",     "sclp",        
  "as",            "joinsrc",       "singlesrc",     "seltablist",  
  "joinop",        "joinconstr_opt",  "dbnm",          "indexed_opt", 
  "inscollist",    "sortlist",      "nexprlist",     "delete_stmt", 
  "update_stmt",   "setlist",       "insert_stmt",   "insert_cmd",  
  "inscollist_opt",  "valuelist",     "exprlist",      "exprx",       
  "not_opt",       "likeop",        "case_operand",  "case_exprlist",
  "case_else",     "uniqueflag",    "idxlist_single",  "collate",     
  "nmnum",         "number",        "trigger_time",  "trigger_event",
  "foreach_clause",  "when_clause",   "trigger_cmd_list",  "trigger_cmd", 
  "database_kw_opt",  "key_opt",       "kwcolumn_opt",  "create_vtab", 
  "vtabarglist",   "vtabarg",       "vtabargtoken",  "anylist",     
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN QUERY PLAN",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN transtype trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "trans_opt ::= TRANSACTION nm",
 /*  13 */ "trans_opt ::= TRANSACTION ID_TRANS",
 /*  14 */ "transtype ::=",
 /*  15 */ "transtype ::= DEFERRED",
 /*  16 */ "transtype ::= IMMEDIATE",
 /*  17 */ "transtype ::= EXCLUSIVE",
 /*  18 */ "cmd ::= COMMIT trans_opt",
 /*  19 */ "cmd ::= END trans_opt",
 /*  20 */ "cmd ::= ROLLBACK trans_opt",
 /*  21 */ "savepoint_opt ::= SAVEPOINT",
 /*  22 */ "savepoint_opt ::=",
 /*  23 */ "cmd ::= SAVEPOINT nm",
 /*  24 */ "cmd ::= RELEASE savepoint_opt nm",
 /*  25 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt nm",
 /*  26 */ "cmd ::= SAVEPOINT ID_TRANS",
 /*  27 */ "cmd ::= RELEASE savepoint_opt ID_TRANS",
 /*  28 */ "cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS",
 /*  29 */ "cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options",
 /*  30 */ "cmd ::= CREATE temp TABLE ifnotexists fullname AS select",
 /*  31 */ "cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW",
 /*  32 */ "cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /*  33 */ "table_options ::=",
 /*  34 */ "table_options ::= WITHOUT nm",
 /*  35 */ "table_options ::= WITHOUT CTX_ROWID_KW",
 /*  36 */ "ifnotexists ::=",
 /*  37 */ "ifnotexists ::= IF NOT EXISTS",
 /*  38 */ "temp ::= TEMP",
 /*  39 */ "temp ::=",
 /*  40 */ "columnlist ::= columnlist COMMA column",
 /*  41 */ "columnlist ::= column",
 /*  42 */ "column ::= columnid type carglist",
 /*  43 */ "columnid ::= nm",
 /*  44 */ "columnid ::= ID_COL_NEW",
 /*  45 */ "id ::= ID",
 /*  46 */ "ids ::= ID|STRING",
 /*  47 */ "nm ::= id",
 /*  48 */ "nm ::= STRING",
 /*  49 */ "nm ::= JOIN_KW",
 /*  50 */ "type ::=",
 /*  51 */ "type ::= typetoken",
 /*  52 */ "typetoken ::= typename",
 /*  53 */ "typetoken ::= typename LP signed RP",
 /*  54 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  55 */ "typename ::= ids",
 /*  56 */ "typename ::= typename ids",
 /*  57 */ "typename ::= ID_COL_TYPE",
 /*  58 */ "signed ::= plus_num",
 /*  59 */ "signed ::= minus_num",
 /*  60 */ "carglist ::= carglist ccons",
 /*  61 */ "carglist ::=",
 /*  62 */ "ccons ::= CONSTRAINT nm",
 /*  63 */ "ccons ::= DEFAULT term",
 /*  64 */ "ccons ::= DEFAULT LP expr RP",
 /*  65 */ "ccons ::= DEFAULT PLUS term",
 /*  66 */ "ccons ::= DEFAULT MINUS term",
 /*  67 */ "ccons ::= DEFAULT id",
 /*  68 */ "ccons ::= DEFAULT CTIME_KW",
 /*  69 */ "ccons ::= NULL onconf",
 /*  70 */ "ccons ::= NOT NULL onconf",
 /*  71 */ "ccons ::= PRIMARY KEY sortorder onconf autoinc",
 /*  72 */ "ccons ::= UNIQUE onconf",
 /*  73 */ "ccons ::= CHECK LP expr RP",
 /*  74 */ "ccons ::= REFERENCES nm idxlist_opt refargs",
 /*  75 */ "ccons ::= defer_subclause",
 /*  76 */ "ccons ::= COLLATE ids",
 /*  77 */ "ccons ::= CONSTRAINT ID_CONSTR",
 /*  78 */ "ccons ::= COLLATE ID_COLLATE",
 /*  79 */ "ccons ::= REFERENCES ID_TAB",
 /*  80 */ "ccons ::= CHECK LP RP",
 /*  81 */ "term ::= NULL",
 /*  82 */ "term ::= INTEGER",
 /*  83 */ "term ::= FLOAT",
 /*  84 */ "term ::= STRING|BLOB",
 /*  85 */ "autoinc ::=",
 /*  86 */ "autoinc ::= AUTOINCR",
 /*  87 */ "refargs ::=",
 /*  88 */ "refargs ::= refargs refarg",
 /*  89 */ "refarg ::= MATCH nm",
 /*  90 */ "refarg ::= ON INSERT refact",
 /*  91 */ "refarg ::= ON DELETE refact",
 /*  92 */ "refarg ::= ON UPDATE refact",
 /*  93 */ "refarg ::= MATCH ID_FK_MATCH",
 /*  94 */ "refact ::= SET NULL",
 /*  95 */ "refact ::= SET DEFAULT",
 /*  96 */ "refact ::= CASCADE",
 /*  97 */ "refact ::= RESTRICT",
 /*  98 */ "refact ::= NO ACTION",
 /*  99 */ "defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt",
 /* 100 */ "defer_subclause ::= DEFERRABLE init_deferred_pred_opt",
 /* 101 */ "init_deferred_pred_opt ::=",
 /* 102 */ "init_deferred_pred_opt ::= INITIALLY DEFERRED",
 /* 103 */ "init_deferred_pred_opt ::= INITIALLY IMMEDIATE",
 /* 104 */ "conslist_opt ::=",
 /* 105 */ "conslist_opt ::= COMMA conslist",
 /* 106 */ "conslist ::= conslist tconscomma tcons",
 /* 107 */ "conslist ::= tcons",
 /* 108 */ "tconscomma ::= COMMA",
 /* 109 */ "tconscomma ::=",
 /* 110 */ "tcons ::= CONSTRAINT nm",
 /* 111 */ "tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf",
 /* 112 */ "tcons ::= UNIQUE LP idxlist RP onconf",
 /* 113 */ "tcons ::= CHECK LP expr RP onconf",
 /* 114 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt",
 /* 115 */ "tcons ::= CONSTRAINT ID_CONSTR",
 /* 116 */ "tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB",
 /* 117 */ "tcons ::= CHECK LP RP onconf",
 /* 118 */ "defer_subclause_opt ::=",
 /* 119 */ "defer_subclause_opt ::= defer_subclause",
 /* 120 */ "onconf ::=",
 /* 121 */ "onconf ::= ON CONFLICT resolvetype",
 /* 122 */ "orconf ::=",
 /* 123 */ "orconf ::= OR resolvetype",
 /* 124 */ "resolvetype ::= raisetype",
 /* 125 */ "resolvetype ::= IGNORE",
 /* 126 */ "resolvetype ::= REPLACE",
 /* 127 */ "cmd ::= DROP TABLE ifexists fullname",
 /* 128 */ "cmd ::= DROP TABLE ifexists nm DOT ID_TAB",
 /* 129 */ "cmd ::= DROP TABLE ifexists ID_DB|ID_TAB",
 /* 130 */ "ifexists ::= IF EXISTS",
 /* 131 */ "ifexists ::=",
 /* 132 */ "cmd ::= CREATE temp VIEW ifnotexists fullname AS select",
 /* 133 */ "cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW",
 /* 134 */ "cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW",
 /* 135 */ "cmd ::= DROP VIEW ifexists fullname",
 /* 136 */ "cmd ::= DROP VIEW ifexists nm DOT ID_VIEW",
 /* 137 */ "cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW",
 /* 138 */ "cmd ::= select_stmt",
 /* 139 */ "select_stmt ::= select",
 /* 140 */ "select ::= oneselect",
 /* 141 */ "select ::= select multiselect_op oneselect",
 /* 142 */ "multiselect_op ::= UNION",
 /* 143 */ "multiselect_op ::= UNION ALL",
 /* 144 */ "multiselect_op ::= EXCEPT",
 /* 145 */ "multiselect_op ::= INTERSECT",
 /* 146 */ "oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 147 */ "distinct ::= DISTINCT",
 /* 148 */ "distinct ::= ALL",
 /* 149 */ "distinct ::=",
 /* 150 */ "sclp ::= selcollist COMMA",
 /* 151 */ "sclp ::=",
 /* 152 */ "selcollist ::= sclp expr as",
 /* 153 */ "selcollist ::= sclp STAR",
 /* 154 */ "selcollist ::= sclp nm DOT STAR",
 /* 155 */ "selcollist ::= sclp",
 /* 156 */ "selcollist ::= sclp ID_TAB DOT STAR",
 /* 157 */ "as ::= AS nm",
 /* 158 */ "as ::= ids",
 /* 159 */ "as ::= AS ID_ALIAS",
 /* 160 */ "as ::= ID_ALIAS",
 /* 161 */ "as ::=",
 /* 162 */ "from ::=",
 /* 163 */ "from ::= FROM joinsrc",
 /* 164 */ "joinsrc ::= singlesrc seltablist",
 /* 165 */ "joinsrc ::=",
 /* 166 */ "seltablist ::= seltablist joinop singlesrc joinconstr_opt",
 /* 167 */ "seltablist ::=",
 /* 168 */ "singlesrc ::= nm dbnm as indexed_opt",
 /* 169 */ "singlesrc ::= LP select RP as",
 /* 170 */ "singlesrc ::= LP joinsrc RP as",
 /* 171 */ "singlesrc ::=",
 /* 172 */ "singlesrc ::= nm DOT",
 /* 173 */ "singlesrc ::= nm DOT ID_TAB",
 /* 174 */ "singlesrc ::= ID_DB|ID_TAB",
 /* 175 */ "joinconstr_opt ::= ON expr",
 /* 176 */ "joinconstr_opt ::= USING LP inscollist RP",
 /* 177 */ "joinconstr_opt ::=",
 /* 178 */ "dbnm ::=",
 /* 179 */ "dbnm ::= DOT nm",
 /* 180 */ "fullname ::= nm dbnm",
 /* 181 */ "joinop ::= COMMA",
 /* 182 */ "joinop ::= JOIN",
 /* 183 */ "joinop ::= JOIN_KW JOIN",
 /* 184 */ "joinop ::= JOIN_KW nm JOIN",
 /* 185 */ "joinop ::= JOIN_KW nm nm JOIN",
 /* 186 */ "joinop ::= ID_JOIN_OPTS",
 /* 187 */ "indexed_opt ::=",
 /* 188 */ "indexed_opt ::= INDEXED BY nm",
 /* 189 */ "indexed_opt ::= NOT INDEXED",
 /* 190 */ "indexed_opt ::= INDEXED BY ID_IDX",
 /* 191 */ "orderby_opt ::=",
 /* 192 */ "orderby_opt ::= ORDER BY sortlist",
 /* 193 */ "sortlist ::= sortlist COMMA expr sortorder",
 /* 194 */ "sortlist ::= expr sortorder",
 /* 195 */ "sortorder ::= ASC",
 /* 196 */ "sortorder ::= DESC",
 /* 197 */ "sortorder ::=",
 /* 198 */ "groupby_opt ::=",
 /* 199 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 200 */ "having_opt ::=",
 /* 201 */ "having_opt ::= HAVING expr",
 /* 202 */ "limit_opt ::=",
 /* 203 */ "limit_opt ::= LIMIT expr",
 /* 204 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 205 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 206 */ "cmd ::= delete_stmt",
 /* 207 */ "delete_stmt ::= DELETE FROM fullname indexed_opt where_opt",
 /* 208 */ "delete_stmt ::= DELETE FROM nm DOT ID_TAB",
 /* 209 */ "delete_stmt ::= DELETE FROM ID_DB|ID_TAB",
 /* 210 */ "where_opt ::=",
 /* 211 */ "where_opt ::= WHERE expr",
 /* 212 */ "where_opt ::= WHERE",
 /* 213 */ "cmd ::= update_stmt",
 /* 214 */ "update_stmt ::= UPDATE orconf fullname indexed_opt SET setlist where_opt",
 /* 215 */ "update_stmt ::= UPDATE orconf nm DOT ID_TAB",
 /* 216 */ "update_stmt ::= UPDATE orconf ID_DB|ID_TAB",
 /* 217 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 218 */ "setlist ::= nm EQ expr",
 /* 219 */ "setlist ::=",
 /* 220 */ "setlist ::= setlist COMMA",
 /* 221 */ "setlist ::= setlist COMMA ID_COL",
 /* 222 */ "setlist ::= ID_COL",
 /* 223 */ "cmd ::= insert_stmt",
 /* 224 */ "insert_stmt ::= insert_cmd INTO fullname inscollist_opt valuelist",
 /* 225 */ "insert_stmt ::= insert_cmd INTO fullname inscollist_opt select",
 /* 226 */ "insert_stmt ::= insert_cmd INTO fullname inscollist_opt DEFAULT VALUES",
 /* 227 */ "insert_stmt ::= insert_cmd INTO ID_DB|ID_TAB",
 /* 228 */ "insert_stmt ::= insert_cmd INTO nm DOT ID_TAB",
 /* 229 */ "insert_cmd ::= INSERT orconf",
 /* 230 */ "insert_cmd ::= REPLACE",
 /* 231 */ "valuelist ::= VALUES LP nexprlist RP",
 /* 232 */ "valuelist ::= valuelist COMMA LP exprlist RP",
 /* 233 */ "inscollist_opt ::=",
 /* 234 */ "inscollist_opt ::= LP inscollist RP",
 /* 235 */ "inscollist ::= inscollist COMMA nm",
 /* 236 */ "inscollist ::= nm",
 /* 237 */ "inscollist ::=",
 /* 238 */ "inscollist ::= inscollist COMMA ID_COL",
 /* 239 */ "inscollist ::= ID_COL",
 /* 240 */ "exprx ::= term",
 /* 241 */ "exprx ::= CTIME_KW",
 /* 242 */ "exprx ::= LP expr RP",
 /* 243 */ "exprx ::= id",
 /* 244 */ "exprx ::= JOIN_KW",
 /* 245 */ "exprx ::= nm DOT nm",
 /* 246 */ "exprx ::= nm DOT nm DOT nm",
 /* 247 */ "exprx ::= VARIABLE",
 /* 248 */ "exprx ::= expr COLLATE ids",
 /* 249 */ "exprx ::= CAST LP expr AS typetoken RP",
 /* 250 */ "exprx ::= ID LP distinct exprlist RP",
 /* 251 */ "exprx ::= ID LP STAR RP",
 /* 252 */ "exprx ::= expr AND expr",
 /* 253 */ "exprx ::= expr OR expr",
 /* 254 */ "exprx ::= expr LT|GT|GE|LE expr",
 /* 255 */ "exprx ::= expr EQ|NE expr",
 /* 256 */ "exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr",
 /* 257 */ "exprx ::= expr PLUS|MINUS expr",
 /* 258 */ "exprx ::= expr STAR|SLASH|REM expr",
 /* 259 */ "exprx ::= expr CONCAT expr",
 /* 260 */ "exprx ::= expr not_opt likeop expr",
 /* 261 */ "exprx ::= expr not_opt likeop expr ESCAPE expr",
 /* 262 */ "exprx ::= expr ISNULL|NOTNULL",
 /* 263 */ "exprx ::= expr NOT NULL",
 /* 264 */ "exprx ::= expr IS not_opt expr",
 /* 265 */ "exprx ::= NOT expr",
 /* 266 */ "exprx ::= BITNOT expr",
 /* 267 */ "exprx ::= MINUS expr",
 /* 268 */ "exprx ::= PLUS expr",
 /* 269 */ "exprx ::= expr not_opt BETWEEN expr AND expr",
 /* 270 */ "exprx ::= expr not_opt IN LP exprlist RP",
 /* 271 */ "exprx ::= LP select RP",
 /* 272 */ "exprx ::= expr not_opt IN LP select RP",
 /* 273 */ "exprx ::= expr not_opt IN nm dbnm",
 /* 274 */ "exprx ::= EXISTS LP select RP",
 /* 275 */ "exprx ::= CASE case_operand case_exprlist case_else END",
 /* 276 */ "exprx ::= RAISE LP IGNORE RP",
 /* 277 */ "exprx ::= RAISE LP raisetype COMMA nm RP",
 /* 278 */ "exprx ::= nm DOT",
 /* 279 */ "exprx ::= nm DOT nm DOT",
 /* 280 */ "exprx ::= expr not_opt BETWEEN expr",
 /* 281 */ "exprx ::= CASE case_operand case_exprlist case_else",
 /* 282 */ "exprx ::= expr not_opt IN LP exprlist",
 /* 283 */ "exprx ::= expr not_opt IN ID_DB",
 /* 284 */ "exprx ::= expr not_opt IN nm DOT ID_TAB",
 /* 285 */ "exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN",
 /* 286 */ "exprx ::= nm DOT ID_TAB|ID_COL",
 /* 287 */ "exprx ::= nm DOT nm DOT ID_COL",
 /* 288 */ "exprx ::= expr COLLATE ID_COLLATE",
 /* 289 */ "exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP",
 /* 290 */ "expr ::= exprx",
 /* 291 */ "expr ::=",
 /* 292 */ "not_opt ::=",
 /* 293 */ "not_opt ::= NOT",
 /* 294 */ "likeop ::= LIKE_KW|MATCH",
 /* 295 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 296 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 297 */ "case_else ::= ELSE expr",
 /* 298 */ "case_else ::=",
 /* 299 */ "case_operand ::= exprx",
 /* 300 */ "case_operand ::=",
 /* 301 */ "exprlist ::= nexprlist",
 /* 302 */ "exprlist ::=",
 /* 303 */ "nexprlist ::= nexprlist COMMA expr",
 /* 304 */ "nexprlist ::= exprx",
 /* 305 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP idxlist RP where_opt",
 /* 306 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB",
 /* 307 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW",
 /* 308 */ "cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW",
 /* 309 */ "uniqueflag ::= UNIQUE",
 /* 310 */ "uniqueflag ::=",
 /* 311 */ "idxlist_opt ::=",
 /* 312 */ "idxlist_opt ::= LP idxlist RP",
 /* 313 */ "idxlist ::= idxlist COMMA idxlist_single",
 /* 314 */ "idxlist ::= idxlist_single",
 /* 315 */ "idxlist_single ::= nm collate sortorder",
 /* 316 */ "idxlist_single ::= ID_COL",
 /* 317 */ "collate ::=",
 /* 318 */ "collate ::= COLLATE ids",
 /* 319 */ "collate ::= COLLATE ID_COLLATE",
 /* 320 */ "cmd ::= DROP INDEX ifexists fullname",
 /* 321 */ "cmd ::= DROP INDEX ifexists nm DOT ID_IDX",
 /* 322 */ "cmd ::= DROP INDEX ifexists ID_DB|ID_IDX",
 /* 323 */ "cmd ::= VACUUM",
 /* 324 */ "cmd ::= VACUUM nm",
 /* 325 */ "cmd ::= PRAGMA nm dbnm",
 /* 326 */ "cmd ::= PRAGMA nm dbnm EQ nmnum",
 /* 327 */ "cmd ::= PRAGMA nm dbnm LP nmnum RP",
 /* 328 */ "cmd ::= PRAGMA nm dbnm EQ minus_num",
 /* 329 */ "cmd ::= PRAGMA nm dbnm LP minus_num RP",
 /* 330 */ "cmd ::= PRAGMA nm DOT ID_PRAGMA",
 /* 331 */ "cmd ::= PRAGMA ID_DB|ID_PRAGMA",
 /* 332 */ "nmnum ::= plus_num",
 /* 333 */ "nmnum ::= nm",
 /* 334 */ "nmnum ::= ON",
 /* 335 */ "nmnum ::= DELETE",
 /* 336 */ "nmnum ::= DEFAULT",
 /* 337 */ "plus_num ::= PLUS number",
 /* 338 */ "plus_num ::= number",
 /* 339 */ "minus_num ::= MINUS number",
 /* 340 */ "number ::= INTEGER",
 /* 341 */ "number ::= FLOAT",
 /* 342 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END",
 /* 343 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause",
 /* 344 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list",
 /* 345 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB",
 /* 346 */ "cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW",
 /* 347 */ "cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW",
 /* 348 */ "trigger_time ::= BEFORE",
 /* 349 */ "trigger_time ::= AFTER",
 /* 350 */ "trigger_time ::= INSTEAD OF",
 /* 351 */ "trigger_time ::=",
 /* 352 */ "trigger_event ::= DELETE",
 /* 353 */ "trigger_event ::= INSERT",
 /* 354 */ "trigger_event ::= UPDATE",
 /* 355 */ "trigger_event ::= UPDATE OF inscollist",
 /* 356 */ "foreach_clause ::=",
 /* 357 */ "foreach_clause ::= FOR EACH ROW",
 /* 358 */ "when_clause ::=",
 /* 359 */ "when_clause ::= WHEN expr",
 /* 360 */ "trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI",
 /* 361 */ "trigger_cmd_list ::= trigger_cmd SEMI",
 /* 362 */ "trigger_cmd_list ::= SEMI",
 /* 363 */ "trigger_cmd ::= update_stmt",
 /* 364 */ "trigger_cmd ::= insert_stmt",
 /* 365 */ "trigger_cmd ::= delete_stmt",
 /* 366 */ "trigger_cmd ::= select_stmt",
 /* 367 */ "raisetype ::= ROLLBACK|ABORT|FAIL",
 /* 368 */ "cmd ::= DROP TRIGGER ifexists fullname",
 /* 369 */ "cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG",
 /* 370 */ "cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG",
 /* 371 */ "cmd ::= ATTACH database_kw_opt expr AS expr key_opt",
 /* 372 */ "cmd ::= DETACH database_kw_opt expr",
 /* 373 */ "key_opt ::=",
 /* 374 */ "key_opt ::= KEY expr",
 /* 375 */ "database_kw_opt ::= DATABASE",
 /* 376 */ "database_kw_opt ::=",
 /* 377 */ "cmd ::= REINDEX",
 /* 378 */ "cmd ::= REINDEX nm dbnm",
 /* 379 */ "cmd ::= REINDEX ID_COLLATE",
 /* 380 */ "cmd ::= REINDEX nm DOT ID_TAB|ID_IDX",
 /* 381 */ "cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB",
 /* 382 */ "cmd ::= ANALYZE",
 /* 383 */ "cmd ::= ANALYZE nm dbnm",
 /* 384 */ "cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX",
 /* 385 */ "cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB",
 /* 386 */ "cmd ::= ALTER TABLE fullname RENAME TO nm",
 /* 387 */ "cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column",
 /* 388 */ "cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW",
 /* 389 */ "cmd ::= ALTER TABLE nm DOT ID_TAB",
 /* 390 */ "cmd ::= ALTER TABLE ID_DB|ID_TAB",
 /* 391 */ "kwcolumn_opt ::=",
 /* 392 */ "kwcolumn_opt ::= COLUMNKW",
 /* 393 */ "cmd ::= create_vtab",
 /* 394 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm",
 /* 395 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP",
 /* 396 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW",
 /* 397 */ "create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW",
 /* 398 */ "vtabarglist ::= vtabarg",
 /* 399 */ "vtabarglist ::= vtabarglist COMMA vtabarg",
 /* 400 */ "vtabarg ::=",
 /* 401 */ "vtabarg ::= vtabarg vtabargtoken",
 /* 402 */ "vtabargtoken ::= ANY",
 /* 403 */ "vtabargtoken ::= LP anylist RP",
 /* 404 */ "anylist ::=",
 /* 405 */ "anylist ::= anylist LP anylist RP",
 /* 406 */ "anylist ::= anylist ANY",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to sqlite3_parse and sqlite3_parseFree.
*/
void *sqlite3_parseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  sqlite3_parseARG_FETCH;
  if (parserContext->executeRules)
  {
      switch( yymajor ){
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
    case 167: /* cmd */
    case 170: /* ecmd */
    case 172: /* cmdx */
    case 216: /* select_stmt */
    case 239: /* delete_stmt */
    case 240: /* update_stmt */
    case 242: /* insert_stmt */
    case 263: /* trigger_cmd */
    case 267: /* create_vtab */
{
delete (yypminor->yy331);
}
      break;
    case 171: /* explain */
{
delete (yypminor->yy475);
}
      break;
    case 173: /* transtype */
    case 174: /* trans_opt */
{
delete (yypminor->yy148);
}
      break;
    case 175: /* nm */
    case 182: /* table_options */
    case 185: /* columnid */
    case 188: /* id */
    case 189: /* ids */
    case 191: /* typename */
    case 234: /* dbnm */
    case 255: /* collate */
    case 269: /* vtabarg */
    case 270: /* vtabargtoken */
    case 271: /* anylist */
{
delete (yypminor->yy287);
}
      break;
    case 176: /* savepoint_opt */
    case 178: /* ifnotexists */
    case 200: /* autoinc */
    case 208: /* tconscomma */
    case 215: /* ifexists */
    case 248: /* not_opt */
    case 253: /* uniqueflag */
    case 264: /* database_kw_opt */
    case 266: /* kwcolumn_opt */
{
delete (yypminor->yy99);
}
      break;
    case 177: /* temp */
    case 219: /* distinct */
{
delete (yypminor->yy450);
}
      break;
    case 179: /* fullname */
{
delete (yypminor->yy504);
}
      break;
    case 180: /* columnlist */
{
delete (yypminor->yy74);
}
      break;
    case 181: /* conslist_opt */
    case 207: /* conslist */
{
delete (yypminor->yy173);
}
      break;
    case 183: /* select */
{
delete (yypminor->yy377);
}
      break;
    case 184: /* column */
{
delete (yypminor->yy115);
}
      break;
    case 186: /* type */
    case 190: /* typetoken */
{
delete (yypminor->yy441);
}
      break;
    case 187: /* carglist */
{
delete (yypminor->yy371);
}
      break;
    case 192: /* signed */
    case 193: /* plus_num */
    case 194: /* minus_num */
    case 196: /* term */
    case 256: /* nmnum */
    case 257: /* number */
{
delete (yypminor->yy261);
}
      break;
    case 195: /* ccons */
{
delete (yypminor->yy368);
}
      break;
    case 197: /* expr */
    case 222: /* where_opt */
    case 224: /* having_opt */
    case 247: /* exprx */
    case 250: /* case_operand */
    case 252: /* case_else */
{
delete (yypminor->yy512);
}
      break;
    case 198: /* onconf */
    case 212: /* resolvetype */
    case 213: /* orconf */
{
delete (yypminor->yy418);
}
      break;
    case 199: /* sortorder */
{
delete (yypminor->yy197);
}
      break;
    case 201: /* idxlist_opt */
    case 210: /* idxlist */
{
delete (yypminor->yy127);
}
      break;
    case 202: /* refargs */
{
delete (yypminor->yy360);
}
      break;
    case 203: /* defer_subclause */
    case 211: /* defer_subclause_opt */
{
delete (yypminor->yy489);
}
      break;
    case 204: /* refarg */
{
delete (yypminor->yy315);
}
      break;
    case 205: /* refact */
{
delete (yypminor->yy72);
}
      break;
    case 206: /* init_deferred_pred_opt */
{
delete (yypminor->yy376);
}
      break;
    case 209: /* tcons */
{
delete (yypminor->yy182);
}
      break;
    case 217: /* oneselect */
{
delete (yypminor->yy150);
}
      break;
    case 218: /* multiselect_op */
{
delete (yypminor->yy254);
}
      break;
    case 220: /* selcollist */
    case 227: /* sclp */
{
delete (yypminor->yy181);
}
      break;
    case 221: /* from */
    case 229: /* joinsrc */
{
delete (yypminor->yy543);
}
      break;
    case 223: /* groupby_opt */
    case 238: /* nexprlist */
    case 246: /* exprlist */
    case 251: /* case_exprlist */
{
delete (yypminor->yy455);
}
      break;
    case 225: /* orderby_opt */
    case 237: /* sortlist */
{
delete (yypminor->yy147);
}
      break;
    case 226: /* limit_opt */
{
delete (yypminor->yy516);
}
      break;
    case 228: /* as */
{
delete (yypminor->yy361);
}
      break;
    case 230: /* singlesrc */
{
delete (yypminor->yy57);
}
      break;
    case 231: /* seltablist */
{
delete (yypminor->yy3);
}
      break;
    case 232: /* joinop */
{
delete (yypminor->yy189);
}
      break;
    case 233: /* joinconstr_opt */
{
delete (yypminor->yy199);
}
      break;
    case 235: /* indexed_opt */
{
delete (yypminor->yy16);
}
      break;
    case 236: /* inscollist */
    case 244: /* inscollist_opt */
    case 268: /* vtabarglist */
{
delete (yypminor->yy303);
}
      break;
    case 241: /* setlist */
{
delete (yypminor->yy73);
}
      break;
    case 243: /* insert_cmd */
{
delete (yypminor->yy312);
}
      break;
    case 245: /* valuelist */
{
delete (yypminor->yy262);
}
      break;
    case 249: /* likeop */
{
delete (yypminor->yy232);
}
      break;
    case 254: /* idxlist_single */
{
delete (yypminor->yy140);
}
      break;
    case 258: /* trigger_time */
{
delete (yypminor->yy52);
}
      break;
    case 259: /* trigger_event */
{
delete (yypminor->yy23);
}
      break;
    case 260: /* foreach_clause */
{
delete (yypminor->yy149);
}
      break;
    case 261: /* when_clause */
    case 265: /* key_opt */
{
if ((yypminor->yy512)) delete (yypminor->yy512);
}
      break;
    case 262: /* trigger_cmd_list */
{
delete (yypminor->yy494);
}
      break;
        default:  break;   /* If no destructor action specified: do nothing */
      }
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  /* There is no mechanism by which the parser stack can be popped below
  ** empty in SQLite.  */
  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  delete yytos->tokens;
  yytos->tokens = nullptr;
  pParser->yyidx--;
  return yymajor;
}

/*
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from sqlite3_parseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void sqlite3_parseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  /* In SQLite, we never try to destroy a parser that was not successfully
  ** created in the first place. */
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int sqlite3_parseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
  GET_CONTEXT;

  if( stateno>YY_SHIFT_COUNT
   || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0
             && parserContext->doFallbacks ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if(
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   sqlite3_parseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */

    UNUSED_PARAMETER(yypMinor);
    parserContext->error(QObject::tr("Parser stack overflow"));
   sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
  yytos->tokens = new QList<Token*>();
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 168, 1 },
  { 169, 2 },
  { 169, 1 },
  { 170, 1 },
  { 170, 3 },
  { 171, 0 },
  { 171, 1 },
  { 171, 3 },
  { 172, 1 },
  { 167, 3 },
  { 174, 0 },
  { 174, 1 },
  { 174, 2 },
  { 174, 2 },
  { 173, 0 },
  { 173, 1 },
  { 173, 1 },
  { 173, 1 },
  { 167, 2 },
  { 167, 2 },
  { 167, 2 },
  { 176, 1 },
  { 176, 0 },
  { 167, 2 },
  { 167, 3 },
  { 167, 5 },
  { 167, 2 },
  { 167, 3 },
  { 167, 5 },
  { 167, 10 },
  { 167, 7 },
  { 167, 7 },
  { 167, 5 },
  { 182, 0 },
  { 182, 2 },
  { 182, 2 },
  { 178, 0 },
  { 178, 3 },
  { 177, 1 },
  { 177, 0 },
  { 180, 3 },
  { 180, 1 },
  { 184, 3 },
  { 185, 1 },
  { 185, 1 },
  { 188, 1 },
  { 189, 1 },
  { 175, 1 },
  { 175, 1 },
  { 175, 1 },
  { 186, 0 },
  { 186, 1 },
  { 190, 1 },
  { 190, 4 },
  { 190, 6 },
  { 191, 1 },
  { 191, 2 },
  { 191, 1 },
  { 192, 1 },
  { 192, 1 },
  { 187, 2 },
  { 187, 0 },
  { 195, 2 },
  { 195, 2 },
  { 195, 4 },
  { 195, 3 },
  { 195, 3 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 195, 3 },
  { 195, 5 },
  { 195, 2 },
  { 195, 4 },
  { 195, 4 },
  { 195, 1 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 195, 2 },
  { 195, 3 },
  { 196, 1 },
  { 196, 1 },
  { 196, 1 },
  { 196, 1 },
  { 200, 0 },
  { 200, 1 },
  { 202, 0 },
  { 202, 2 },
  { 204, 2 },
  { 204, 3 },
  { 204, 3 },
  { 204, 3 },
  { 204, 2 },
  { 205, 2 },
  { 205, 2 },
  { 205, 1 },
  { 205, 1 },
  { 205, 2 },
  { 203, 3 },
  { 203, 2 },
  { 206, 0 },
  { 206, 2 },
  { 206, 2 },
  { 181, 0 },
  { 181, 2 },
  { 207, 3 },
  { 207, 1 },
  { 208, 1 },
  { 208, 0 },
  { 209, 2 },
  { 209, 7 },
  { 209, 5 },
  { 209, 5 },
  { 209, 10 },
  { 209, 2 },
  { 209, 7 },
  { 209, 4 },
  { 211, 0 },
  { 211, 1 },
  { 198, 0 },
  { 198, 3 },
  { 213, 0 },
  { 213, 2 },
  { 212, 1 },
  { 212, 1 },
  { 212, 1 },
  { 167, 4 },
  { 167, 6 },
  { 167, 4 },
  { 215, 2 },
  { 215, 0 },
  { 167, 7 },
  { 167, 7 },
  { 167, 5 },
  { 167, 4 },
  { 167, 6 },
  { 167, 4 },
  { 167, 1 },
  { 216, 1 },
  { 183, 1 },
  { 183, 3 },
  { 218, 1 },
  { 218, 2 },
  { 218, 1 },
  { 218, 1 },
  { 217, 9 },
  { 219, 1 },
  { 219, 1 },
  { 219, 0 },
  { 227, 2 },
  { 227, 0 },
  { 220, 3 },
  { 220, 2 },
  { 220, 4 },
  { 220, 1 },
  { 220, 4 },
  { 228, 2 },
  { 228, 1 },
  { 228, 2 },
  { 228, 1 },
  { 228, 0 },
  { 221, 0 },
  { 221, 2 },
  { 229, 2 },
  { 229, 0 },
  { 231, 4 },
  { 231, 0 },
  { 230, 4 },
  { 230, 4 },
  { 230, 4 },
  { 230, 0 },
  { 230, 2 },
  { 230, 3 },
  { 230, 1 },
  { 233, 2 },
  { 233, 4 },
  { 233, 0 },
  { 234, 0 },
  { 234, 2 },
  { 179, 2 },
  { 232, 1 },
  { 232, 1 },
  { 232, 2 },
  { 232, 3 },
  { 232, 4 },
  { 232, 1 },
  { 235, 0 },
  { 235, 3 },
  { 235, 2 },
  { 235, 3 },
  { 225, 0 },
  { 225, 3 },
  { 237, 4 },
  { 237, 2 },
  { 199, 1 },
  { 199, 1 },
  { 199, 0 },
  { 223, 0 },
  { 223, 3 },
  { 224, 0 },
  { 224, 2 },
  { 226, 0 },
  { 226, 2 },
  { 226, 4 },
  { 226, 4 },
  { 167, 1 },
  { 239, 5 },
  { 239, 5 },
  { 239, 3 },
  { 222, 0 },
  { 222, 2 },
  { 222, 1 },
  { 167, 1 },
  { 240, 7 },
  { 240, 5 },
  { 240, 3 },
  { 241, 5 },
  { 241, 3 },
  { 241, 0 },
  { 241, 2 },
  { 241, 3 },
  { 241, 1 },
  { 167, 1 },
  { 242, 5 },
  { 242, 5 },
  { 242, 6 },
  { 242, 3 },
  { 242, 5 },
  { 243, 2 },
  { 243, 1 },
  { 245, 4 },
  { 245, 5 },
  { 244, 0 },
  { 244, 3 },
  { 236, 3 },
  { 236, 1 },
  { 236, 0 },
  { 236, 3 },
  { 236, 1 },
  { 247, 1 },
  { 247, 1 },
  { 247, 3 },
  { 247, 1 },
  { 247, 1 },
  { 247, 3 },
  { 247, 5 },
  { 247, 1 },
  { 247, 3 },
  { 247, 6 },
  { 247, 5 },
  { 247, 4 },
  { 247, 3 },
  { 247, 3 },
  { 247, 3 },
  { 247, 3 },
  { 247, 3 },
  { 247, 3 },
  { 247, 3 },
  { 247, 3 },
  { 247, 4 },
  { 247, 6 },
  { 247, 2 },
  { 247, 3 },
  { 247, 4 },
  { 247, 2 },
  { 247, 2 },
  { 247, 2 },
  { 247, 2 },
  { 247, 6 },
  { 247, 6 },
  { 247, 3 },
  { 247, 6 },
  { 247, 5 },
  { 247, 4 },
  { 247, 5 },
  { 247, 4 },
  { 247, 6 },
  { 247, 2 },
  { 247, 4 },
  { 247, 4 },
  { 247, 4 },
  { 247, 5 },
  { 247, 4 },
  { 247, 6 },
  { 247, 1 },
  { 247, 3 },
  { 247, 5 },
  { 247, 3 },
  { 247, 6 },
  { 197, 1 },
  { 197, 0 },
  { 248, 0 },
  { 248, 1 },
  { 249, 1 },
  { 251, 5 },
  { 251, 4 },
  { 252, 2 },
  { 252, 0 },
  { 250, 1 },
  { 250, 0 },
  { 246, 1 },
  { 246, 0 },
  { 238, 3 },
  { 238, 1 },
  { 167, 12 },
  { 167, 8 },
  { 167, 7 },
  { 167, 5 },
  { 253, 1 },
  { 253, 0 },
  { 201, 0 },
  { 201, 3 },
  { 210, 3 },
  { 210, 1 },
  { 254, 3 },
  { 254, 1 },
  { 255, 0 },
  { 255, 2 },
  { 255, 2 },
  { 167, 4 },
  { 167, 6 },
  { 167, 4 },
  { 167, 1 },
  { 167, 2 },
  { 167, 3 },
  { 167, 5 },
  { 167, 6 },
  { 167, 5 },
  { 167, 6 },
  { 167, 4 },
  { 167, 2 },
  { 256, 1 },
  { 256, 1 },
  { 256, 1 },
  { 256, 1 },
  { 256, 1 },
  { 193, 2 },
  { 193, 1 },
  { 194, 2 },
  { 257, 1 },
  { 257, 1 },
  { 167, 15 },
  { 167, 12 },
  { 167, 14 },
  { 167, 10 },
  { 167, 7 },
  { 167, 5 },
  { 258, 1 },
  { 258, 1 },
  { 258, 2 },
  { 258, 0 },
  { 259, 1 },
  { 259, 1 },
  { 259, 1 },
  { 259, 3 },
  { 260, 0 },
  { 260, 3 },
  { 261, 0 },
  { 261, 2 },
  { 262, 3 },
  { 262, 2 },
  { 262, 1 },
  { 263, 1 },
  { 263, 1 },
  { 263, 1 },
  { 263, 1 },
  { 214, 1 },
  { 167, 4 },
  { 167, 6 },
  { 167, 4 },
  { 167, 6 },
  { 167, 3 },
  { 265, 0 },
  { 265, 2 },
  { 264, 1 },
  { 264, 0 },
  { 167, 1 },
  { 167, 3 },
  { 167, 2 },
  { 167, 4 },
  { 167, 2 },
  { 167, 1 },
  { 167, 3 },
  { 167, 4 },
  { 167, 2 },
  { 167, 6 },
  { 167, 6 },
  { 167, 6 },
  { 167, 5 },
  { 167, 3 },
  { 266, 0 },
  { 266, 1 },
  { 167, 1 },
  { 267, 8 },
  { 267, 11 },
  { 267, 7 },
  { 267, 5 },
  { 268, 1 },
  { 268, 3 },
  { 269, 0 },
  { 269, 2 },
  { 270, 1 },
  { 270, 3 },
  { 271, 0 },
  { 271, 4 },
  { 271, 2 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  sqlite3_parseARG_FETCH;
  SqliteStatement* objectForTokens = 0;
  QStringList noTokenInheritanceFields;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  if (parserContext->executeRules)
  {
      switch( yyruleno ){
      /* Beginning here are the reduction cases.  A typical example
      ** follows:
      **   case 0:
      **  #line <lineno> <grammarfile>
      **     { ... }           // User supplied code
      **  #line <lineno> <thisfile>
      **     break;
      */
      case 1: /* cmdlist ::= cmdlist ecmd */
{parserContext->addQuery(yymsp[0].minor.yy331); DONT_INHERIT_TOKENS("cmdlist");}
        break;
      case 2: /* cmdlist ::= ecmd */
{parserContext->addQuery(yymsp[0].minor.yy331);}
        break;
      case 3: /* ecmd ::= SEMI */
{yygotominor.yy331 = new SqliteEmptyQuery();}
        break;
      case 4: /* ecmd ::= explain cmdx SEMI */
{
                                                yygotominor.yy331 = yymsp[-1].minor.yy331;
                                                yygotominor.yy331->explain = yymsp[-2].minor.yy475->explain;
                                                yygotominor.yy331->queryPlan = yymsp[-2].minor.yy475->queryPlan;
                                                delete yymsp[-2].minor.yy475;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 5: /* explain ::= */
{yygotominor.yy475 = new ParserStubExplain(false, false);}
        break;
      case 6: /* explain ::= EXPLAIN */
{yygotominor.yy475 = new ParserStubExplain(true, false);}
        break;
      case 7: /* explain ::= EXPLAIN QUERY PLAN */
{yygotominor.yy475 = new ParserStubExplain(true, true);}
        break;
      case 8: /* cmdx ::= cmd */
      case 363: /* trigger_cmd ::= update_stmt */ yytestcase(yyruleno==363);
      case 364: /* trigger_cmd ::= insert_stmt */ yytestcase(yyruleno==364);
      case 365: /* trigger_cmd ::= delete_stmt */ yytestcase(yyruleno==365);
      case 366: /* trigger_cmd ::= select_stmt */ yytestcase(yyruleno==366);
      case 393: /* cmd ::= create_vtab */ yytestcase(yyruleno==393);
{yygotominor.yy331 = yymsp[0].minor.yy331;}
        break;
      case 9: /* cmd ::= BEGIN transtype trans_opt */
{
                                                yygotominor.yy331 = new SqliteBeginTrans(
                                                        yymsp[-1].minor.yy148->type,
                                                        yymsp[0].minor.yy148->transactionKw,
                                                        yymsp[0].minor.yy148->name
                                                    );
                                                delete yymsp[0].minor.yy148;
                                                delete yymsp[-1].minor.yy148;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 10: /* trans_opt ::= */
      case 14: /* transtype ::= */ yytestcase(yyruleno==14);
{yygotominor.yy148 = new ParserStubTransDetails();}
        break;
      case 11: /* trans_opt ::= TRANSACTION */
{
                                                yygotominor.yy148 = new ParserStubTransDetails();
                                                yygotominor.yy148->transactionKw = true;
                                            }
        break;
      case 12: /* trans_opt ::= TRANSACTION nm */
      case 13: /* trans_opt ::= TRANSACTION ID_TRANS */ yytestcase(yyruleno==13);
{
                                                yygotominor.yy148 = new ParserStubTransDetails();
                                                yygotominor.yy148->transactionKw = true;
                                                yygotominor.yy148->name = *(yymsp[0].minor.yy287);
                                                delete yymsp[0].minor.yy287;
                                            }
        break;
      case 15: /* transtype ::= DEFERRED */
{
                                                yygotominor.yy148 = new ParserStubTransDetails();
                                                yygotominor.yy148->type = SqliteBeginTrans::Type::DEFERRED;
                                            }
        break;
      case 16: /* transtype ::= IMMEDIATE */
{
                                                yygotominor.yy148 = new ParserStubTransDetails();
                                                yygotominor.yy148->type = SqliteBeginTrans::Type::IMMEDIATE;
                                            }
        break;
      case 17: /* transtype ::= EXCLUSIVE */
{
                                                yygotominor.yy148 = new ParserStubTransDetails();
                                                yygotominor.yy148->type = SqliteBeginTrans::Type::EXCLUSIVE;
                                            }
        break;
      case 18: /* cmd ::= COMMIT trans_opt */
{
                                                yygotominor.yy331 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy148->transactionKw,
                                                        yymsp[0].minor.yy148->name,
                                                        false
                                                    );
                                                delete yymsp[0].minor.yy148;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 19: /* cmd ::= END trans_opt */
{
                                                yygotominor.yy331 = new SqliteCommitTrans(
                                                        yymsp[0].minor.yy148->transactionKw,
                                                        yymsp[0].minor.yy148->name,
                                                        true
                                                    );
                                                delete yymsp[0].minor.yy148;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 20: /* cmd ::= ROLLBACK trans_opt */
{
                                                yygotominor.yy331 = new SqliteRollback(
                                                        yymsp[0].minor.yy148->transactionKw,
                                                        yymsp[0].minor.yy148->name
                                                    );
                                                delete yymsp[0].minor.yy148;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 21: /* savepoint_opt ::= SAVEPOINT */
      case 37: /* ifnotexists ::= IF NOT EXISTS */ yytestcase(yyruleno==37);
      case 86: /* autoinc ::= AUTOINCR */ yytestcase(yyruleno==86);
      case 108: /* tconscomma ::= COMMA */ yytestcase(yyruleno==108);
      case 130: /* ifexists ::= IF EXISTS */ yytestcase(yyruleno==130);
      case 293: /* not_opt ::= NOT */ yytestcase(yyruleno==293);
      case 309: /* uniqueflag ::= UNIQUE */ yytestcase(yyruleno==309);
      case 375: /* database_kw_opt ::= DATABASE */ yytestcase(yyruleno==375);
      case 391: /* kwcolumn_opt ::= */ yytestcase(yyruleno==391);
{yygotominor.yy99 = new bool(true);}
        break;
      case 22: /* savepoint_opt ::= */
      case 36: /* ifnotexists ::= */ yytestcase(yyruleno==36);
      case 85: /* autoinc ::= */ yytestcase(yyruleno==85);
      case 109: /* tconscomma ::= */ yytestcase(yyruleno==109);
      case 131: /* ifexists ::= */ yytestcase(yyruleno==131);
      case 292: /* not_opt ::= */ yytestcase(yyruleno==292);
      case 310: /* uniqueflag ::= */ yytestcase(yyruleno==310);
      case 376: /* database_kw_opt ::= */ yytestcase(yyruleno==376);
      case 392: /* kwcolumn_opt ::= COLUMNKW */ yytestcase(yyruleno==392);
{yygotominor.yy99 = new bool(false);}
        break;
      case 23: /* cmd ::= SAVEPOINT nm */
{
                                                yygotominor.yy331 = new SqliteSavepoint(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 24: /* cmd ::= RELEASE savepoint_opt nm */
{
                                                yygotominor.yy331 = new SqliteRelease(*(yymsp[-1].minor.yy99), *(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 25: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt nm */
      case 26: /* cmd ::= SAVEPOINT ID_TRANS */ yytestcase(yyruleno==26);
{
                                                yygotominor.yy331 = new SqliteRollback(
                                                        yymsp[-3].minor.yy148->transactionKw,
                                                        *(yymsp[-1].minor.yy99),
                                                        *(yymsp[0].minor.yy287)
                                                    );
                                                delete yymsp[-1].minor.yy99;
                                                delete yymsp[-3].minor.yy148;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 27: /* cmd ::= RELEASE savepoint_opt ID_TRANS */
      case 28: /* cmd ::= ROLLBACK trans_opt TO savepoint_opt ID_TRANS */ yytestcase(yyruleno==28);
{  yy_destructor(yypParser,176,&yymsp[-1].minor);
}
        break;
      case 29: /* cmd ::= CREATE temp TABLE ifnotexists fullname LP columnlist conslist_opt RP table_options */
{
                                                yygotominor.yy331 = new SqliteCreateTable(
                                                        *(yymsp[-8].minor.yy450),
                                                        *(yymsp[-6].minor.yy99),
                                                        yymsp[-5].minor.yy504->name1,
                                                        yymsp[-5].minor.yy504->name2,
                                                        *(yymsp[-3].minor.yy74),
                                                        *(yymsp[-2].minor.yy173),
                                                        *(yymsp[0].minor.yy287)
                                                    );
                                                delete yymsp[-6].minor.yy99;
                                                delete yymsp[-8].minor.yy450;
                                                delete yymsp[-3].minor.yy74;
                                                delete yymsp[-2].minor.yy173;
                                                delete yymsp[-5].minor.yy504;
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 30: /* cmd ::= CREATE temp TABLE ifnotexists fullname AS select */
{
                                                yygotominor.yy331 = new SqliteCreateTable(
                                                        *(yymsp[-5].minor.yy450),
                                                        *(yymsp[-3].minor.yy99),
                                                        yymsp[-2].minor.yy504->name1,
                                                        yymsp[-2].minor.yy504->name2,
                                                        yymsp[0].minor.yy377
                                                    );
                                                delete yymsp[-3].minor.yy99;
                                                delete yymsp[-5].minor.yy450;
                                                delete yymsp[-2].minor.yy504;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 31: /* cmd ::= CREATE temp TABLE ifnotexists nm DOT ID_TAB_NEW */
      case 133: /* cmd ::= CREATE temp VIEW ifnotexists nm DOT ID_VIEW_NEW */ yytestcase(yyruleno==133);
      case 346: /* cmd ::= CREATE temp TRIGGER ifnotexists nm DOT ID_TRIG_NEW */ yytestcase(yyruleno==346);
{  yy_destructor(yypParser,177,&yymsp[-5].minor);
  yy_destructor(yypParser,175,&yymsp[-2].minor);
}
        break;
      case 32: /* cmd ::= CREATE temp TABLE ifnotexists ID_DB|ID_TAB_NEW */
      case 134: /* cmd ::= CREATE temp VIEW ifnotexists ID_DB|ID_VIEW_NEW */ yytestcase(yyruleno==134);
      case 347: /* cmd ::= CREATE temp TRIGGER ifnotexists ID_DB|ID_TRIG_NEW */ yytestcase(yyruleno==347);
{  yy_destructor(yypParser,177,&yymsp[-3].minor);
}
        break;
      case 33: /* table_options ::= */
      case 178: /* dbnm ::= */ yytestcase(yyruleno==178);
      case 317: /* collate ::= */ yytestcase(yyruleno==317);
      case 400: /* vtabarg ::= */ yytestcase(yyruleno==400);
      case 404: /* anylist ::= */ yytestcase(yyruleno==404);
{yygotominor.yy287 = new QString();}
        break;
      case 34: /* table_options ::= WITHOUT nm */
      case 35: /* table_options ::= WITHOUT CTX_ROWID_KW */ yytestcase(yyruleno==35);
{
                                                if (yymsp[0].minor.yy287->toLower() != "rowid")
                                                    parserContext->errorAtToken(QString("Invalid table option: %1").arg(*(yymsp[0].minor.yy287)));

                                                yygotominor.yy287 = yymsp[0].minor.yy287;
                                            }
        break;
      case 38: /* temp ::= TEMP */
{yygotominor.yy450 = new int( (yymsp[0].minor.yy0->value.length() > 4) ? 2 : 1 );}
        break;
      case 39: /* temp ::= */
      case 149: /* distinct ::= */ yytestcase(yyruleno==149);
{yygotominor.yy450 = new int(0);}
        break;
      case 40: /* columnlist ::= columnlist COMMA column */
{
                                                yymsp[-2].minor.yy74->append(yymsp[0].minor.yy115);
                                                yygotominor.yy74 = yymsp[-2].minor.yy74;
                                                DONT_INHERIT_TOKENS("columnlist");
                                            }
        break;
      case 41: /* columnlist ::= column */
{
                                                yygotominor.yy74 = new ParserCreateTableColumnList();
                                                yygotominor.yy74->append(yymsp[0].minor.yy115);
                                            }
        break;
      case 42: /* column ::= columnid type carglist */
{
                                                yygotominor.yy115 = new SqliteCreateTable::Column(*(yymsp[-2].minor.yy287), yymsp[-1].minor.yy441, *(yymsp[0].minor.yy371));
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[0].minor.yy371;
                                                objectForTokens = yygotominor.yy115;
                                            }
        break;
      case 43: /* columnid ::= nm */
      case 44: /* columnid ::= ID_COL_NEW */ yytestcase(yyruleno==44);
      case 47: /* nm ::= id */ yytestcase(yyruleno==47);
      case 55: /* typename ::= ids */ yytestcase(yyruleno==55);
      case 179: /* dbnm ::= DOT nm */ yytestcase(yyruleno==179);
      case 318: /* collate ::= COLLATE ids */ yytestcase(yyruleno==318);
      case 319: /* collate ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==319);
{yygotominor.yy287 = yymsp[0].minor.yy287;}
        break;
      case 45: /* id ::= ID */
{
                                                yygotominor.yy287 = new QString(
                                                    stripObjName(
                                                        yymsp[0].minor.yy0->value,
                                                        parserContext->dialect
                                                    )
                                                );
                                            }
        break;
      case 46: /* ids ::= ID|STRING */
      case 49: /* nm ::= JOIN_KW */ yytestcase(yyruleno==49);
{yygotominor.yy287 = new QString(yymsp[0].minor.yy0->value);}
        break;
      case 48: /* nm ::= STRING */
{yygotominor.yy287 = new QString(stripString(yymsp[0].minor.yy0->value));}
        break;
      case 50: /* type ::= */
{yygotominor.yy441 = nullptr;}
        break;
      case 51: /* type ::= typetoken */
{yygotominor.yy441 = yymsp[0].minor.yy441;}
        break;
      case 52: /* typetoken ::= typename */
{
                                                yygotominor.yy441 = new SqliteColumnType(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy441;
                                            }
        break;
      case 53: /* typetoken ::= typename LP signed RP */
{
                                                yygotominor.yy441 = new SqliteColumnType(*(yymsp[-3].minor.yy287), *(yymsp[-1].minor.yy261));
                                                delete yymsp[-3].minor.yy287;
                                                delete yymsp[-1].minor.yy261;
                                                objectForTokens = yygotominor.yy441;
                                            }
        break;
      case 54: /* typetoken ::= typename LP signed COMMA signed RP */
{
                                                yygotominor.yy441 = new SqliteColumnType(*(yymsp[-5].minor.yy287), *(yymsp[-3].minor.yy261), *(yymsp[-1].minor.yy261));
                                                delete yymsp[-5].minor.yy287;
                                                delete yymsp[-3].minor.yy261;
                                                delete yymsp[-1].minor.yy261;
                                                objectForTokens = yygotominor.yy441;
                                            }
        break;
      case 56: /* typename ::= typename ids */
      case 57: /* typename ::= ID_COL_TYPE */ yytestcase(yyruleno==57);
{
                                                yymsp[-1].minor.yy287->append(" " + *(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                yygotominor.yy287 = yymsp[-1].minor.yy287;
                                            }
        break;
      case 58: /* signed ::= plus_num */
      case 59: /* signed ::= minus_num */ yytestcase(yyruleno==59);
      case 332: /* nmnum ::= plus_num */ yytestcase(yyruleno==332);
      case 337: /* plus_num ::= PLUS number */ yytestcase(yyruleno==337);
      case 338: /* plus_num ::= number */ yytestcase(yyruleno==338);
{yygotominor.yy261 = yymsp[0].minor.yy261;}
        break;
      case 60: /* carglist ::= carglist ccons */
{
                                                yymsp[-1].minor.yy371->append(yymsp[0].minor.yy368);
                                                yygotominor.yy371 = yymsp[-1].minor.yy371;
                                                DONT_INHERIT_TOKENS("carglist");
                                            }
        break;
      case 61: /* carglist ::= */
{yygotominor.yy371 = new ParserCreateTableColumnConstraintList();}
        break;
      case 62: /* ccons ::= CONSTRAINT nm */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initDefNameOnly(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 63: /* ccons ::= DEFAULT term */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initDefTerm(*(yymsp[0].minor.yy261));
                                                delete yymsp[0].minor.yy261;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 64: /* ccons ::= DEFAULT LP expr RP */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initDefExpr(yymsp[-1].minor.yy512);
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 65: /* ccons ::= DEFAULT PLUS term */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initDefTerm(*(yymsp[0].minor.yy261), false);
                                                delete yymsp[0].minor.yy261;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 66: /* ccons ::= DEFAULT MINUS term */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initDefTerm(*(yymsp[0].minor.yy261), true);
                                                delete yymsp[0].minor.yy261;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 67: /* ccons ::= DEFAULT id */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initDefId(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 68: /* ccons ::= DEFAULT CTIME_KW */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initDefCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 69: /* ccons ::= NULL onconf */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initNull(*(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 70: /* ccons ::= NOT NULL onconf */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initNotNull(*(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 71: /* ccons ::= PRIMARY KEY sortorder onconf autoinc */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initPk(*(yymsp[-2].minor.yy197), *(yymsp[-1].minor.yy418), *(yymsp[0].minor.yy99));
                                                delete yymsp[-2].minor.yy197;
                                                delete yymsp[0].minor.yy99;
                                                delete yymsp[-1].minor.yy418;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 72: /* ccons ::= UNIQUE onconf */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initUnique(*(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 73: /* ccons ::= CHECK LP expr RP */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initCheck(yymsp[-1].minor.yy512);
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 74: /* ccons ::= REFERENCES nm idxlist_opt refargs */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initFk(*(yymsp[-2].minor.yy287), *(yymsp[-1].minor.yy127), *(yymsp[0].minor.yy360));
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[0].minor.yy360;
                                                delete yymsp[-1].minor.yy127;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 75: /* ccons ::= defer_subclause */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initDefer(yymsp[0].minor.yy489->initially, yymsp[0].minor.yy489->deferrable);
                                                delete yymsp[0].minor.yy489;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 76: /* ccons ::= COLLATE ids */
      case 77: /* ccons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==77);
      case 78: /* ccons ::= COLLATE ID_COLLATE */ yytestcase(yyruleno==78);
      case 79: /* ccons ::= REFERENCES ID_TAB */ yytestcase(yyruleno==79);
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initColl(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy368;
                                            }
        break;
      case 80: /* ccons ::= CHECK LP RP */
{
                                                yygotominor.yy368 = new SqliteCreateTable::Column::Constraint();
                                                yygotominor.yy368->initCheck();
                                                objectForTokens = yygotominor.yy368;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 81: /* term ::= NULL */
{
                                                yygotominor.yy261 = new QVariant();
                                            }
        break;
      case 82: /* term ::= INTEGER */
{
                                                yygotominor.yy261 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toLongLong());
                                            }
        break;
      case 83: /* term ::= FLOAT */
{
                                                yygotominor.yy261 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());
                                            }
        break;
      case 84: /* term ::= STRING|BLOB */
      case 334: /* nmnum ::= ON */ yytestcase(yyruleno==334);
      case 335: /* nmnum ::= DELETE */ yytestcase(yyruleno==335);
      case 336: /* nmnum ::= DEFAULT */ yytestcase(yyruleno==336);
{yygotominor.yy261 = new QVariant(yymsp[0].minor.yy0->value);}
        break;
      case 87: /* refargs ::= */
{yygotominor.yy360 = new ParserFkConditionList();}
        break;
      case 88: /* refargs ::= refargs refarg */
{
                                                yymsp[-1].minor.yy360->append(yymsp[0].minor.yy315);
                                                yygotominor.yy360 = yymsp[-1].minor.yy360;
                                                DONT_INHERIT_TOKENS("refargs");
                                            }
        break;
      case 89: /* refarg ::= MATCH nm */
{
                                                yygotominor.yy315 = new SqliteForeignKey::Condition(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                            }
        break;
      case 90: /* refarg ::= ON INSERT refact */
{yygotominor.yy315 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::INSERT, *(yymsp[0].minor.yy72)); delete yymsp[0].minor.yy72;}
        break;
      case 91: /* refarg ::= ON DELETE refact */
{yygotominor.yy315 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::DELETE, *(yymsp[0].minor.yy72)); delete yymsp[0].minor.yy72;}
        break;
      case 92: /* refarg ::= ON UPDATE refact */
      case 93: /* refarg ::= MATCH ID_FK_MATCH */ yytestcase(yyruleno==93);
{yygotominor.yy315 = new SqliteForeignKey::Condition(SqliteForeignKey::Condition::UPDATE, *(yymsp[0].minor.yy72)); delete yymsp[0].minor.yy72;}
        break;
      case 94: /* refact ::= SET NULL */
{yygotominor.yy72 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_NULL);}
        break;
      case 95: /* refact ::= SET DEFAULT */
{yygotominor.yy72 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::SET_DEFAULT);}
        break;
      case 96: /* refact ::= CASCADE */
{yygotominor.yy72 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::CASCADE);}
        break;
      case 97: /* refact ::= RESTRICT */
{yygotominor.yy72 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::RESTRICT);}
        break;
      case 98: /* refact ::= NO ACTION */
{yygotominor.yy72 = new SqliteForeignKey::Condition::Reaction(SqliteForeignKey::Condition::NO_ACTION);}
        break;
      case 99: /* defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy489 = new ParserDeferSubClause(SqliteDeferrable::NOT_DEFERRABLE, *(yymsp[0].minor.yy376));
                                                delete yymsp[0].minor.yy376;
                                            }
        break;
      case 100: /* defer_subclause ::= DEFERRABLE init_deferred_pred_opt */
{
                                                yygotominor.yy489 = new ParserDeferSubClause(SqliteDeferrable::DEFERRABLE, *(yymsp[0].minor.yy376));
                                                delete yymsp[0].minor.yy376;
                                            }
        break;
      case 101: /* init_deferred_pred_opt ::= */
{yygotominor.yy376 = new SqliteInitially(SqliteInitially::null);}
        break;
      case 102: /* init_deferred_pred_opt ::= INITIALLY DEFERRED */
{yygotominor.yy376 = new SqliteInitially(SqliteInitially::DEFERRED);}
        break;
      case 103: /* init_deferred_pred_opt ::= INITIALLY IMMEDIATE */
{yygotominor.yy376 = new SqliteInitially(SqliteInitially::IMMEDIATE);}
        break;
      case 104: /* conslist_opt ::= */
{yygotominor.yy173 = new ParserCreateTableConstraintList();}
        break;
      case 105: /* conslist_opt ::= COMMA conslist */
{yygotominor.yy173 = yymsp[0].minor.yy173;}
        break;
      case 106: /* conslist ::= conslist tconscomma tcons */
{
                                                yymsp[0].minor.yy182->afterComma = *(yymsp[-1].minor.yy99);
                                                yymsp[-2].minor.yy173->append(yymsp[0].minor.yy182);
                                                yygotominor.yy173 = yymsp[-2].minor.yy173;
                                                delete yymsp[-1].minor.yy99;
                                                DONT_INHERIT_TOKENS("conslist");
                                            }
        break;
      case 107: /* conslist ::= tcons */
{
                                                yygotominor.yy173 = new ParserCreateTableConstraintList();
                                                yygotominor.yy173->append(yymsp[0].minor.yy182);
                                            }
        break;
      case 110: /* tcons ::= CONSTRAINT nm */
{
                                                yygotominor.yy182 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy182->initNameOnly(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy182;
                                            }
        break;
      case 111: /* tcons ::= PRIMARY KEY LP idxlist autoinc RP onconf */
{
                                                yygotominor.yy182 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy182->initPk(*(yymsp[-3].minor.yy127), *(yymsp[-2].minor.yy99), *(yymsp[0].minor.yy418));
                                                delete yymsp[-2].minor.yy99;
                                                delete yymsp[0].minor.yy418;
                                                delete yymsp[-3].minor.yy127;
                                                objectForTokens = yygotominor.yy182;
                                            }
        break;
      case 112: /* tcons ::= UNIQUE LP idxlist RP onconf */
{
                                                yygotominor.yy182 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy182->initUnique(*(yymsp[-2].minor.yy127), *(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                                delete yymsp[-2].minor.yy127;
                                                objectForTokens = yygotominor.yy182;
                                            }
        break;
      case 113: /* tcons ::= CHECK LP expr RP onconf */
{
                                                yygotominor.yy182 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy182->initCheck(yymsp[-2].minor.yy512, *(yymsp[0].minor.yy418));
                                                objectForTokens = yygotominor.yy182;
                                            }
        break;
      case 114: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES nm idxlist_opt refargs defer_subclause_opt */
      case 115: /* tcons ::= CONSTRAINT ID_CONSTR */ yytestcase(yyruleno==115);
      case 116: /* tcons ::= FOREIGN KEY LP idxlist RP REFERENCES ID_TAB */ yytestcase(yyruleno==116);
{
                                                yygotominor.yy182 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy182->initFk(
                                                    *(yymsp[-6].minor.yy127),
                                                    *(yymsp[-3].minor.yy287),
                                                    *(yymsp[-2].minor.yy127),
                                                    *(yymsp[-1].minor.yy360),
                                                    yymsp[0].minor.yy489->initially,
                                                    yymsp[0].minor.yy489->deferrable
                                                );
                                                delete yymsp[-3].minor.yy287;
                                                delete yymsp[-1].minor.yy360;
                                                delete yymsp[0].minor.yy489;
                                                delete yymsp[-2].minor.yy127;
                                                delete yymsp[-6].minor.yy127;
                                                objectForTokens = yygotominor.yy182;
                                            }
        break;
      case 117: /* tcons ::= CHECK LP RP onconf */
{
                                                yygotominor.yy182 = new SqliteCreateTable::Constraint();
                                                yygotominor.yy182->initCheck();
                                                objectForTokens = yygotominor.yy182;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                              yy_destructor(yypParser,198,&yymsp[0].minor);
}
        break;
      case 118: /* defer_subclause_opt ::= */
{yygotominor.yy489 = new ParserDeferSubClause(SqliteDeferrable::null, SqliteInitially::null);}
        break;
      case 119: /* defer_subclause_opt ::= defer_subclause */
{yygotominor.yy489 = yymsp[0].minor.yy489;}
        break;
      case 120: /* onconf ::= */
      case 122: /* orconf ::= */ yytestcase(yyruleno==122);
{yygotominor.yy418 = new SqliteConflictAlgo(SqliteConflictAlgo::null);}
        break;
      case 121: /* onconf ::= ON CONFLICT resolvetype */
      case 123: /* orconf ::= OR resolvetype */ yytestcase(yyruleno==123);
{yygotominor.yy418 = yymsp[0].minor.yy418;}
        break;
      case 124: /* resolvetype ::= raisetype */
      case 125: /* resolvetype ::= IGNORE */ yytestcase(yyruleno==125);
      case 126: /* resolvetype ::= REPLACE */ yytestcase(yyruleno==126);
{yygotominor.yy418 = new SqliteConflictAlgo(sqliteConflictAlgo(yymsp[0].minor.yy0->value));}
        break;
      case 127: /* cmd ::= DROP TABLE ifexists fullname */
{
                                                yygotominor.yy331 = new SqliteDropTable(*(yymsp[-1].minor.yy99), yymsp[0].minor.yy504->name1, yymsp[0].minor.yy504->name2);
                                                delete yymsp[-1].minor.yy99;
                                                delete yymsp[0].minor.yy504;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 128: /* cmd ::= DROP TABLE ifexists nm DOT ID_TAB */
      case 129: /* cmd ::= DROP TABLE ifexists ID_DB|ID_TAB */ yytestcase(yyruleno==129);
      case 136: /* cmd ::= DROP VIEW ifexists nm DOT ID_VIEW */ yytestcase(yyruleno==136);
      case 137: /* cmd ::= DROP VIEW ifexists ID_DB|ID_VIEW */ yytestcase(yyruleno==137);
      case 173: /* singlesrc ::= nm DOT ID_TAB */ yytestcase(yyruleno==173);
      case 174: /* singlesrc ::= ID_DB|ID_TAB */ yytestcase(yyruleno==174);
      case 208: /* delete_stmt ::= DELETE FROM nm DOT ID_TAB */ yytestcase(yyruleno==208);
      case 209: /* delete_stmt ::= DELETE FROM ID_DB|ID_TAB */ yytestcase(yyruleno==209);
      case 215: /* update_stmt ::= UPDATE orconf nm DOT ID_TAB */ yytestcase(yyruleno==215);
      case 216: /* update_stmt ::= UPDATE orconf ID_DB|ID_TAB */ yytestcase(yyruleno==216);
      case 286: /* exprx ::= nm DOT ID_TAB|ID_COL */ yytestcase(yyruleno==286);
      case 307: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm DOT ID_IDX_NEW */ yytestcase(yyruleno==307);
      case 308: /* cmd ::= CREATE uniqueflag INDEX ifnotexists ID_DB|ID_IDX_NEW */ yytestcase(yyruleno==308);
      case 321: /* cmd ::= DROP INDEX ifexists nm DOT ID_IDX */ yytestcase(yyruleno==321);
      case 322: /* cmd ::= DROP INDEX ifexists ID_DB|ID_IDX */ yytestcase(yyruleno==322);
      case 330: /* cmd ::= PRAGMA nm DOT ID_PRAGMA */ yytestcase(yyruleno==330);
      case 331: /* cmd ::= PRAGMA ID_DB|ID_PRAGMA */ yytestcase(yyruleno==331);
      case 369: /* cmd ::= DROP TRIGGER ifexists nm DOT ID_TRIG */ yytestcase(yyruleno==369);
      case 370: /* cmd ::= DROP TRIGGER ifexists ID_DB|ID_TRIG */ yytestcase(yyruleno==370);
      case 380: /* cmd ::= REINDEX nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==380);
      case 381: /* cmd ::= REINDEX ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==381);
      case 384: /* cmd ::= ANALYZE nm DOT ID_TAB|ID_IDX */ yytestcase(yyruleno==384);
      case 385: /* cmd ::= ANALYZE ID_DB|ID_IDX|ID_TAB */ yytestcase(yyruleno==385);
      case 389: /* cmd ::= ALTER TABLE nm DOT ID_TAB */ yytestcase(yyruleno==389);
      case 390: /* cmd ::= ALTER TABLE ID_DB|ID_TAB */ yytestcase(yyruleno==390);
      case 396: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm DOT ID_TAB_NEW */ yytestcase(yyruleno==396);
      case 397: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists ID_DB|ID_TAB_NEW */ yytestcase(yyruleno==397);
{  yy_destructor(yypParser,175,&yymsp[-2].minor);
}
        break;
      case 132: /* cmd ::= CREATE temp VIEW ifnotexists fullname AS select */
{
                                                yygotominor.yy331 = new SqliteCreateView(*(yymsp[-5].minor.yy450), *(yymsp[-3].minor.yy99), yymsp[-2].minor.yy504->name1, yymsp[-2].minor.yy504->name2, yymsp[0].minor.yy377);
                                                delete yymsp[-5].minor.yy450;
                                                delete yymsp[-3].minor.yy99;
                                                delete yymsp[-2].minor.yy504;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 135: /* cmd ::= DROP VIEW ifexists fullname */
{
                                                yygotominor.yy331 = new SqliteDropView(*(yymsp[-1].minor.yy99), yymsp[0].minor.yy504->name1, yymsp[0].minor.yy504->name2);
                                                delete yymsp[-1].minor.yy99;
                                                delete yymsp[0].minor.yy504;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 138: /* cmd ::= select_stmt */
      case 206: /* cmd ::= delete_stmt */ yytestcase(yyruleno==206);
      case 213: /* cmd ::= update_stmt */ yytestcase(yyruleno==213);
      case 223: /* cmd ::= insert_stmt */ yytestcase(yyruleno==223);
{
                                                yygotominor.yy331 = yymsp[0].minor.yy331;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 139: /* select_stmt ::= select */
{
                                                yygotominor.yy331 = yymsp[0].minor.yy377;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 140: /* select ::= oneselect */
{
                                                yygotominor.yy377 = SqliteSelect::append(yymsp[0].minor.yy150);
                                                objectForTokens = yygotominor.yy377;
                                            }
        break;
      case 141: /* select ::= select multiselect_op oneselect */
{
                                                yygotominor.yy377 = SqliteSelect::append(yymsp[-2].minor.yy377, *(yymsp[-1].minor.yy254), yymsp[0].minor.yy150);
                                                delete yymsp[-1].minor.yy254;
                                                objectForTokens = yygotominor.yy377;
                                            }
        break;
      case 142: /* multiselect_op ::= UNION */
{yygotominor.yy254 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION);}
        break;
      case 143: /* multiselect_op ::= UNION ALL */
{yygotominor.yy254 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::UNION_ALL);}
        break;
      case 144: /* multiselect_op ::= EXCEPT */
{yygotominor.yy254 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::EXCEPT);}
        break;
      case 145: /* multiselect_op ::= INTERSECT */
{yygotominor.yy254 = new SqliteSelect::CompoundOperator(SqliteSelect::CompoundOperator::INTERSECT);}
        break;
      case 146: /* oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt */
{
                                                yygotominor.yy150 = new SqliteSelect::Core(
                                                        *(yymsp[-7].minor.yy450),
                                                        *(yymsp[-6].minor.yy181),
                                                        yymsp[-5].minor.yy543,
                                                        yymsp[-4].minor.yy512,
                                                        *(yymsp[-3].minor.yy455),
                                                        yymsp[-2].minor.yy512,
                                                        *(yymsp[-1].minor.yy147),
                                                        yymsp[0].minor.yy516
                                                    );
                                                delete yymsp[-6].minor.yy181;
                                                delete yymsp[-7].minor.yy450;
                                                delete yymsp[-3].minor.yy455;
                                                objectForTokens = yygotominor.yy150;
                                            }
        break;
      case 147: /* distinct ::= DISTINCT */
{yygotominor.yy450 = new int(1);}
        break;
      case 148: /* distinct ::= ALL */
{yygotominor.yy450 = new int(2);}
        break;
      case 150: /* sclp ::= selcollist COMMA */
{yygotominor.yy181 = yymsp[-1].minor.yy181;}
        break;
      case 151: /* sclp ::= */
{yygotominor.yy181 = new ParserResultColumnList();}
        break;
      case 152: /* selcollist ::= sclp expr as */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        yymsp[-1].minor.yy512,
                                                        yymsp[0].minor.yy361 ? yymsp[0].minor.yy361->asKw : false,
                                                        yymsp[0].minor.yy361 ? yymsp[0].minor.yy361->name : QString::null
                                                    );

                                                yymsp[-2].minor.yy181->append(obj);
                                                yygotominor.yy181 = yymsp[-2].minor.yy181;
                                                delete yymsp[0].minor.yy361;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 153: /* selcollist ::= sclp STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(true);

                                                yymsp[-1].minor.yy181->append(obj);
                                                yygotominor.yy181 = yymsp[-1].minor.yy181;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 154: /* selcollist ::= sclp nm DOT STAR */
{
                                                SqliteSelect::Core::ResultColumn* obj =
                                                    new SqliteSelect::Core::ResultColumn(
                                                        true,
                                                        *(yymsp[-2].minor.yy287)
                                                    );
                                                yymsp[-3].minor.yy181->append(obj);
                                                yygotominor.yy181 = yymsp[-3].minor.yy181;
                                                delete yymsp[-2].minor.yy287;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sclp");
                                            }
        break;
      case 155: /* selcollist ::= sclp */
      case 156: /* selcollist ::= sclp ID_TAB DOT STAR */ yytestcase(yyruleno==156);
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy181 = yymsp[0].minor.yy181;
                                            }
        break;
      case 157: /* as ::= AS nm */
{
                                                yygotominor.yy361 = new ParserStubAlias(*(yymsp[0].minor.yy287), true);
                                                delete yymsp[0].minor.yy287;
                                            }
        break;
      case 158: /* as ::= ids */
      case 159: /* as ::= AS ID_ALIAS */ yytestcase(yyruleno==159);
      case 160: /* as ::= ID_ALIAS */ yytestcase(yyruleno==160);
{
                                                yygotominor.yy361 = new ParserStubAlias(*(yymsp[0].minor.yy287), false);
                                                delete yymsp[0].minor.yy287;
                                            }
        break;
      case 161: /* as ::= */
{yygotominor.yy361 = nullptr;}
        break;
      case 162: /* from ::= */
{yygotominor.yy543 = nullptr;}
        break;
      case 163: /* from ::= FROM joinsrc */
{yygotominor.yy543 = yymsp[0].minor.yy543;}
        break;
      case 164: /* joinsrc ::= singlesrc seltablist */
{
                                                yygotominor.yy543 = new SqliteSelect::Core::JoinSource(
                                                        yymsp[-1].minor.yy57,
                                                        *(yymsp[0].minor.yy3)
                                                    );
                                                delete yymsp[0].minor.yy3;
                                                objectForTokens = yygotominor.yy543;
                                            }
        break;
      case 165: /* joinsrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy543 = new SqliteSelect::Core::JoinSource();
                                                objectForTokens = yygotominor.yy543;
                                            }
        break;
      case 166: /* seltablist ::= seltablist joinop singlesrc joinconstr_opt */
{
                                                SqliteSelect::Core::JoinSourceOther* src =
                                                    new SqliteSelect::Core::JoinSourceOther(yymsp[-2].minor.yy189, yymsp[-1].minor.yy57, yymsp[0].minor.yy199);

                                                yymsp[-3].minor.yy3->append(src);
                                                yygotominor.yy3 = yymsp[-3].minor.yy3;
                                                objectForTokens = src;
                                                DONT_INHERIT_TOKENS("seltablist");
                                            }
        break;
      case 167: /* seltablist ::= */
{
                                                yygotominor.yy3 = new ParserOtherSourceList();
                                            }
        break;
      case 168: /* singlesrc ::= nm dbnm as indexed_opt */
{
                                                yygotominor.yy57 = new SqliteSelect::Core::SingleSource(
                                                        *(yymsp[-3].minor.yy287),
                                                        *(yymsp[-2].minor.yy287),
                                                        yymsp[-1].minor.yy361 ? yymsp[-1].minor.yy361->asKw : false,
                                                        yymsp[-1].minor.yy361 ? yymsp[-1].minor.yy361->name : QString::null,
                                                        yymsp[0].minor.yy16 ? yymsp[0].minor.yy16->notIndexedKw : false,
                                                        yymsp[0].minor.yy16 ? yymsp[0].minor.yy16->indexedBy : QString::null
                                                    );
                                                delete yymsp[-3].minor.yy287;
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[-1].minor.yy361;
                                                objectForTokens = yygotominor.yy57;
                                            }
        break;
      case 169: /* singlesrc ::= LP select RP as */
{
                                                yygotominor.yy57 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy377,
                                                        yymsp[0].minor.yy361 ? yymsp[0].minor.yy361->asKw : false,
                                                        yymsp[0].minor.yy361 ? yymsp[0].minor.yy361->name : QString::null
                                                    );
                                                delete yymsp[0].minor.yy361;
                                                objectForTokens = yygotominor.yy57;
                                            }
        break;
      case 170: /* singlesrc ::= LP joinsrc RP as */
{
                                                yygotominor.yy57 = new SqliteSelect::Core::SingleSource(
                                                        yymsp[-2].minor.yy543,
                                                        yymsp[0].minor.yy361 ? yymsp[0].minor.yy361->asKw : false,
                                                        yymsp[0].minor.yy361 ? yymsp[0].minor.yy361->name : QString::null
                                                    );
                                                delete yymsp[0].minor.yy361;
                                                objectForTokens = yygotominor.yy57;
                                            }
        break;
      case 171: /* singlesrc ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy57 = new SqliteSelect::Core::SingleSource();
                                                objectForTokens = yygotominor.yy57;
                                            }
        break;
      case 172: /* singlesrc ::= nm DOT */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy57 = new SqliteSelect::Core::SingleSource();
                                                yygotominor.yy57->database = *(yymsp[-1].minor.yy287);
                                                delete yymsp[-1].minor.yy287;
                                                objectForTokens = yygotominor.yy57;
                                            }
        break;
      case 175: /* joinconstr_opt ::= ON expr */
{
                                                yygotominor.yy199 = new SqliteSelect::Core::JoinConstraint(yymsp[0].minor.yy512);
                                                objectForTokens = yygotominor.yy199;
                                            }
        break;
      case 176: /* joinconstr_opt ::= USING LP inscollist RP */
{
                                                yygotominor.yy199 = new SqliteSelect::Core::JoinConstraint(*(yymsp[-1].minor.yy303));
                                                delete yymsp[-1].minor.yy303;
                                                objectForTokens = yygotominor.yy199;
                                            }
        break;
      case 177: /* joinconstr_opt ::= */
{yygotominor.yy199 = nullptr;}
        break;
      case 180: /* fullname ::= nm dbnm */
{
                                                yygotominor.yy504 = new ParserFullName();
                                                yygotominor.yy504->name1 = *(yymsp[-1].minor.yy287);
                                                yygotominor.yy504->name2 = *(yymsp[0].minor.yy287);
                                                delete yymsp[-1].minor.yy287;
                                                delete yymsp[0].minor.yy287;
                                            }
        break;
      case 181: /* joinop ::= COMMA */
{
                                                yygotominor.yy189 = new SqliteSelect::Core::JoinOp(true);
                                                objectForTokens = yygotominor.yy189;
                                            }
        break;
      case 182: /* joinop ::= JOIN */
{
                                                yygotominor.yy189 = new SqliteSelect::Core::JoinOp(false);
                                                objectForTokens = yygotominor.yy189;
                                            }
        break;
      case 183: /* joinop ::= JOIN_KW JOIN */
{
                                                yygotominor.yy189 = new SqliteSelect::Core::JoinOp(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy189;
                                            }
        break;
      case 184: /* joinop ::= JOIN_KW nm JOIN */
{
                                                yygotominor.yy189 = new SqliteSelect::Core::JoinOp(yymsp[-2].minor.yy0->value, *(yymsp[-1].minor.yy287));
                                                delete yymsp[-1].minor.yy287;
                                                objectForTokens = yygotominor.yy189;
                                            }
        break;
      case 185: /* joinop ::= JOIN_KW nm nm JOIN */
      case 186: /* joinop ::= ID_JOIN_OPTS */ yytestcase(yyruleno==186);
{
                                                yygotominor.yy189 = new SqliteSelect::Core::JoinOp(yymsp[-3].minor.yy0->value, *(yymsp[-2].minor.yy287), *(yymsp[-1].minor.yy287));
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[-2].minor.yy287;
                                                objectForTokens = yygotominor.yy189;
                                            }
        break;
      case 187: /* indexed_opt ::= */
{yygotominor.yy16 = nullptr;}
        break;
      case 188: /* indexed_opt ::= INDEXED BY nm */
{
                                                yygotominor.yy16 = new ParserIndexedBy(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                            }
        break;
      case 189: /* indexed_opt ::= NOT INDEXED */
      case 190: /* indexed_opt ::= INDEXED BY ID_IDX */ yytestcase(yyruleno==190);
{yygotominor.yy16 = new ParserIndexedBy(true);}
        break;
      case 191: /* orderby_opt ::= */
{yygotominor.yy147 = new ParserOrderByList();}
        break;
      case 192: /* orderby_opt ::= ORDER BY sortlist */
{yygotominor.yy147 = yymsp[0].minor.yy147;}
        break;
      case 193: /* sortlist ::= sortlist COMMA expr sortorder */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-1].minor.yy512, *(yymsp[0].minor.yy197));
                                                yymsp[-3].minor.yy147->append(obj);
                                                yygotominor.yy147 = yymsp[-3].minor.yy147;
                                                delete yymsp[0].minor.yy197;
                                                objectForTokens = obj;
                                                DONT_INHERIT_TOKENS("sortlist");
                                            }
        break;
      case 194: /* sortlist ::= expr sortorder */
{
                                                SqliteOrderBy* obj = new SqliteOrderBy(yymsp[-1].minor.yy512, *(yymsp[0].minor.yy197));
                                                yygotominor.yy147 = new ParserOrderByList();
                                                yygotominor.yy147->append(obj);
                                                delete yymsp[0].minor.yy197;
                                                objectForTokens = obj;
                                            }
        break;
      case 195: /* sortorder ::= ASC */
{yygotominor.yy197 = new SqliteSortOrder(SqliteSortOrder::ASC);}
        break;
      case 196: /* sortorder ::= DESC */
{yygotominor.yy197 = new SqliteSortOrder(SqliteSortOrder::DESC);}
        break;
      case 197: /* sortorder ::= */
{yygotominor.yy197 = new SqliteSortOrder(SqliteSortOrder::null);}
        break;
      case 198: /* groupby_opt ::= */
      case 302: /* exprlist ::= */ yytestcase(yyruleno==302);
{yygotominor.yy455 = new ParserExprList();}
        break;
      case 199: /* groupby_opt ::= GROUP BY nexprlist */
      case 301: /* exprlist ::= nexprlist */ yytestcase(yyruleno==301);
{yygotominor.yy455 = yymsp[0].minor.yy455;}
        break;
      case 200: /* having_opt ::= */
      case 210: /* where_opt ::= */ yytestcase(yyruleno==210);
      case 298: /* case_else ::= */ yytestcase(yyruleno==298);
      case 300: /* case_operand ::= */ yytestcase(yyruleno==300);
      case 358: /* when_clause ::= */ yytestcase(yyruleno==358);
      case 373: /* key_opt ::= */ yytestcase(yyruleno==373);
{yygotominor.yy512 = nullptr;}
        break;
      case 201: /* having_opt ::= HAVING expr */
      case 211: /* where_opt ::= WHERE expr */ yytestcase(yyruleno==211);
      case 290: /* expr ::= exprx */ yytestcase(yyruleno==290);
      case 297: /* case_else ::= ELSE expr */ yytestcase(yyruleno==297);
      case 299: /* case_operand ::= exprx */ yytestcase(yyruleno==299);
      case 359: /* when_clause ::= WHEN expr */ yytestcase(yyruleno==359);
      case 374: /* key_opt ::= KEY expr */ yytestcase(yyruleno==374);
{yygotominor.yy512 = yymsp[0].minor.yy512;}
        break;
      case 202: /* limit_opt ::= */
{yygotominor.yy516 = nullptr;}
        break;
      case 203: /* limit_opt ::= LIMIT expr */
{
                                                yygotominor.yy516 = new SqliteLimit(yymsp[0].minor.yy512);
                                                objectForTokens = yygotominor.yy516;
                                            }
        break;
      case 204: /* limit_opt ::= LIMIT expr OFFSET expr */
{
                                                yygotominor.yy516 = new SqliteLimit(yymsp[-2].minor.yy512, yymsp[0].minor.yy512, true);
                                                objectForTokens = yygotominor.yy516;
                                            }
        break;
      case 205: /* limit_opt ::= LIMIT expr COMMA expr */
{
                                                yygotominor.yy516 = new SqliteLimit(yymsp[-2].minor.yy512, yymsp[0].minor.yy512, false);
                                                objectForTokens = yygotominor.yy516;
                                            }
        break;
      case 207: /* delete_stmt ::= DELETE FROM fullname indexed_opt where_opt */
{
                                                if (yymsp[-1].minor.yy16)
                                                {
                                                    if (!yymsp[-1].minor.yy16->indexedBy.isNull())
                                                    {
                                                        yygotominor.yy331 = new SqliteDelete(
                                                                yymsp[-2].minor.yy504->name1,
                                                                yymsp[-2].minor.yy504->name2,
                                                                yymsp[-1].minor.yy16->indexedBy,
                                                                yymsp[0].minor.yy512
                                                            );
                                                    }
                                                    else
                                                    {
                                                        yygotominor.yy331 = new SqliteDelete(
                                                                yymsp[-2].minor.yy504->name1,
                                                                yymsp[-2].minor.yy504->name2,
                                                                yymsp[-1].minor.yy16->notIndexedKw,
                                                                yymsp[0].minor.yy512
                                                            );
                                                    }
                                                }
                                                else
                                                {
                                                    yygotominor.yy331 = new SqliteDelete(
                                                            yymsp[-2].minor.yy504->name1,
                                                            yymsp[-2].minor.yy504->name2,
                                                            false,
                                                            yymsp[0].minor.yy512
                                                        );
                                                }
                                                delete yymsp[-2].minor.yy504;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 212: /* where_opt ::= WHERE */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy512 = new SqliteExpr();
                                            }
        break;
      case 214: /* update_stmt ::= UPDATE orconf fullname indexed_opt SET setlist where_opt */
{
                                                yygotominor.yy331 = new SqliteUpdate(
                                                        *(yymsp[-5].minor.yy418),
                                                        yymsp[-4].minor.yy504->name1,
                                                        yymsp[-4].minor.yy504->name2,
                                                        yymsp[-3].minor.yy16 ? yymsp[-3].minor.yy16->notIndexedKw : false,
                                                        yymsp[-3].minor.yy16 ? yymsp[-3].minor.yy16->indexedBy : QString::null,
                                                        *(yymsp[-1].minor.yy73),
                                                        yymsp[0].minor.yy512
                                                    );
                                                delete yymsp[-5].minor.yy418;
                                                delete yymsp[-4].minor.yy504;
                                                delete yymsp[-1].minor.yy73;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 217: /* setlist ::= setlist COMMA nm EQ expr */
{
                                                yymsp[-4].minor.yy73->append(ParserSetValue(*(yymsp[-2].minor.yy287), yymsp[0].minor.yy512));
                                                yygotominor.yy73 = yymsp[-4].minor.yy73;
                                                delete yymsp[-2].minor.yy287;
                                                DONT_INHERIT_TOKENS("setlist");
                                            }
        break;
      case 218: /* setlist ::= nm EQ expr */
{
                                                yygotominor.yy73 = new ParserSetValueList();
                                                yygotominor.yy73->append(ParserSetValue(*(yymsp[-2].minor.yy287), yymsp[0].minor.yy512));
                                                delete yymsp[-2].minor.yy287;
                                            }
        break;
      case 219: /* setlist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy73 = new ParserSetValueList();
                                            }
        break;
      case 220: /* setlist ::= setlist COMMA */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy73 = yymsp[-1].minor.yy73;
                                            }
        break;
      case 221: /* setlist ::= setlist COMMA ID_COL */
      case 222: /* setlist ::= ID_COL */ yytestcase(yyruleno==222);
{  yy_destructor(yypParser,241,&yymsp[-2].minor);
}
        break;
      case 224: /* insert_stmt ::= insert_cmd INTO fullname inscollist_opt valuelist */
{
                                                yygotominor.yy331 = new SqliteInsert(
                                                        yymsp[-4].minor.yy312->replace,
                                                        yymsp[-4].minor.yy312->orConflict,
                                                        yymsp[-2].minor.yy504->name1,
                                                        yymsp[-2].minor.yy504->name2,
                                                        *(yymsp[-1].minor.yy303),
                                                        *(yymsp[0].minor.yy262)
                                                    );
                                                delete yymsp[-2].minor.yy504;
                                                delete yymsp[-4].minor.yy312;
                                                delete yymsp[0].minor.yy262;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 225: /* insert_stmt ::= insert_cmd INTO fullname inscollist_opt select */
{
                                                yygotominor.yy331 = new SqliteInsert(
                                                        yymsp[-4].minor.yy312->replace,
                                                        yymsp[-4].minor.yy312->orConflict,
                                                        yymsp[-2].minor.yy504->name1,
                                                        yymsp[-2].minor.yy504->name2,
                                                        *(yymsp[-1].minor.yy303),
                                                        yymsp[0].minor.yy377
                                                    );
                                                delete yymsp[-2].minor.yy504;
                                                delete yymsp[-4].minor.yy312;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 226: /* insert_stmt ::= insert_cmd INTO fullname inscollist_opt DEFAULT VALUES */
{
                                                yygotominor.yy331 = new SqliteInsert(
                                                        yymsp[-5].minor.yy312->replace,
                                                        yymsp[-5].minor.yy312->orConflict,
                                                        yymsp[-3].minor.yy504->name1,
                                                        yymsp[-3].minor.yy504->name2,
                                                        *(yymsp[-2].minor.yy303)
                                                    );
                                                delete yymsp[-3].minor.yy504;
                                                delete yymsp[-5].minor.yy312;
                                                // since it's used in trigger:
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 227: /* insert_stmt ::= insert_cmd INTO ID_DB|ID_TAB */
{  yy_destructor(yypParser,243,&yymsp[-2].minor);
}
        break;
      case 228: /* insert_stmt ::= insert_cmd INTO nm DOT ID_TAB */
{  yy_destructor(yypParser,243,&yymsp[-4].minor);
  yy_destructor(yypParser,175,&yymsp[-2].minor);
}
        break;
      case 229: /* insert_cmd ::= INSERT orconf */
{
                                                yygotominor.yy312 = new ParserStubInsertOrReplace(false, *(yymsp[0].minor.yy418));
                                                delete yymsp[0].minor.yy418;
                                            }
        break;
      case 230: /* insert_cmd ::= REPLACE */
{yygotominor.yy312 = new ParserStubInsertOrReplace(true);}
        break;
      case 231: /* valuelist ::= VALUES LP nexprlist RP */
{
                                                yygotominor.yy262 = new ParserExprNestedList();
                                                yygotominor.yy262->append(*(yymsp[-1].minor.yy455));
                                                delete yymsp[-1].minor.yy455;
                                            }
        break;
      case 232: /* valuelist ::= valuelist COMMA LP exprlist RP */
{
                                                yymsp[-4].minor.yy262->append(*(yymsp[-1].minor.yy455));
                                                yygotominor.yy262 = yymsp[-4].minor.yy262;
                                                delete yymsp[-1].minor.yy455;
                                                DONT_INHERIT_TOKENS("valuelist");
                                            }
        break;
      case 233: /* inscollist_opt ::= */
{yygotominor.yy303 = new ParserStringList();}
        break;
      case 234: /* inscollist_opt ::= LP inscollist RP */
{yygotominor.yy303 = yymsp[-1].minor.yy303;}
        break;
      case 235: /* inscollist ::= inscollist COMMA nm */
{
                                                yymsp[-2].minor.yy303->append(*(yymsp[0].minor.yy287));
                                                yygotominor.yy303 = yymsp[-2].minor.yy303;
                                                delete yymsp[0].minor.yy287;
                                                DONT_INHERIT_TOKENS("inscollist");
                                            }
        break;
      case 236: /* inscollist ::= nm */
      case 398: /* vtabarglist ::= vtabarg */ yytestcase(yyruleno==398);
{
                                                yygotominor.yy303 = new ParserStringList();
                                                yygotominor.yy303->append(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                            }
        break;
      case 237: /* inscollist ::= */
{
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                                yygotominor.yy303 = new ParserStringList();
                                            }
        break;
      case 238: /* inscollist ::= inscollist COMMA ID_COL */
      case 239: /* inscollist ::= ID_COL */ yytestcase(yyruleno==239);
{  yy_destructor(yypParser,236,&yymsp[-2].minor);
}
        break;
      case 240: /* exprx ::= term */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initLiteral(*(yymsp[0].minor.yy261));
                                                delete yymsp[0].minor.yy261;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 241: /* exprx ::= CTIME_KW */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initCTime(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 242: /* exprx ::= LP expr RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initSubExpr(yymsp[-1].minor.yy512);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 243: /* exprx ::= id */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initId(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 244: /* exprx ::= JOIN_KW */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initId(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 245: /* exprx ::= nm DOT nm */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initId(*(yymsp[-2].minor.yy287), *(yymsp[0].minor.yy287));
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 246: /* exprx ::= nm DOT nm DOT nm */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initId(*(yymsp[-4].minor.yy287), *(yymsp[-2].minor.yy287), *(yymsp[0].minor.yy287));
                                                delete yymsp[-4].minor.yy287;
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 247: /* exprx ::= VARIABLE */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initBindParam(yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 248: /* exprx ::= expr COLLATE ids */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initCollate(yymsp[-2].minor.yy512, *(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 249: /* exprx ::= CAST LP expr AS typetoken RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initCast(yymsp[-3].minor.yy512, yymsp[-1].minor.yy441);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 250: /* exprx ::= ID LP distinct exprlist RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initFunction(yymsp[-4].minor.yy0->value, *(yymsp[-2].minor.yy450), *(yymsp[-1].minor.yy455));
                                                delete yymsp[-2].minor.yy450;
                                                delete yymsp[-1].minor.yy455;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 251: /* exprx ::= ID LP STAR RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initFunction(yymsp[-3].minor.yy0->value, true);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 252: /* exprx ::= expr AND expr */
      case 253: /* exprx ::= expr OR expr */ yytestcase(yyruleno==253);
      case 254: /* exprx ::= expr LT|GT|GE|LE expr */ yytestcase(yyruleno==254);
      case 255: /* exprx ::= expr EQ|NE expr */ yytestcase(yyruleno==255);
      case 256: /* exprx ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr */ yytestcase(yyruleno==256);
      case 257: /* exprx ::= expr PLUS|MINUS expr */ yytestcase(yyruleno==257);
      case 258: /* exprx ::= expr STAR|SLASH|REM expr */ yytestcase(yyruleno==258);
      case 259: /* exprx ::= expr CONCAT expr */ yytestcase(yyruleno==259);
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initBinOp(yymsp[-2].minor.yy512, yymsp[-1].minor.yy0->value, yymsp[0].minor.yy512);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 260: /* exprx ::= expr not_opt likeop expr */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initLike(yymsp[-3].minor.yy512, *(yymsp[-2].minor.yy99), *(yymsp[-1].minor.yy232), yymsp[0].minor.yy512);
                                                delete yymsp[-2].minor.yy99;
                                                delete yymsp[-1].minor.yy232;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 261: /* exprx ::= expr not_opt likeop expr ESCAPE expr */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initLike(yymsp[-5].minor.yy512, *(yymsp[-4].minor.yy99), *(yymsp[-3].minor.yy232), yymsp[-2].minor.yy512, yymsp[0].minor.yy512);
                                                delete yymsp[-4].minor.yy99;
                                                delete yymsp[-3].minor.yy232;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 262: /* exprx ::= expr ISNULL|NOTNULL */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initNull(yymsp[-1].minor.yy512, yymsp[0].minor.yy0->value);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 263: /* exprx ::= expr NOT NULL */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initNull(yymsp[-2].minor.yy512, "NOT NULL");
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 264: /* exprx ::= expr IS not_opt expr */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initIs(yymsp[-3].minor.yy512, *(yymsp[-1].minor.yy99), yymsp[0].minor.yy512);
                                                delete yymsp[-1].minor.yy99;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 265: /* exprx ::= NOT expr */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initUnaryOp(yymsp[0].minor.yy512, yymsp[-1].minor.yy0->value);
                                            }
        break;
      case 266: /* exprx ::= BITNOT expr */
      case 267: /* exprx ::= MINUS expr */ yytestcase(yyruleno==267);
      case 268: /* exprx ::= PLUS expr */ yytestcase(yyruleno==268);
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initUnaryOp(yymsp[0].minor.yy512, yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 269: /* exprx ::= expr not_opt BETWEEN expr AND expr */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initBetween(yymsp[-5].minor.yy512, *(yymsp[-4].minor.yy99), yymsp[-2].minor.yy512, yymsp[0].minor.yy512);
                                                delete yymsp[-4].minor.yy99;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 270: /* exprx ::= expr not_opt IN LP exprlist RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initIn(yymsp[-5].minor.yy512, *(yymsp[-4].minor.yy99), *(yymsp[-1].minor.yy455));
                                                delete yymsp[-4].minor.yy99;
                                                delete yymsp[-1].minor.yy455;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 271: /* exprx ::= LP select RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initSubSelect(yymsp[-1].minor.yy377);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 272: /* exprx ::= expr not_opt IN LP select RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initIn(yymsp[-5].minor.yy512, *(yymsp[-4].minor.yy99), yymsp[-1].minor.yy377);
                                                delete yymsp[-4].minor.yy99;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 273: /* exprx ::= expr not_opt IN nm dbnm */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initIn(yymsp[-4].minor.yy512, yymsp[-3].minor.yy99, *(yymsp[-1].minor.yy287), *(yymsp[0].minor.yy287));
                                                delete yymsp[-3].minor.yy99;
                                                delete yymsp[-1].minor.yy287;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 274: /* exprx ::= EXISTS LP select RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initExists(yymsp[-1].minor.yy377);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 275: /* exprx ::= CASE case_operand case_exprlist case_else END */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initCase(yymsp[-3].minor.yy512, *(yymsp[-2].minor.yy455), yymsp[-1].minor.yy512);
                                                delete yymsp[-2].minor.yy455;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 276: /* exprx ::= RAISE LP IGNORE RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initRaise(yymsp[-1].minor.yy0->value);
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 277: /* exprx ::= RAISE LP raisetype COMMA nm RP */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initRaise(yymsp[-3].minor.yy0->value, *(yymsp[-1].minor.yy287));
                                                delete yymsp[-1].minor.yy287;
                                                objectForTokens = yygotominor.yy512;
                                            }
        break;
      case 278: /* exprx ::= nm DOT */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initId(*(yymsp[-1].minor.yy287), QString::null, QString::null);
                                                delete yymsp[-1].minor.yy287;
                                                objectForTokens = yygotominor.yy512;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 279: /* exprx ::= nm DOT nm DOT */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                yygotominor.yy512->initId(*(yymsp[-3].minor.yy287), *(yymsp[-1].minor.yy287), QString::null);
                                                delete yymsp[-3].minor.yy287;
                                                delete yymsp[-1].minor.yy287;
                                                objectForTokens = yygotominor.yy512;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 280: /* exprx ::= expr not_opt BETWEEN expr */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                delete yymsp[-2].minor.yy99;
                                                delete yymsp[-3].minor.yy512;
                                                delete yymsp[0].minor.yy512;
                                                objectForTokens = yygotominor.yy512;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 281: /* exprx ::= CASE case_operand case_exprlist case_else */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                delete yymsp[-1].minor.yy455;
                                                delete yymsp[-2].minor.yy512;
                                                delete yymsp[0].minor.yy512;
                                                objectForTokens = yygotominor.yy512;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 282: /* exprx ::= expr not_opt IN LP exprlist */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                delete yymsp[-3].minor.yy99;
                                                delete yymsp[0].minor.yy455;
                                                delete yymsp[-4].minor.yy512;
                                                objectForTokens = yygotominor.yy512;
                                                parserContext->minorErrorBeforeNextToken("Syntax error");
                                            }
        break;
      case 283: /* exprx ::= expr not_opt IN ID_DB */
{  yy_destructor(yypParser,197,&yymsp[-3].minor);
}
        break;
      case 284: /* exprx ::= expr not_opt IN nm DOT ID_TAB */
      case 285: /* exprx ::= ID_DB|ID_TAB|ID_COL|ID_FN */ yytestcase(yyruleno==285);
{  yy_destructor(yypParser,197,&yymsp[-5].minor);
  yy_destructor(yypParser,175,&yymsp[-2].minor);
}
        break;
      case 287: /* exprx ::= nm DOT nm DOT ID_COL */
{  yy_destructor(yypParser,175,&yymsp[-4].minor);
  yy_destructor(yypParser,175,&yymsp[-2].minor);
}
        break;
      case 288: /* exprx ::= expr COLLATE ID_COLLATE */
      case 289: /* exprx ::= RAISE LP raisetype COMMA ID_ERR_MSG RP */ yytestcase(yyruleno==289);
{  yy_destructor(yypParser,197,&yymsp[-2].minor);
}
        break;
      case 291: /* expr ::= */
{
                                                yygotominor.yy512 = new SqliteExpr();
                                                objectForTokens = yygotominor.yy512;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 294: /* likeop ::= LIKE_KW|MATCH */
{yygotominor.yy232 = new SqliteExpr::LikeOp(SqliteExpr::likeOp(yymsp[0].minor.yy0->value));}
        break;
      case 295: /* case_exprlist ::= case_exprlist WHEN expr THEN expr */
{
                                                yymsp[-4].minor.yy455->append(yymsp[-2].minor.yy512);
                                                yymsp[-4].minor.yy455->append(yymsp[0].minor.yy512);
                                                yygotominor.yy455 = yymsp[-4].minor.yy455;
                                            }
        break;
      case 296: /* case_exprlist ::= WHEN expr THEN expr */
{
                                                yygotominor.yy455 = new ParserExprList();
                                                yygotominor.yy455->append(yymsp[-2].minor.yy512);
                                                yygotominor.yy455->append(yymsp[0].minor.yy512);
                                            }
        break;
      case 303: /* nexprlist ::= nexprlist COMMA expr */
{
                                                yymsp[-2].minor.yy455->append(yymsp[0].minor.yy512);
                                                yygotominor.yy455 = yymsp[-2].minor.yy455;
                                                DONT_INHERIT_TOKENS("nexprlist");
                                            }
        break;
      case 304: /* nexprlist ::= exprx */
{
                                                yygotominor.yy455 = new ParserExprList();
                                                yygotominor.yy455->append(yymsp[0].minor.yy512);
                                            }
        break;
      case 305: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON nm LP idxlist RP where_opt */
{
                                                yygotominor.yy331 = new SqliteCreateIndex(
                                                        *(yymsp[-10].minor.yy99),
                                                        *(yymsp[-8].minor.yy99),
                                                        *(yymsp[-7].minor.yy287),
                                                        *(yymsp[-6].minor.yy287),
                                                        *(yymsp[-4].minor.yy287),
                                                        *(yymsp[-2].minor.yy127),
                                                        yymsp[0].minor.yy512
                                                    );
                                                delete yymsp[-8].minor.yy99;
                                                delete yymsp[-10].minor.yy99;
                                                delete yymsp[-7].minor.yy287;
                                                delete yymsp[-6].minor.yy287;
                                                delete yymsp[-4].minor.yy287;
                                                delete yymsp[-2].minor.yy127;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 306: /* cmd ::= CREATE uniqueflag INDEX ifnotexists nm dbnm ON ID_TAB */
{  yy_destructor(yypParser,175,&yymsp[-3].minor);
}
        break;
      case 311: /* idxlist_opt ::= */
{yygotominor.yy127 = new ParserIndexedColumnList();}
        break;
      case 312: /* idxlist_opt ::= LP idxlist RP */
{yygotominor.yy127 = yymsp[-1].minor.yy127;}
        break;
      case 313: /* idxlist ::= idxlist COMMA idxlist_single */
{
                                                yymsp[-2].minor.yy127->append(yymsp[0].minor.yy140);
                                                yygotominor.yy127 = yymsp[-2].minor.yy127;
                                                DONT_INHERIT_TOKENS("idxlist");
                                            }
        break;
      case 314: /* idxlist ::= idxlist_single */
{
                                                yygotominor.yy127 = new ParserIndexedColumnList();
                                                yygotominor.yy127->append(yymsp[0].minor.yy140);
                                            }
        break;
      case 315: /* idxlist_single ::= nm collate sortorder */
      case 316: /* idxlist_single ::= ID_COL */ yytestcase(yyruleno==316);
{
                                                SqliteIndexedColumn* obj =
                                                    new SqliteIndexedColumn(
                                                        *(yymsp[-2].minor.yy287),
                                                        *(yymsp[-1].minor.yy287),
                                                        *(yymsp[0].minor.yy197)
                                                    );
                                                yygotominor.yy140 = obj;
                                                delete yymsp[0].minor.yy197;
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[-1].minor.yy287;
                                                objectForTokens = yygotominor.yy140;
                                            }
        break;
      case 320: /* cmd ::= DROP INDEX ifexists fullname */
{
                                                yygotominor.yy331 = new SqliteDropIndex(*(yymsp[-1].minor.yy99), yymsp[0].minor.yy504->name1, yymsp[0].minor.yy504->name2);
                                                delete yymsp[-1].minor.yy99;
                                                delete yymsp[0].minor.yy504;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 323: /* cmd ::= VACUUM */
{
                                                yygotominor.yy331 = new SqliteVacuum();
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 324: /* cmd ::= VACUUM nm */
{
                                                yygotominor.yy331 = new SqliteVacuum(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 325: /* cmd ::= PRAGMA nm dbnm */
{
                                                yygotominor.yy331 = new SqlitePragma(*(yymsp[-1].minor.yy287), *(yymsp[0].minor.yy287));
                                                delete yymsp[-1].minor.yy287;
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 326: /* cmd ::= PRAGMA nm dbnm EQ nmnum */
      case 328: /* cmd ::= PRAGMA nm dbnm EQ minus_num */ yytestcase(yyruleno==328);
{
                                                yygotominor.yy331 = new SqlitePragma(*(yymsp[-3].minor.yy287), *(yymsp[-2].minor.yy287), *(yymsp[0].minor.yy261), true);
                                                delete yymsp[-3].minor.yy287;
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[0].minor.yy261;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 327: /* cmd ::= PRAGMA nm dbnm LP nmnum RP */
      case 329: /* cmd ::= PRAGMA nm dbnm LP minus_num RP */ yytestcase(yyruleno==329);
{
                                                yygotominor.yy331 = new SqlitePragma(*(yymsp[-4].minor.yy287), *(yymsp[-3].minor.yy287), *(yymsp[-1].minor.yy261), false);
                                                delete yymsp[-4].minor.yy287;
                                                delete yymsp[-3].minor.yy287;
                                                delete yymsp[-1].minor.yy261;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 333: /* nmnum ::= nm */
{
                                                yygotominor.yy261 = new QVariant(*(yymsp[0].minor.yy287));
                                                delete yymsp[0].minor.yy287;
                                            }
        break;
      case 339: /* minus_num ::= MINUS number */
{
                                                if (yymsp[0].minor.yy261->type() == QVariant::Double)
                                                    *(yymsp[0].minor.yy261) = -(yymsp[0].minor.yy261->toDouble());
                                                else if (yymsp[0].minor.yy261->type() == QVariant::LongLong)
                                                    *(yymsp[0].minor.yy261) = -(yymsp[0].minor.yy261->toLongLong());
                                                else
                                                    Q_ASSERT_X(true, "producing minus number", "QVariant is neither of Double or LongLong.");

                                                yygotominor.yy261 = yymsp[0].minor.yy261;
                                            }
        break;
      case 340: /* number ::= INTEGER */
{yygotominor.yy261 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toLongLong());}
        break;
      case 341: /* number ::= FLOAT */
{yygotominor.yy261 = new QVariant(QVariant(yymsp[0].minor.yy0->value).toDouble());}
        break;
      case 342: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list END */
{
                                                yygotominor.yy331 = new SqliteCreateTrigger(
                                                        *(yymsp[-13].minor.yy450),
                                                        *(yymsp[-11].minor.yy99),
                                                        *(yymsp[-10].minor.yy287),
                                                        *(yymsp[-9].minor.yy287),
                                                        *(yymsp[-5].minor.yy287),
                                                        *(yymsp[-8].minor.yy52),
                                                        yymsp[-7].minor.yy23,
                                                        *(yymsp[-4].minor.yy149),
                                                        yymsp[-3].minor.yy512,
                                                        *(yymsp[-1].minor.yy494),
                                                        3
                                                    );
                                                delete yymsp[-11].minor.yy99;
                                                delete yymsp[-13].minor.yy450;
                                                delete yymsp[-8].minor.yy52;
                                                delete yymsp[-4].minor.yy149;
                                                delete yymsp[-10].minor.yy287;
                                                delete yymsp[-5].minor.yy287;
                                                delete yymsp[-9].minor.yy287;
                                                delete yymsp[-1].minor.yy494;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 343: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause */
{
                                                QList<SqliteQuery *> CL;

                                                yygotominor.yy331 = new SqliteCreateTrigger(
                                                        *(yymsp[-10].minor.yy450),
                                                        *(yymsp[-8].minor.yy99),
                                                        *(yymsp[-7].minor.yy287),
                                                        *(yymsp[-6].minor.yy287),
                                                        *(yymsp[-2].minor.yy287),
                                                        *(yymsp[-5].minor.yy52),
                                                        yymsp[-4].minor.yy23,
                                                        *(yymsp[-1].minor.yy149),
                                                        yymsp[0].minor.yy512,
                                                        CL,
                                                        3
                                                    );
                                                delete yymsp[-8].minor.yy99;
                                                delete yymsp[-10].minor.yy450;
                                                delete yymsp[-5].minor.yy52;
                                                delete yymsp[-1].minor.yy149;
                                                delete yymsp[-7].minor.yy287;
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[-6].minor.yy287;
                                                objectForTokens = yygotominor.yy331;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 344: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON nm foreach_clause when_clause BEGIN trigger_cmd_list */
{
                                                yygotominor.yy331 = new SqliteCreateTrigger(
                                                *(yymsp[-12].minor.yy450),
                                                *(yymsp[-10].minor.yy99),
                                                *(yymsp[-9].minor.yy287),
                                                *(yymsp[-8].minor.yy287),
                                                *(yymsp[-4].minor.yy287),
                                                *(yymsp[-7].minor.yy52),
                                                yymsp[-6].minor.yy23,
                                                *(yymsp[-3].minor.yy149),
                                                yymsp[-2].minor.yy512,
                                                *(yymsp[0].minor.yy494),
                                                3
                                                );
                                                delete yymsp[-10].minor.yy99;
                                                delete yymsp[-12].minor.yy450;
                                                delete yymsp[-7].minor.yy52;
                                                delete yymsp[-3].minor.yy149;
                                                delete yymsp[-9].minor.yy287;
                                                delete yymsp[-4].minor.yy287;
                                                delete yymsp[-8].minor.yy287;
                                                delete yymsp[0].minor.yy494;
                                                objectForTokens = yygotominor.yy331;
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 345: /* cmd ::= CREATE temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON ID_TAB */
{  yy_destructor(yypParser,177,&yymsp[-8].minor);
  yy_destructor(yypParser,175,&yymsp[-5].minor);
  yy_destructor(yypParser,258,&yymsp[-3].minor);
  yy_destructor(yypParser,259,&yymsp[-2].minor);
}
        break;
      case 348: /* trigger_time ::= BEFORE */
{yygotominor.yy52 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::BEFORE);}
        break;
      case 349: /* trigger_time ::= AFTER */
{yygotominor.yy52 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::AFTER);}
        break;
      case 350: /* trigger_time ::= INSTEAD OF */
{yygotominor.yy52 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::INSTEAD_OF);}
        break;
      case 351: /* trigger_time ::= */
{yygotominor.yy52 = new SqliteCreateTrigger::Time(SqliteCreateTrigger::Time::null);}
        break;
      case 352: /* trigger_event ::= DELETE */
{
                                                yygotominor.yy23 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::DELETE);
                                                objectForTokens = yygotominor.yy23;
                                            }
        break;
      case 353: /* trigger_event ::= INSERT */
{
                                                yygotominor.yy23 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::INSERT);
                                                objectForTokens = yygotominor.yy23;
                                            }
        break;
      case 354: /* trigger_event ::= UPDATE */
{
                                                yygotominor.yy23 = new SqliteCreateTrigger::Event(SqliteCreateTrigger::Event::UPDATE);
                                                objectForTokens = yygotominor.yy23;
                                            }
        break;
      case 355: /* trigger_event ::= UPDATE OF inscollist */
{
                                                yygotominor.yy23 = new SqliteCreateTrigger::Event(*(yymsp[0].minor.yy303));
                                                delete yymsp[0].minor.yy303;
                                                objectForTokens = yygotominor.yy23;
                                            }
        break;
      case 356: /* foreach_clause ::= */
{yygotominor.yy149 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::null);}
        break;
      case 357: /* foreach_clause ::= FOR EACH ROW */
{yygotominor.yy149 = new SqliteCreateTrigger::Scope(SqliteCreateTrigger::Scope::FOR_EACH_ROW);}
        break;
      case 360: /* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI */
{
                                                yymsp[-2].minor.yy494->append(yymsp[-1].minor.yy331);
                                                yygotominor.yy494 = yymsp[-2].minor.yy494;
                                                DONT_INHERIT_TOKENS("trigger_cmd_list");
                                            }
        break;
      case 361: /* trigger_cmd_list ::= trigger_cmd SEMI */
{
                                                yygotominor.yy494 = new ParserQueryList();
                                                yygotominor.yy494->append(yymsp[-1].minor.yy331);
                                            }
        break;
      case 362: /* trigger_cmd_list ::= SEMI */
{
                                                yygotominor.yy494 = new ParserQueryList();
                                                parserContext->minorErrorAfterLastToken("Syntax error");
                                            }
        break;
      case 367: /* raisetype ::= ROLLBACK|ABORT|FAIL */
{yygotominor.yy0 = yymsp[0].minor.yy0;}
        break;
      case 368: /* cmd ::= DROP TRIGGER ifexists fullname */
{
                                                yygotominor.yy331 = new SqliteDropTrigger(*(yymsp[-1].minor.yy99), yymsp[0].minor.yy504->name1, yymsp[0].minor.yy504->name2);
                                                delete yymsp[-1].minor.yy99;
                                                delete yymsp[0].minor.yy504;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 371: /* cmd ::= ATTACH database_kw_opt expr AS expr key_opt */
{
                                                yygotominor.yy331 = new SqliteAttach(*(yymsp[-4].minor.yy99), yymsp[-3].minor.yy512, yymsp[-1].minor.yy512, yymsp[0].minor.yy512);
                                                delete yymsp[-4].minor.yy99;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 372: /* cmd ::= DETACH database_kw_opt expr */
{
                                                yygotominor.yy331 = new SqliteDetach(*(yymsp[-1].minor.yy99), yymsp[0].minor.yy512);
                                                delete yymsp[-1].minor.yy99;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 377: /* cmd ::= REINDEX */
{yygotominor.yy331 = new SqliteReindex();}
        break;
      case 378: /* cmd ::= REINDEX nm dbnm */
      case 379: /* cmd ::= REINDEX ID_COLLATE */ yytestcase(yyruleno==379);
{
                                                yygotominor.yy331 = new SqliteReindex(*(yymsp[-1].minor.yy287), *(yymsp[0].minor.yy287));
                                                delete yymsp[-1].minor.yy287;
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 382: /* cmd ::= ANALYZE */
{
                                                yygotominor.yy331 = new SqliteAnalyze();
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 383: /* cmd ::= ANALYZE nm dbnm */
{
                                                yygotominor.yy331 = new SqliteAnalyze(*(yymsp[-1].minor.yy287), *(yymsp[0].minor.yy287));
                                                delete yymsp[-1].minor.yy287;
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 386: /* cmd ::= ALTER TABLE fullname RENAME TO nm */
{
                                                yygotominor.yy331 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy504->name1,
                                                        yymsp[-3].minor.yy504->name2,
                                                        *(yymsp[0].minor.yy287)
                                                    );
                                                delete yymsp[0].minor.yy287;
                                                delete yymsp[-3].minor.yy504;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 387: /* cmd ::= ALTER TABLE fullname ADD kwcolumn_opt column */
{
                                                yygotominor.yy331 = new SqliteAlterTable(
                                                        yymsp[-3].minor.yy504->name1,
                                                        yymsp[-3].minor.yy504->name2,
                                                        *(yymsp[-1].minor.yy99),
                                                        yymsp[0].minor.yy115
                                                    );
                                                delete yymsp[-1].minor.yy99;
                                                delete yymsp[-3].minor.yy504;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 388: /* cmd ::= ALTER TABLE fullname RENAME TO ID_TAB_NEW */
{  yy_destructor(yypParser,179,&yymsp[-3].minor);
}
        break;
      case 394: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm */
{
                                                yygotominor.yy331 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-4].minor.yy99),
                                                        *(yymsp[-3].minor.yy287),
                                                        *(yymsp[-2].minor.yy287),
                                                        *(yymsp[0].minor.yy287)
                                                    );
                                                delete yymsp[-4].minor.yy99;
                                                delete yymsp[-3].minor.yy287;
                                                delete yymsp[-2].minor.yy287;
                                                delete yymsp[0].minor.yy287;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 395: /* create_vtab ::= CREATE VIRTUAL TABLE ifnotexists nm dbnm USING nm LP vtabarglist RP */
{
                                                yygotominor.yy331 = new SqliteCreateVirtualTable(
                                                        *(yymsp[-7].minor.yy99),
                                                        *(yymsp[-6].minor.yy287),
                                                        *(yymsp[-5].minor.yy287),
                                                        *(yymsp[-3].minor.yy287),
                                                        *(yymsp[-1].minor.yy303)
                                                    );
                                                delete yymsp[-6].minor.yy287;
                                                delete yymsp[-5].minor.yy287;
                                                delete yymsp[-3].minor.yy287;
                                                delete yymsp[-7].minor.yy99;
                                                delete yymsp[-1].minor.yy303;
                                                objectForTokens = yygotominor.yy331;
                                            }
        break;
      case 399: /* vtabarglist ::= vtabarglist COMMA vtabarg */
{
                                                yymsp[-2].minor.yy303->append(*(yymsp[0].minor.yy287));
                                                yygotominor.yy303 = yymsp[-2].minor.yy303;
                                                delete yymsp[0].minor.yy287;
                                                DONT_INHERIT_TOKENS("vtabarglist");
                                            }
        break;
      case 401: /* vtabarg ::= vtabarg vtabargtoken */
{
                                                yymsp[-1].minor.yy287->append(" "+ *(yymsp[0].minor.yy287));
                                                yygotominor.yy287 = yymsp[-1].minor.yy287;
                                                delete yymsp[0].minor.yy287;
                                            }
        break;
      case 402: /* vtabargtoken ::= ANY */
{
                                                yygotominor.yy287 = new QString(yymsp[0].minor.yy0->value);
                                            }
        break;
      case 403: /* vtabargtoken ::= LP anylist RP */
{
                                                yygotominor.yy287 = new QString("(");
                                                yygotominor.yy287->append(*(yymsp[-1].minor.yy287));
                                                yygotominor.yy287->append(")");
                                                delete yymsp[-1].minor.yy287;
                                            }
        break;
      case 405: /* anylist ::= anylist LP anylist RP */
{
                                                yygotominor.yy287 = yymsp[-3].minor.yy287;
                                                yygotominor.yy287->append("(");
                                                yygotominor.yy287->append(*(yymsp[-1].minor.yy287));
                                                yygotominor.yy287->append(")");
                                                delete yymsp[-1].minor.yy287;
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      case 406: /* anylist ::= anylist ANY */
{
                                                yygotominor.yy287 = yymsp[-1].minor.yy287;
                                                yygotominor.yy287->append(yymsp[0].minor.yy0->value);
                                                DONT_INHERIT_TOKENS("anylist");
                                            }
        break;
      default:
      /* (0) input ::= cmdlist */ yytestcase(yyruleno==0);
        break;
      };
  }
  assert( yyruleno>=0 && yyruleno<(int)(sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0])) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;

  // Store tokens for the rule in parser context
  QList<Token*> allTokens;
  QList<Token*> allTokensWithAllInherited;
  QString keyForTokensMap;
  int tokensMapKeyCnt;
  if (parserContext->setupTokens)
  {
      if (objectForTokens)
      {
          // In case this is a list with recurrent references we need
          // to clear tokens before adding the new and extended list.
          objectForTokens->tokens.clear();
      }

      QList<Token*> tokens;
      for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
      {
          tokens.clear();
          const char* fieldName = yyTokenName[yypParser->yystack[i].major];
          if (parserContext->isManagedToken(yypParser->yystack[i].minor.yy0))
              tokens += yypParser->yystack[i].minor.yy0;

          tokens += *(yypParser->yystack[i].tokens);

          if (!noTokenInheritanceFields.contains(fieldName))
          {
              if (objectForTokens)
              {
                  keyForTokensMap = fieldName;
                  tokensMapKeyCnt = 2;
                  while (objectForTokens->tokensMap.contains(keyForTokensMap))
                      keyForTokensMap = fieldName + QString::number(tokensMapKeyCnt++);

                  objectForTokens->tokensMap[keyForTokensMap] = parserContext->getTokenPtrList(tokens);
              }

              allTokens += tokens;
          }
          else
          {
              // If field is mentioned only once, then only one occurance of it will be ignored.
              // Second one should be inherited. See "anylist" definition for explanation why.
              noTokenInheritanceFields.removeOne(fieldName);
          }
          allTokensWithAllInherited += tokens;
      }
      if (objectForTokens)
      {
          objectForTokens->tokens += parserContext->getTokenPtrList(allTokens);
          //objectForTokens->inheritedTokens += allTokensWithAllInherited;
      }
  }

  // Clear token lists
  for (int i = yypParser->yyidx - yysize + 1; i <= yypParser->yyidx; i++)
  {
      delete yypParser->yystack[i].tokens;
      yypParser->yystack[i].tokens = nullptr;
  }

  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
      if (parserContext->setupTokens)
          *(yypParser->yystack[yypParser->yyidx].tokens) = allTokens;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
      if (parserContext->setupTokens)
      {
          QList<Token*>* tokensPtr = yypParser->yystack[yypParser->yyidx].tokens;
          *tokensPtr = allTokensWithAllInherited + *tokensPtr;
      }
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  sqlite3_parseARG_FETCH;
#define TOKEN (yyminor.yy0)

    UNUSED_PARAMETER(yymajor);
    parserContext->error(TOKEN, QObject::tr("Syntax error"));
    //qDebug() << "near " << TOKEN->toString() << ": syntax error";
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  sqlite3_parseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
  sqlite3_parseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "sqlite3_parseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void sqlite3_parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  sqlite3_parseTOKENTYPE yyminor       /* The value for the token */
  sqlite3_parseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
    yypParser->yystack[0].tokens = new QList<Token*>();
  }
  yyminorunion.yy0 = yyminor;
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif
  sqlite3_parseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s [%s] (lemon type: %s)\n",
            yyTracePrompt,
            yyminor->value.toLatin1().data(),
            yyminor->typeString().toLatin1().data(),
            yyTokenName[yymajor]);  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;

#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 1; // not 3 valid tokens, but 1
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
