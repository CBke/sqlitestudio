* menu entries: "about sqlitestudio", "user manual", "homepage", "donate"
* hexadecimals from 3.8.6 support
* enterprise SQL formatter

* bug reporting
* deployment
* auto updates

* licenses for all used dependencies, icons, etc

* 3.0 musi importowac ustawienia z 2.1:
  - lista baz
  - funkcje sql
  - historie sql


* Next versions:
- syntax checkers as services - per language
- code assistants as services - per language
- tcl highlighter
- plugin to do performance testing
- plugins to generate artifacts
- qtscript syntax checker
- tcl syntax checker
- dbf import
- dbf export
- code assistant as a service with plugins, so it can be extended with other langs and injected in custom functions window, collations window, etc
- in configuration dialog option to disable each individual native SQL function
- move "integrity check" into dedicated window, add "PRAGMA foreign_key_check" as a second stage of checking and present all in one window
- tips&tricks dialog
- crash management
- SqlEditor::refreshValidObjects() doesn't add valid object names from other databases (not yet attached). It might be tricky to implement.
- need an idea for some smart "revert" or "backup", so users are protected from accidentaly deleting table, or data in table.
- expose query executor steps chain to plugins
- complete plugin for "Search in database(s)"
- complete plugin for compare tables/databases

CLI:
- plugin management commands
- export commands
- import commands
- populate commands
- formatting command

UNIT TESTS:
- Parser::parse: more complex examples, errors detecting
- Lexer::detokenize
- utils_sql (for splitQueries() check the CREATE TRIGGER)
- utils
- SelectResolver
- SchemaResolver

* Advanced syntax error checks:
- many idxColumns are not allowed for column FK
- autoincrement not allowed for not integer type









Qt mingw:
Not an easy task. I got Perl, Python, Ruby and MinGw/bin in path and
use this line

configure -opensource -confirm-license -platform win32-g++ -make libs
-qt-libjpeg -qt-libpng -no-openssl -no-icu  -qt-zlib -qt-pcre
-no-iconv -nomake examples -nomake tests -qt-style-windowsxp
-qt-style-windowsvista -opengl
desktop



SQLiteStudio3 win32:
1. Checkout svn://sqlitestudio.pl/sqlitestudio3/SQLiteStudio3/trunk
2. Checkout svn://sqlitestudio.pl/sqlitestudio3/plugins/DbSqlite3/trunk
3. Checkout svn://sqlitestudio.pl/sqlitestudio3/plugins/DbSqlite2/trunk
4. Run QtCreator and open project from SQLiteStudio3.pro file. Open plugin projects the same way.
5. Change project binaries output to: {project path}\output\SQLiteStudio3
   Do the same for plugin projects as well.
   6. Create "include" directory next to SQLiteStudio3 directory.
   7. Create "lib" directory at the same level, next to "include" dir.
   8. Copy libtecla.h, curses.h, sqlite.h and sqlite3.h into include directory.
   9. Copy pdcurses.dll, pdcurses.lib and libtecla.a to lib directory.
   10. Compile everything.
   11. On projects page of SQLiteStudio project add env variables for running environment:
   SQLITESTUDIO_ICONS -> {prk}\SQLiteStudio3\SQLiteStudio\img (C:\projects2\SQLiteStudio3\SQLiteStudio\img)
   SQLITESTUDIO_PLUGINS -> {prk}\output\DbSqlite3\debug;{prk}\output\DbSqlite2\debug (C:\projects2\output\DbSqlite3\debug;C:\projects2\output\DbSqlite2\debug)

   DbSqlite2 win32:
   1. Download qtbase sourcecode and unpack it.
   2. Get sqlite.h, sqlite.def and sqlite.dll. Put them into the lib directory of SQLiteStudio3 projects workspace.
   3. Edit sqlite.def and add at the end:
   sqlite_encoding
   4. Go to {prj}/lib and execute:
   dlltool --input-def sqlite.def --dllname sqlite.dll --output-lib libsqlite.a -k
   5. Go to qtbase-opensource-src-5.1.1\src\plugins\sqldrivers\sqlite2
   6. Execute: qmake "INCLUDEPATH+={prj}/include" "LIBS+=-L{prj}/lib -lsqlite"
   7. Execute: mingw32-make
   7. Execute: mingw32-make install
